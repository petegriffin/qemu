#### Enabling IEEE Half Precision
### Rounding to nearest
Converting single-precision to half-precision
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00   HALF: 0000  (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01   HALF: 0000  (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02   HALF: 0000  (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03   HALF: 0000  (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04   HALF: 0000  (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05   HALF: 0000  (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06   HALF: 0000  (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07   HALF: 0000  (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08   HALF: 0000  (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09   HALF: 0000  (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10   HALF: 0000  (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11   HALF: 0000  (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12   HALF: 0000  (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13   HALF: 0000  (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14   HALF: 0000  (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15   HALF: 0x3c00  (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16   HALF: 0x3c00  (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17   HALF: 0x4000  (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18   HALF: 0x4000  (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19   HALF: 0x4200  (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20   HALF: 0x7bff  (0x10 =>    INEXACT )
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21   HALF: 0x7bff  (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22   HALF: 0x7bff  (0x10 =>    INEXACT )
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23   HALF: 0x7bfe  (0x10 =>    INEXACT )
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24   HALF: 0x7bfe  (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25   HALF: 0x7bfe  (0x10 =>    INEXACT )
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29   HALF: 0000  (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30   HALF: 0000  (0 => OK)
Converting single-precision to double-precision
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19 DOUBLE: 3.00000000000000000000e+00 / 0x004008000000000000 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23 DOUBLE: 6.54710000000000000000e+04 / 0x0040eff7e000000000 (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24 DOUBLE: 6.54720000000000000000e+04 / 0x0040eff80000000000 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25 DOUBLE: 6.54730000000000000000e+04 / 0x0040eff82000000000 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
Converting single-precision to fixed point 32 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      2/       0x2 (0 => OK)
15  INT32:      4/       0x4 (0 => OK)
15  INT32:     16/      0x10 (0 => OK)
15  INT32:    256/     0x100 (0 => OK)
15  INT32:  65536/   0x10000 (0 => OK)
15  INT32:  65536/   0x10000 (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      2/       0x2 (0 => OK)
16  INT32:      4/       0x4 (0 => OK)
16  INT32:     16/      0x10 (0 => OK)
16  INT32:    256/     0x100 (0 => OK)
16  INT32:  65536/   0x10000 (0 => OK)
16  INT32:  65536/   0x10000 (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      4/       0x4 (0 => OK)
17  INT32:      8/       0x8 (0 => OK)
17  INT32:     32/      0x20 (0 => OK)
17  INT32:    512/     0x200 (0 => OK)
17  INT32: 131072/   0x20000 (0 => OK)
17  INT32: 131072/   0x20000 (0 => OK)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      4/       0x4 (0 => OK)
18  INT32:      8/       0x8 (0 => OK)
18  INT32:     32/      0x20 (0 => OK)
18  INT32:    512/     0x200 (0 => OK)
18  INT32: 131072/   0x20000 (0 => OK)
18  INT32: 131072/   0x20000 (0 => OK)
18  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      6/       0x6 (0 => OK)
19  INT32:     12/       0xc (0 => OK)
19  INT32:     48/      0x30 (0 => OK)
19  INT32:    768/     0x300 (0 => OK)
19  INT32: 196608/   0x30000 (0 => OK)
19  INT32: 196608/   0x30000 (0 => OK)
19  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32: 131006/   0x1ffbe (0 => OK)
20  INT32: 262012/   0x3ff7c (0 => OK)
20  INT32: 1048048/   0xffdf0 (0 => OK)
20  INT32: 16768768/  0xffdf00 (0 => OK)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32: 131008/   0x1ffc0 (0 => OK)
21  INT32: 262016/   0x3ff80 (0 => OK)
21  INT32: 1048064/   0xffe00 (0 => OK)
21  INT32: 16769024/  0xffe000 (0 => OK)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32: 131010/   0x1ffc2 (0 => OK)
22  INT32: 262020/   0x3ff84 (0 => OK)
22  INT32: 1048080/   0xffe10 (0 => OK)
22  INT32: 16769280/  0xffe100 (0 => OK)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32: 130942/   0x1ff7e (0 => OK)
23  INT32: 261884/   0x3fefc (0 => OK)
23  INT32: 1047536/   0xffbf0 (0 => OK)
23  INT32: 16760576/  0xffbf00 (0 => OK)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32: 130944/   0x1ff80 (0 => OK)
24  INT32: 261888/   0x3ff00 (0 => OK)
24  INT32: 1047552/   0xffc00 (0 => OK)
24  INT32: 16760832/  0xffc000 (0 => OK)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32: 130946/   0x1ff82 (0 => OK)
25  INT32: 261892/   0x3ff04 (0 => OK)
25  INT32: 1047568/   0xffc10 (0 => OK)
25  INT32: 16761088/  0xffc100 (0 => OK)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32: 131070/   0x1fffe (0 => OK)
26  INT32: 262140/   0x3fffc (0 => OK)
26  INT32: 1048560/   0xffff0 (0 => OK)
26  INT32: 16776960/  0xffff00 (0 => OK)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32: 131070/   0x1fffe (0 => OK)
27  INT32: 262140/   0x3fffc (0 => OK)
27  INT32: 1048560/   0xffff0 (0 => OK)
27  INT32: 16776960/  0xffff00 (0 => OK)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32: 131070/   0x1fffe (0 => OK)
28  INT32: 262140/   0x3fffc (0 => OK)
28  INT32: 1048560/   0xffff0 (0 => OK)
28  INT32: 16776960/  0xffff00 (0 => OK)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting single-precision to fixed point 64 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT64:                    2/0x000000000000000002 (0 => OK)
15  INT64:                    4/0x000000000000000004 (0 => OK)
15  INT64:                   16/0x000000000000000010 (0 => OK)
15  INT64:                  256/0x000000000000000100 (0 => OK)
15  INT64:                65536/0x000000000000010000 (0 => OK)
15  INT64:           4294967296/0x000000000100000000 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT64:                    2/0x000000000000000002 (0 => OK)
16  INT64:                    4/0x000000000000000004 (0 => OK)
16  INT64:                   16/0x000000000000000010 (0 => OK)
16  INT64:                  256/0x000000000000000100 (0 => OK)
16  INT64:                65536/0x000000000000010000 (0 => OK)
16  INT64:           4294967296/0x000000000100000000 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT64:                    4/0x000000000000000004 (0 => OK)
17  INT64:                    8/0x000000000000000008 (0 => OK)
17  INT64:                   32/0x000000000000000020 (0 => OK)
17  INT64:                  512/0x000000000000000200 (0 => OK)
17  INT64:               131072/0x000000000000020000 (0 => OK)
17  INT64:           8589934592/0x000000000200000000 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT64:                    4/0x000000000000000004 (0 => OK)
18  INT64:                    8/0x000000000000000008 (0 => OK)
18  INT64:                   32/0x000000000000000020 (0 => OK)
18  INT64:                  512/0x000000000000000200 (0 => OK)
18  INT64:               131072/0x000000000000020000 (0 => OK)
18  INT64:           8589934592/0x000000000200000000 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT64:                    6/0x000000000000000006 (0 => OK)
19  INT64:                   12/0x00000000000000000c (0 => OK)
19  INT64:                   48/0x000000000000000030 (0 => OK)
19  INT64:                  768/0x000000000000000300 (0 => OK)
19  INT64:               196608/0x000000000000030000 (0 => OK)
19  INT64:          12884901888/0x000000000300000000 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT64:               131006/0x00000000000001ffbe (0 => OK)
20  INT64:               262012/0x00000000000003ff7c (0 => OK)
20  INT64:              1048048/0x0000000000000ffdf0 (0 => OK)
20  INT64:             16768768/0x000000000000ffdf00 (0 => OK)
20  INT64:           4292804608/0x0000000000ffdf0000 (0 => OK)
20  INT64:      281333242789888/0x000000ffdf00000000 (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT64:               131008/0x00000000000001ffc0 (0 => OK)
21  INT64:               262016/0x00000000000003ff80 (0 => OK)
21  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
21  INT64:             16769024/0x000000000000ffe000 (0 => OK)
21  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
21  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT64:               131010/0x00000000000001ffc2 (0 => OK)
22  INT64:               262020/0x00000000000003ff84 (0 => OK)
22  INT64:              1048080/0x0000000000000ffe10 (0 => OK)
22  INT64:             16769280/0x000000000000ffe100 (0 => OK)
22  INT64:           4292935680/0x0000000000ffe10000 (0 => OK)
22  INT64:      281341832724480/0x000000ffe100000000 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT64:               130942/0x00000000000001ff7e (0 => OK)
23  INT64:               261884/0x00000000000003fefc (0 => OK)
23  INT64:              1047536/0x0000000000000ffbf0 (0 => OK)
23  INT64:             16760576/0x000000000000ffbf00 (0 => OK)
23  INT64:           4290707456/0x0000000000ffbf0000 (0 => OK)
23  INT64:      281195803836416/0x000000ffbf00000000 (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT64:               130944/0x00000000000001ff80 (0 => OK)
24  INT64:               261888/0x00000000000003ff00 (0 => OK)
24  INT64:              1047552/0x0000000000000ffc00 (0 => OK)
24  INT64:             16760832/0x000000000000ffc000 (0 => OK)
24  INT64:           4290772992/0x0000000000ffc00000 (0 => OK)
24  INT64:      281200098803712/0x000000ffc000000000 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT64:               130946/0x00000000000001ff82 (0 => OK)
25  INT64:               261892/0x00000000000003ff04 (0 => OK)
25  INT64:              1047568/0x0000000000000ffc10 (0 => OK)
25  INT64:             16761088/0x000000000000ffc100 (0 => OK)
25  INT64:           4290838528/0x0000000000ffc10000 (0 => OK)
25  INT64:      281204393771008/0x000000ffc100000000 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT64:               131070/0x00000000000001fffe (0 => OK)
26  INT64:               262140/0x00000000000003fffc (0 => OK)
26  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
26  INT64:             16776960/0x000000000000ffff00 (0 => OK)
26  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
26  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT64:               131070/0x00000000000001fffe (0 => OK)
27  INT64:               262140/0x00000000000003fffc (0 => OK)
27  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
27  INT64:             16776960/0x000000000000ffff00 (0 => OK)
27  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
27  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT64:               131070/0x00000000000001fffe (0 => OK)
28  INT64:               262140/0x00000000000003fffc (0 => OK)
28  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
28  INT64:             16776960/0x000000000000ffff00 (0 => OK)
28  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
28  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
Converting single-precision to 32 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      1/       0x1 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      1/       0x1 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      2/       0x2 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      2/       0x2 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      3/       0x3 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32:  65503/    0xffdf (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32:  65504/    0xffe0 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32:  65505/    0xffe1 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32:  65471/    0xffbf (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32:  65472/    0xffc0 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32:  65473/    0xffc1 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32:  65535/    0xffff (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32:  65535/    0xffff (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32:  65535/    0xffff (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting single-precision to 64 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      1/       0x1 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      1/       0x1 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      2/       0x2 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      2/       0x2 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      3/       0x3 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32:  65503/    0xffdf (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32:  65504/    0xffe0 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32:  65505/    0xffe1 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32:  65471/    0xffbf (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32:  65472/    0xffc0 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32:  65473/    0xffc1 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32:  65535/    0xffff (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32:  65535/    0xffff (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32:  65535/    0xffff (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting double-precision to half-precision
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00   HALF: 0x7f00  (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01   HALF: 0xfe00  (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02   HALF: 0xfc00  (0 => OK)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09   HALF: 0xc000  (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10   HALF: 0xbc00  (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13   HALF: 0000  (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17   HALF: 0x3ff  (0x18 =>  UNDERFLOW  INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18   HALF: 0x400  (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19   HALF: 0x3c00  (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20   HALF: 0x3c01  (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24   HALF: 0x3c00  (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25   HALF: 0x4000  (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26   HALF: 0x4170  (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27   HALF: 0x4248  (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28   HALF: 0x7bff  (0x10 =>    INEXACT )
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29   HALF: 0x7bff  (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30   HALF: 0x7bff  (0x10 =>    INEXACT )
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39   HALF: 0x7c00  (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40   HALF: 0x7e00  (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41   HALF: 0x7e00  (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42   HALF: 0x7f00  (0x1 =>     INVALID)
Converting double-precision to single-precision
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00 SINGLE: nan / 0x7fe00000  (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01 SINGLE: -nan / 0xffc00000  (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02 SINGLE: -inf / 0xff800000  (0 => OK)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03 SINGLE: -inf / 0xff800000  (0x14 => OVERFLOW   INEXACT )
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04 SINGLE: -inf / 0xff800000  (0x14 => OVERFLOW   INEXACT )
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05 SINGLE: -3.40282346638528859812e+38 / 0xff7fffff  (0 => OK)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06 SINGLE: -3.40282346638528859812e+38 / 0xff7fffff  (0 => OK)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07 SINGLE: -1.11100004769645909791e+31 / 0xf30c3a59  (0x10 =>    INEXACT )
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08 SINGLE: -1.11100003258488635273e+30 / 0xf1605d5b  (0x10 =>    INEXACT )
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09 SINGLE: -2.00000000000000000000e+00 / 0xc0000000  (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10 SINGLE: -1.00000000000000000000e+00 / 0xbf800000  (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11 SINGLE: -0.00000000000000000000e+00 / 0x80000000  (0x18 =>  UNDERFLOW  INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12 SINGLE: -1.17549435082228750797e-38 / 0x80800000  (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14 SINGLE: 1.17549435082228750797e-38 / 0x00800000  (0 => OK)
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15 SINGLE: 2.98023223876953125000e-08 / 0x33000000  (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16 SINGLE: 5.96045985901128005935e-08 / 0x337ffff3  (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17 SINGLE: 6.09755988989491015673e-05 / 0x387fc00d  (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18 SINGLE: 6.10351999057456851006e-05 / 0x38800006  (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20 SINGLE: 1.00097656250000000000e+00 / 0x3f802000  (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26 SINGLE: 2.71828174591064453125e+00 / 0x402df854  (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27 SINGLE: 3.14159274101257324219e+00 / 0x40490fdb  (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31 SINGLE: 1.31007000000000000000e+05 / 0x47ffdf80  (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32 SINGLE: 1.31008000000000000000e+05 / 0x47ffe000  (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33 SINGLE: 1.31009000000000000000e+05 / 0x47ffe080  (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34 SINGLE: 2.14748364800000000000e+09 / 0x4f000000  (0x10 =>    INEXACT )
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35 SINGLE: 3.40282346638528859812e+38 / 0x7f7fffff  (0 => OK)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36 SINGLE: 3.40282346638528859812e+38 / 0x7f7fffff  (0 => OK)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38 SINGLE: inf / 0x7f800000  (0x14 => OVERFLOW   INEXACT )
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39 SINGLE: inf / 0x7f800000  (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40 SINGLE: nan / 0x7fc00000  (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41 SINGLE: nan / 0x7fc00000  (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42 SINGLE: nan / 0x7fe00000  (0x1 =>     INVALID)
Converting double-precision to fixed point 32 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT32:     -7/0xfffffff9 (0x10 =>    INEXACT )
18  INT32:    -14/0xfffffff2 (0x10 =>    INEXACT )
18  INT32:    -58/0xffffffc6 (0x10 =>    INEXACT )
18  INT32:   -936/0xfffffc58 (0x10 =>    INEXACT )
18  INT32: -239739/0xfffc5785 (0x10 =>    INEXACT )
18  INT32: -239739/0xfffc5785 (0x10 =>    INEXACT )
18  INT32: -2147483648/0x80000000 (0x11 =>    INEXACT INVALID)
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:    -66/0xffffffbe (0x10 =>    INEXACT )
23  INT32:    -66/0xffffffbe (0x10 =>    INEXACT )
23  INT32: -4331784/0xffbde6f8 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
Converting double-precision to fixed point 64 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
09  INT64:                   -8/0x00fffffffffffffff8 (0 => OK)
09  INT64:                  -32/0x00ffffffffffffffe0 (0 => OK)
09  INT64:                 -512/0x00fffffffffffffe00 (0 => OK)
09  INT64:              -131072/0x00fffffffffffe0000 (0 => OK)
09  INT64:          -8589934592/0x00fffffffe00000000 (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
10  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
10  INT64:                  -16/0x00fffffffffffffff0 (0 => OK)
10  INT64:                 -256/0x00ffffffffffffff00 (0 => OK)
10  INT64:               -65536/0x00ffffffffffff0000 (0 => OK)
10  INT64:          -4294967296/0x00ffffffff00000000 (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                  128/0x000000000000000080 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                  255/0x0000000000000000ff (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    3/0x000000000000000003 (0x10 =>    INEXACT )
17  INT64:               261888/0x00000000000003ff00 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    4/0x000000000000000004 (0x10 =>    INEXACT )
18  INT64:               262144/0x000000000000040000 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT64:                    2/0x000000000000000002 (0 => OK)
19  INT64:                    4/0x000000000000000004 (0 => OK)
19  INT64:                   16/0x000000000000000010 (0 => OK)
19  INT64:                  256/0x000000000000000100 (0 => OK)
19  INT64:                65536/0x000000000000010000 (0 => OK)
19  INT64:           4294967296/0x000000000100000000 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT64:                    2/0x000000000000000002 (0x10 =>    INEXACT )
20  INT64:                    4/0x000000000000000004 (0x10 =>    INEXACT )
20  INT64:                   16/0x000000000000000010 (0x10 =>    INEXACT )
20  INT64:                  256/0x000000000000000100 (0x10 =>    INEXACT )
20  INT64:                65600/0x000000000000010040 (0x10 =>    INEXACT )
20  INT64:           4299161600/0x000000000100400000 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT64:                    2/0x000000000000000002 (0 => OK)
24  INT64:                    4/0x000000000000000004 (0 => OK)
24  INT64:                   16/0x000000000000000010 (0 => OK)
24  INT64:                  256/0x000000000000000100 (0 => OK)
24  INT64:                65536/0x000000000000010000 (0 => OK)
24  INT64:           4294967296/0x000000000100000000 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT64:                    4/0x000000000000000004 (0 => OK)
25  INT64:                    8/0x000000000000000008 (0 => OK)
25  INT64:                   32/0x000000000000000020 (0 => OK)
25  INT64:                  512/0x000000000000000200 (0 => OK)
25  INT64:               131072/0x000000000000020000 (0 => OK)
25  INT64:           8589934592/0x000000000200000000 (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT64:                    5/0x000000000000000005 (0x10 =>    INEXACT )
26  INT64:                   10/0x00000000000000000a (0x10 =>    INEXACT )
26  INT64:                   43/0x00000000000000002b (0x10 =>    INEXACT )
26  INT64:                  695/0x0000000000000002b7 (0x10 =>    INEXACT )
26  INT64:               178145/0x00000000000002b7e1 (0x10 =>    INEXACT )
26  INT64:          11674931554/0x0000000002b7e15162 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT64:                    6/0x000000000000000006 (0x10 =>    INEXACT )
27  INT64:                   12/0x00000000000000000c (0x10 =>    INEXACT )
27  INT64:                   50/0x000000000000000032 (0x10 =>    INEXACT )
27  INT64:                  804/0x000000000000000324 (0x10 =>    INEXACT )
27  INT64:               205887/0x00000000000003243f (0x10 =>    INEXACT )
27  INT64:          13493037704/0x0000000003243f6a88 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT64:               131006/0x00000000000001ffbe (0 => OK)
28  INT64:               262012/0x00000000000003ff7c (0 => OK)
28  INT64:              1048048/0x0000000000000ffdf0 (0 => OK)
28  INT64:             16768768/0x000000000000ffdf00 (0 => OK)
28  INT64:           4292804608/0x0000000000ffdf0000 (0 => OK)
28  INT64:      281333242789888/0x000000ffdf00000000 (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT64:               131008/0x00000000000001ffc0 (0 => OK)
29  INT64:               262016/0x00000000000003ff80 (0 => OK)
29  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
29  INT64:             16769024/0x000000000000ffe000 (0 => OK)
29  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
29  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT64:               131010/0x00000000000001ffc2 (0 => OK)
30  INT64:               262020/0x00000000000003ff84 (0 => OK)
30  INT64:              1048080/0x0000000000000ffe10 (0 => OK)
30  INT64:             16769280/0x000000000000ffe100 (0 => OK)
30  INT64:           4292935680/0x0000000000ffe10000 (0 => OK)
30  INT64:      281341832724480/0x000000ffe100000000 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT64:               262014/0x00000000000003ff7e (0 => OK)
31  INT64:               524028/0x00000000000007fefc (0 => OK)
31  INT64:              2096112/0x0000000000001ffbf0 (0 => OK)
31  INT64:             33537792/0x000000000001ffbf00 (0 => OK)
31  INT64:           8585674752/0x0000000001ffbf0000 (0 => OK)
31  INT64:      562670780547072/0x000001ffbf00000000 (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT64:               262016/0x00000000000003ff80 (0 => OK)
32  INT64:               524032/0x00000000000007ff00 (0 => OK)
32  INT64:              2096128/0x0000000000001ffc00 (0 => OK)
32  INT64:             33538048/0x000000000001ffc000 (0 => OK)
32  INT64:           8585740288/0x0000000001ffc00000 (0 => OK)
32  INT64:      562675075514368/0x000001ffc000000000 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT64:               262018/0x00000000000003ff82 (0 => OK)
33  INT64:               524036/0x00000000000007ff04 (0 => OK)
33  INT64:              2096144/0x0000000000001ffc10 (0 => OK)
33  INT64:             33538304/0x000000000001ffc100 (0 => OK)
33  INT64:           8585805824/0x0000000001ffc10000 (0 => OK)
33  INT64:      562679370481664/0x000001ffc100000000 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT64:           4294967294/0x0000000000fffffffe (0 => OK)
34  INT64:           8589934588/0x0000000001fffffffc (0 => OK)
34  INT64:          34359738352/0x0000000007fffffff0 (0 => OK)
34  INT64:         549755813632/0x000000007fffffff00 (0 => OK)
34  INT64:      140737488289792/0x0000007fffffff0000 (0 => OK)
34  INT64:  9223372032559808512/0x007fffffff00000000 (0 => OK)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting double-precision to 32 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT32:     -2/0xfffffffe (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT32:     -1/0xffffffff (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12  INT32:      0/         0 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14  INT32:      0/         0 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT32:      0/         0 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT32:      0/         0 (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT32:      0/         0 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT32:      0/         0 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT32:      1/       0x1 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT32:      1/       0x1 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT32:      0/         0 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT32:      0/         0 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT32:      0/         0 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT32:      1/       0x1 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT32:      2/       0x2 (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT32:      2/       0x2 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT32:      3/       0x3 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT32:  65503/    0xffdf (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT32:  65504/    0xffe0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT32:  65505/    0xffe1 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT32: 131007/   0x1ffbf (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT32: 131008/   0x1ffc0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT32: 131009/   0x1ffc1 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT32: 2147483647/0x7fffffff (0 => OK)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37  INT32:      0/         0 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT32:      0/         0 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT32:      0/         0 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT32:      0/         0 (0x1 =>     INVALID)
Converting double-precision to 64 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT64:                    1/0x000000000000000001 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT64:                    1/0x000000000000000001 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT64:                    1/0x000000000000000001 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT64:                    2/0x000000000000000002 (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT64:                    2/0x000000000000000002 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT64:                    3/0x000000000000000003 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT64:                65503/0x00000000000000ffdf (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT64:                65504/0x00000000000000ffe0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT64:                65505/0x00000000000000ffe1 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT64:               131007/0x00000000000001ffbf (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT64:               131008/0x00000000000001ffc0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT64:               131009/0x00000000000001ffc1 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT64:           2147483647/0x00000000007fffffff (0 => OK)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to double-precision
00   HALF: 0xffff  (0 => OK)
00 DOUBLE: -nan / 0x00fffffc0000000000 (0 => OK)
01   HALF: 0xfcff  (0 => OK)
01 DOUBLE: -nan / 0x00fffbfc0000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02 DOUBLE: -nan / 0x00fff8040000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
04   HALF: 0xfbff  (0 => OK)
04 DOUBLE: -6.55040000000000000000e+04 / 0x00c0effc0000000000 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05 DOUBLE: -6.54720000000000000000e+04 / 0x00c0eff80000000000 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
08   HALF: 0x8001  (0 => OK)
08 DOUBLE: -5.96046447753906250000e-08 / 0x00be70000000000000 (0 => OK)
09   HALF: 0x8000  (0 => OK)
09 DOUBLE: -0.00000000000000000000e+00 / 0x008000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11 DOUBLE: 5.96046447753906250000e-08 / 0x003e70000000000000 (0 => OK)
12   HALF: 0x3c00  (0 => OK)
12 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13 DOUBLE: 6.54720000000000000000e+04 / 0x0040eff80000000000 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
16   HALF: 0x7c01  (0 => OK)
16 DOUBLE: nan / 0x007ff8040000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17 DOUBLE: nan / 0x007ffbfc0000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18 DOUBLE: nan / 0x007ffffc0000000000 (0 => OK)
Converting half-precision to single-precision
00   HALF: 0xffff  (0 => OK)
00 SINGLE: -nan / 0xffffe000  (0 => OK)
01   HALF: 0xfcff  (0 => OK)
01 SINGLE: -nan / 0xffdfe000  (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02 SINGLE: -nan / 0xffc02000  (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03 SINGLE: -inf / 0xff800000  (0 => OK)
04   HALF: 0xfbff  (0 => OK)
04 SINGLE: -6.55040000000000000000e+04 / 0xc77fe000  (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05 SINGLE: -6.54720000000000000000e+04 / 0xc77fc000  (0 => OK)
06   HALF: 0xc000  (0 => OK)
06 SINGLE: -2.00000000000000000000e+00 / 0xc0000000  (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07 SINGLE: -1.00000000000000000000e+00 / 0xbf800000  (0 => OK)
08   HALF: 0x8001  (0 => OK)
08 SINGLE: -5.96046447753906250000e-08 / 0xb3800000  (0 => OK)
09   HALF: 0x8000  (0 => OK)
09 SINGLE: -0.00000000000000000000e+00 / 0x80000000  (0 => OK)
10   HALF: 0000  (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11   HALF: 0x01  (0 => OK)
11 SINGLE: 5.96046447753906250000e-08 / 0x33800000  (0 => OK)
12   HALF: 0x3c00  (0 => OK)
12 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15 SINGLE: inf / 0x7f800000  (0 => OK)
16   HALF: 0x7c01  (0 => OK)
16 SINGLE: nan / 0x7fc02000  (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17 SINGLE: nan / 0x7fdfe000  (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18 SINGLE: nan / 0x7fffe000  (0 => OK)
Converting half-precision to fixed point 64 bit int
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:              -131008/0x00fffffffffffe0040 (0 => OK)
04  INT64:              -262016/0x00fffffffffffc0080 (0 => OK)
04  INT64:             -1048064/0x00fffffffffff00200 (0 => OK)
04  INT64:            -16769024/0x00ffffffffff002000 (0 => OK)
04  INT64:          -4292870144/0x00ffffffff00200000 (0 => OK)
04  INT64:     -281337537757184/0x00ffff002000000000 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:              -130944/0x00fffffffffffe0080 (0 => OK)
05  INT64:              -261888/0x00fffffffffffc0100 (0 => OK)
05  INT64:             -1047552/0x00fffffffffff00400 (0 => OK)
05  INT64:            -16760832/0x00ffffffffff004000 (0 => OK)
05  INT64:          -4290772992/0x00ffffffff00400000 (0 => OK)
05  INT64:     -281200098803712/0x00ffff004000000000 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
06  INT64:                   -8/0x00fffffffffffffff8 (0 => OK)
06  INT64:                  -32/0x00ffffffffffffffe0 (0 => OK)
06  INT64:                 -512/0x00fffffffffffffe00 (0 => OK)
06  INT64:              -131072/0x00fffffffffffe0000 (0 => OK)
06  INT64:          -8589934592/0x00fffffffe00000000 (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
07  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
07  INT64:                  -16/0x00fffffffffffffff0 (0 => OK)
07  INT64:                 -256/0x00ffffffffffffff00 (0 => OK)
07  INT64:               -65536/0x00ffffffffffff0000 (0 => OK)
07  INT64:          -4294967296/0x00ffffffff00000000 (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                 -256/0x00ffffffffffffff00 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                  256/0x000000000000000100 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    2/0x000000000000000002 (0 => OK)
12  INT64:                    4/0x000000000000000004 (0 => OK)
12  INT64:                   16/0x000000000000000010 (0 => OK)
12  INT64:                  256/0x000000000000000100 (0 => OK)
12  INT64:                65536/0x000000000000010000 (0 => OK)
12  INT64:           4294967296/0x000000000100000000 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:               130944/0x00000000000001ff80 (0 => OK)
13  INT64:               261888/0x00000000000003ff00 (0 => OK)
13  INT64:              1047552/0x0000000000000ffc00 (0 => OK)
13  INT64:             16760832/0x000000000000ffc000 (0 => OK)
13  INT64:           4290772992/0x0000000000ffc00000 (0 => OK)
13  INT64:      281200098803712/0x000000ffc000000000 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:               131008/0x00000000000001ffc0 (0 => OK)
14  INT64:               262016/0x00000000000003ff80 (0 => OK)
14  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
14  INT64:             16769024/0x000000000000ffe000 (0 => OK)
14  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
14  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to fixed point 32 bit int
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT32:     -4/0xfffffffc (0x10 =>    INEXACT )
06  INT32:     -8/0xfffffff8 (0x10 =>    INEXACT )
06  INT32:    -32/0xffffffe0 (0x10 =>    INEXACT )
06  INT32:   -515/0xfffffdfd (0x10 =>    INEXACT )
06  INT32: -131840/0xfffdfd00 (0x10 =>    INEXACT )
06  INT32: -131840/0xfffdfd00 (0x10 =>    INEXACT )
06  INT32: -2147483648/0x80000000 (0x11 =>    INEXACT INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:     -2/0xfffffffe (0x10 =>    INEXACT )
07  INT32:   -514/0xfffffdfe (0x10 =>    INEXACT )
07  INT32:   -514/0xfffffdfe (0x10 =>    INEXACT )
07  INT32: -33746944/0xfdfd1000 (0x10 =>    INEXACT )
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      2/       0x2 (0x10 =>    INEXACT )
12  INT32:    512/     0x200 (0x10 =>    INEXACT )
12  INT32:    512/     0x200 (0x10 =>    INEXACT )
12  INT32: 33615872/ 0x200f000 (0x10 =>    INEXACT )
13   HALF: 0x7bfe  (0 => OK)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14   HALF: 0x7bff  (0 => OK)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15   HALF: 0x7c00  (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 64 bit int
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:               -65504/0x00ffffffffffff0020 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:               -65472/0x00ffffffffffff0040 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    1/0x000000000000000001 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:                65472/0x00000000000000ffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:                65504/0x00000000000000ffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to 32 bit int
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32:      0/         0 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32: -65504/0xffff0020 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT32: -65472/0xffff0040 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT32:     -2/0xfffffffe (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT32:     -1/0xffffffff (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      1/       0x1 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT32:  65472/    0xffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT32:  65504/    0xffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32:      0/         0 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32:      0/         0 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 64 bit uint
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    1/0x000000000000000001 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:                65472/0x00000000000000ffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:                65504/0x00000000000000ffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:                   -1/0x00ffffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to 32 bit uint
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32:      0/         0 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32:      0/         0 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32:      0/         0 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT32:      0/         0 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT32:      0/         0 (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT32:      0/         0 (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      1/       0x1 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT32:  65472/    0xffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT32:  65504/    0xffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT32:     -1/0xffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32:      0/         0 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32:      0/         0 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 16 bit uint
00   HALF: 0xffff  (0 => OK)
00   HALF: 0000  (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01   HALF: 0000  (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02   HALF: 0000  (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03   HALF: 0000  (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04   HALF: 0000  (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05   HALF: 0000  (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06   HALF: 0000  (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07   HALF: 0000  (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08   HALF: 0000  (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09   HALF: 0000  (0 => OK)
10   HALF: 0000  (0 => OK)
10   HALF: 0000  (0 => OK)
11   HALF: 0x01  (0 => OK)
11   HALF: 0000  (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12   HALF: 0x01  (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13   HALF: 0xffc0  (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14   HALF: 0xffe0  (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15   HALF: 0xffff  (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16   HALF: 0000  (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17   HALF: 0000  (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18   HALF: 0000  (0x1 =>     INVALID)
Converting signed int32 to half-precision
00  INT32:      0/         0 (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT32:      1/       0x1 (0 => OK)
01   HALF: 0x3c00  (0 => OK)
02  INT32:     16/      0x10 (0 => OK)
02   HALF: 0x4c00  (0 => OK)
03  INT32:    256/     0x100 (0 => OK)
03   HALF: 0x5c00  (0 => OK)
04  INT32:   4096/    0x1000 (0 => OK)
04   HALF: 0x6c00  (0 => OK)
05  INT32:  65503/    0xffdf (0 => OK)
05   HALF: 0x7bff  (0x10 =>    INEXACT )
06  INT32:  65504/    0xffe0 (0 => OK)
06   HALF: 0x7bff  (0 => OK)
07  INT32:  65505/    0xffe1 (0 => OK)
07   HALF: 0x7bff  (0x10 =>    INEXACT )
08  INT32:  65535/    0xffff (0 => OK)
08   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
09  INT32:  65536/   0x10000 (0 => OK)
09   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10  INT32: 1048576/  0x100000 (0 => OK)
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11  INT32: 16777215/  0xffffff (0 => OK)
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12  INT32: 16777216/ 0x1000000 (0 => OK)
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13  INT32: 16777217/ 0x1000001 (0 => OK)
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14  INT32: 268435456/0x10000000 (0 => OK)
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15  INT32: 536870912/0x20000000 (0 => OK)
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16  INT32: 1073741824/0x40000000 (0 => OK)
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
17  INT32: -2147483648/0x80000000 (0 => OK)
17   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
18  INT32: -2147483647/0x80000001 (0 => OK)
18   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
19  INT32: -2147483617/0x8000001f (0 => OK)
19   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
20  INT32: -2147483585/0x8000003f (0 => OK)
20   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
21  INT32: -2147483521/0x8000007f (0 => OK)
21   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
22  INT32: -2147483393/0x800000ff (0 => OK)
22   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
23  INT32: -2147483137/0x800001ff (0 => OK)
23   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
24  INT32: -2147482849/0x8000031f (0 => OK)
24   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25  INT32: -2147481601/0x800007ff (0 => OK)
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26  INT32: -2147479553/0x80000fff (0 => OK)
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27  INT32: -2147418113/0x8000ffff (0 => OK)
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28  INT32: -2146435073/0x800fffff (0 => OK)
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29  INT32: -2130706433/0x80ffffff (0 => OK)
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30  INT32: -1879048193/0x8fffffff (0 => OK)
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31  INT32: -1610612737/0x9fffffff (0 => OK)
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32  INT32: -1342177281/0xafffffff (0 => OK)
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33  INT32: -1073741825/0xbfffffff (0 => OK)
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34  INT32: -805306369/0xcfffffff (0 => OK)
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35  INT32: -536870913/0xdfffffff (0 => OK)
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36  INT32: -268435457/0xefffffff (0 => OK)
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37  INT32:     -1/0xffffffff (0 => OK)
37   HALF: 0xbc00  (0 => OK)
38  INT32:     -2/0xfffffffe (0 => OK)
38   HALF: 0xc000  (0 => OK)
39  INT32:     -3/0xfffffffd (0 => OK)
39   HALF: 0xc200  (0 => OK)
40  INT32:     -4/0xfffffffc (0 => OK)
40   HALF: 0xc400  (0 => OK)
41  INT32:     -8/0xfffffff8 (0 => OK)
41   HALF: 0xc800  (0 => OK)
42  INT32:    -16/0xfffffff0 (0 => OK)
42   HALF: 0xcc00  (0 => OK)
43  INT32:    -32/0xffffffe0 (0 => OK)
43   HALF: 0xd000  (0 => OK)
44  INT32:    -48/0xffffffd0 (0 => OK)
44   HALF: 0xd200  (0 => OK)
45  INT32:    -64/0xffffffc0 (0 => OK)
45   HALF: 0xd400  (0 => OK)
46  INT32:   -128/0xffffff80 (0 => OK)
46   HALF: 0xd800  (0 => OK)
47  INT32:   -512/0xfffffe00 (0 => OK)
47   HALF: 0xe000  (0 => OK)
48  INT32:   -768/0xfffffd00 (0 => OK)
48   HALF: 0xe200  (0 => OK)
49  INT32:  -1024/0xfffffc00 (0 => OK)
49   HALF: 0xe400  (0 => OK)
50  INT32:  -2048/0xfffff800 (0 => OK)
50   HALF: 0xe800  (0 => OK)
51  INT32:  -4096/0xfffff000 (0 => OK)
51   HALF: 0xec00  (0 => OK)
52  INT32:  -8192/0xffffe000 (0 => OK)
52   HALF: 0xf000  (0 => OK)
53  INT32: -12288/0xffffd000 (0 => OK)
53   HALF: 0xf200  (0 => OK)
54  INT32: -16384/0xffffc000 (0 => OK)
54   HALF: 0xf400  (0 => OK)
55  INT32: -32768/0xffff8000 (0 => OK)
55   HALF: 0xf800  (0 => OK)
56  INT32: -524288/0xfff80000 (0 => OK)
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57  INT32: -8388608/0xff800000 (0 => OK)
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58  INT32: -16777216/0xff000000 (0 => OK)
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
59  INT32: -33554432/0xfe000000 (0 => OK)
59   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
60  INT32: -50331648/0xfd000000 (0 => OK)
60   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
61  INT32: -67108864/0xfc000000 (0 => OK)
61   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
62  INT32: -134217728/0xf8000000 (0 => OK)
62   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
63  INT32: -268435456/0xf0000000 (0 => OK)
63   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
64  INT32: -536870912/0xe0000000 (0 => OK)
64   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
65  INT32: -805306368/0xd0000000 (0 => OK)
65   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
66  INT32: -1073741824/0xc0000000 (0 => OK)
66   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
67  INT32: -2147483648/0x80000000 (0 => OK)
67   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
Converting fixed point int32 to half-precision
00  INT32:      0/         0 (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT32:      1/       0x1 (0 => OK)
01   HALF: 0x3800  (0 => OK)
01   HALF: 0x3400  (0 => OK)
01   HALF: 0x2c00  (0 => OK)
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02  INT32:     16/      0x10 (0 => OK)
02   HALF: 0x4800  (0 => OK)
02   HALF: 0x4400  (0 => OK)
02   HALF: 0x3c00  (0 => OK)
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03  INT32:    256/     0x100 (0 => OK)
03   HALF: 0x5800  (0 => OK)
03   HALF: 0x5400  (0 => OK)
03   HALF: 0x4c00  (0 => OK)
03   HALF: 0x01  (0 => OK)
04  INT32:   4096/    0x1000 (0 => OK)
04   HALF: 0x6800  (0 => OK)
04   HALF: 0x6400  (0 => OK)
04   HALF: 0x5c00  (0 => OK)
04   HALF: 0x10  (0 => OK)
05  INT32:  65503/    0xffdf (0 => OK)
05   HALF: 0x77ff  (0x10 =>    INEXACT )
05   HALF: 0x73ff  (0x10 =>    INEXACT )
05   HALF: 0x6bff  (0x10 =>    INEXACT )
05   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
06  INT32:  65504/    0xffe0 (0 => OK)
06   HALF: 0x77ff  (0 => OK)
06   HALF: 0x73ff  (0 => OK)
06   HALF: 0x6bff  (0 => OK)
06   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
07  INT32:  65505/    0xffe1 (0 => OK)
07   HALF: 0x77ff  (0x10 =>    INEXACT )
07   HALF: 0x73ff  (0x10 =>    INEXACT )
07   HALF: 0x6bff  (0x10 =>    INEXACT )
07   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
08  INT32:  65535/    0xffff (0 => OK)
08   HALF: 0x7800  (0x10 =>    INEXACT )
08   HALF: 0x7400  (0x10 =>    INEXACT )
08   HALF: 0x6c00  (0x10 =>    INEXACT )
08   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
09  INT32:  65536/   0x10000 (0 => OK)
09   HALF: 0x7800  (0 => OK)
09   HALF: 0x7400  (0 => OK)
09   HALF: 0x6c00  (0 => OK)
09   HALF: 0x100  (0 => OK)
10  INT32: 1048576/  0x100000 (0 => OK)
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0xc00  (0x14 => OVERFLOW   INEXACT )
11  INT32: 16777215/  0xffffff (0 => OK)
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
12  INT32: 16777216/ 0x1000000 (0 => OK)
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
13  INT32: 16777217/ 0x1000001 (0 => OK)
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
14  INT32: 268435456/0x10000000 (0 => OK)
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
15  INT32: 536870912/0x20000000 (0 => OK)
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
16  INT32: 1073741824/0x40000000 (0 => OK)
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
17  INT32: -2147483648/0x80000000 (0 => OK)
17   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
18  INT32: -2147483647/0x80000001 (0 => OK)
18   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
19  INT32: -2147483617/0x8000001f (0 => OK)
19   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
20  INT32: -2147483585/0x8000003f (0 => OK)
20   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
21  INT32: -2147483521/0x8000007f (0 => OK)
21   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
22  INT32: -2147483393/0x800000ff (0 => OK)
22   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
23  INT32: -2147483137/0x800001ff (0 => OK)
23   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
24  INT32: -2147482849/0x8000031f (0 => OK)
24   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
25  INT32: -2147481601/0x800007ff (0 => OK)
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
26  INT32: -2147479553/0x80000fff (0 => OK)
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
27  INT32: -2147418113/0x8000ffff (0 => OK)
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
28  INT32: -2146435073/0x800fffff (0 => OK)
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
29  INT32: -2130706433/0x80ffffff (0 => OK)
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xb7f0  (0x14 => OVERFLOW   INEXACT )
30  INT32: -1879048193/0x8fffffff (0 => OK)
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xb700  (0x14 => OVERFLOW   INEXACT )
31  INT32: -1610612737/0x9fffffff (0 => OK)
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xb600  (0x14 => OVERFLOW   INEXACT )
32  INT32: -1342177281/0xafffffff (0 => OK)
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xb500  (0x14 => OVERFLOW   INEXACT )
33  INT32: -1073741825/0xbfffffff (0 => OK)
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xb400  (0x14 => OVERFLOW   INEXACT )
34  INT32: -805306369/0xcfffffff (0 => OK)
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xb200  (0x14 => OVERFLOW   INEXACT )
35  INT32: -536870913/0xdfffffff (0 => OK)
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xb000  (0x14 => OVERFLOW   INEXACT )
36  INT32: -268435457/0xefffffff (0 => OK)
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xac00  (0x14 => OVERFLOW   INEXACT )
37  INT32:     -1/0xffffffff (0 => OK)
37   HALF: 0xb800  (0 => OK)
37   HALF: 0xb400  (0 => OK)
37   HALF: 0xac00  (0 => OK)
37   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
38  INT32:     -2/0xfffffffe (0 => OK)
38   HALF: 0xbc00  (0 => OK)
38   HALF: 0xb800  (0 => OK)
38   HALF: 0xb000  (0 => OK)
38   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
39  INT32:     -3/0xfffffffd (0 => OK)
39   HALF: 0xbe00  (0 => OK)
39   HALF: 0xba00  (0 => OK)
39   HALF: 0xb200  (0 => OK)
39   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
40  INT32:     -4/0xfffffffc (0 => OK)
40   HALF: 0xc000  (0 => OK)
40   HALF: 0xbc00  (0 => OK)
40   HALF: 0xb400  (0 => OK)
40   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
41  INT32:     -8/0xfffffff8 (0 => OK)
41   HALF: 0xc400  (0 => OK)
41   HALF: 0xc000  (0 => OK)
41   HALF: 0xb800  (0 => OK)
41   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
42  INT32:    -16/0xfffffff0 (0 => OK)
42   HALF: 0xc800  (0 => OK)
42   HALF: 0xc400  (0 => OK)
42   HALF: 0xbc00  (0 => OK)
42   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
43  INT32:    -32/0xffffffe0 (0 => OK)
43   HALF: 0xcc00  (0 => OK)
43   HALF: 0xc800  (0 => OK)
43   HALF: 0xc000  (0 => OK)
43   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
44  INT32:    -48/0xffffffd0 (0 => OK)
44   HALF: 0xce00  (0 => OK)
44   HALF: 0xca00  (0 => OK)
44   HALF: 0xc200  (0 => OK)
44   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
45  INT32:    -64/0xffffffc0 (0 => OK)
45   HALF: 0xd000  (0 => OK)
45   HALF: 0xcc00  (0 => OK)
45   HALF: 0xc400  (0 => OK)
45   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
46  INT32:   -128/0xffffff80 (0 => OK)
46   HALF: 0xd400  (0 => OK)
46   HALF: 0xd000  (0 => OK)
46   HALF: 0xc800  (0 => OK)
46   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
47  INT32:   -512/0xfffffe00 (0 => OK)
47   HALF: 0xdc00  (0 => OK)
47   HALF: 0xd800  (0 => OK)
47   HALF: 0xd000  (0 => OK)
47   HALF: 0x8002  (0 => OK)
48  INT32:   -768/0xfffffd00 (0 => OK)
48   HALF: 0xde00  (0 => OK)
48   HALF: 0xda00  (0 => OK)
48   HALF: 0xd200  (0 => OK)
48   HALF: 0x8003  (0 => OK)
49  INT32:  -1024/0xfffffc00 (0 => OK)
49   HALF: 0xe000  (0 => OK)
49   HALF: 0xdc00  (0 => OK)
49   HALF: 0xd400  (0 => OK)
49   HALF: 0x8004  (0 => OK)
50  INT32:  -2048/0xfffff800 (0 => OK)
50   HALF: 0xe400  (0 => OK)
50   HALF: 0xe000  (0 => OK)
50   HALF: 0xd800  (0 => OK)
50   HALF: 0x8008  (0 => OK)
51  INT32:  -4096/0xfffff000 (0 => OK)
51   HALF: 0xe800  (0 => OK)
51   HALF: 0xe400  (0 => OK)
51   HALF: 0xdc00  (0 => OK)
51   HALF: 0x8010  (0 => OK)
52  INT32:  -8192/0xffffe000 (0 => OK)
52   HALF: 0xec00  (0 => OK)
52   HALF: 0xe800  (0 => OK)
52   HALF: 0xe000  (0 => OK)
52   HALF: 0x8020  (0 => OK)
53  INT32: -12288/0xffffd000 (0 => OK)
53   HALF: 0xee00  (0 => OK)
53   HALF: 0xea00  (0 => OK)
53   HALF: 0xe200  (0 => OK)
53   HALF: 0x8030  (0 => OK)
54  INT32: -16384/0xffffc000 (0 => OK)
54   HALF: 0xf000  (0 => OK)
54   HALF: 0xec00  (0 => OK)
54   HALF: 0xe400  (0 => OK)
54   HALF: 0x8040  (0 => OK)
55  INT32: -32768/0xffff8000 (0 => OK)
55   HALF: 0xf400  (0 => OK)
55   HALF: 0xf000  (0 => OK)
55   HALF: 0xe800  (0 => OK)
55   HALF: 0x8080  (0 => OK)
56  INT32: -524288/0xfff80000 (0 => OK)
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xf800  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0x8800  (0x14 => OVERFLOW   INEXACT )
57  INT32: -8388608/0xff800000 (0 => OK)
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0x9800  (0x14 => OVERFLOW   INEXACT )
58  INT32: -16777216/0xff000000 (0 => OK)
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0x9c00  (0x14 => OVERFLOW   INEXACT )
59  INT32: -33554432/0xfe000000 (0 => OK)
59   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xa000  (0x14 => OVERFLOW   INEXACT )
60  INT32: -50331648/0xfd000000 (0 => OK)
60   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xa200  (0x14 => OVERFLOW   INEXACT )
61  INT32: -67108864/0xfc000000 (0 => OK)
61   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xa400  (0x14 => OVERFLOW   INEXACT )
62  INT32: -134217728/0xf8000000 (0 => OK)
62   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xa800  (0x14 => OVERFLOW   INEXACT )
63  INT32: -268435456/0xf0000000 (0 => OK)
63   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xac00  (0x14 => OVERFLOW   INEXACT )
64  INT32: -536870912/0xe0000000 (0 => OK)
64   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xb000  (0x14 => OVERFLOW   INEXACT )
65  INT32: -805306368/0xd0000000 (0 => OK)
65   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xb200  (0x14 => OVERFLOW   INEXACT )
66  INT32: -1073741824/0xc0000000 (0 => OK)
66   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xb400  (0x14 => OVERFLOW   INEXACT )
67  INT32: -2147483648/0x80000000 (0 => OK)
67   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
Converting fixed point int64 to half-precision
00  INT64:                    0/00000000000000000000 (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT64:                    1/0x000000000000000001 (0 => OK)
01   HALF: 0x3800  (0 => OK)
01   HALF: 0x3400  (0 => OK)
01   HALF: 0x2c00  (0 => OK)
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02  INT64:                   16/0x000000000000000010 (0 => OK)
02   HALF: 0x4800  (0 => OK)
02   HALF: 0x4400  (0 => OK)
02   HALF: 0x3c00  (0 => OK)
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03  INT64:                  256/0x000000000000000100 (0 => OK)
03   HALF: 0x5800  (0 => OK)
03   HALF: 0x5400  (0 => OK)
03   HALF: 0x4c00  (0 => OK)
03   HALF: 0x01  (0 => OK)
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04  INT64:                 4096/0x000000000000001000 (0 => OK)
04   HALF: 0x6800  (0 => OK)
04   HALF: 0x6400  (0 => OK)
04   HALF: 0x5c00  (0 => OK)
04   HALF: 0x10  (0 => OK)
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
05  INT64:                65503/0x00000000000000ffdf (0 => OK)
05   HALF: 0x77ff  (0x10 =>    INEXACT )
05   HALF: 0x73ff  (0x10 =>    INEXACT )
05   HALF: 0x6bff  (0x10 =>    INEXACT )
05   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x08  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x04  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x02  (0x18 =>  UNDERFLOW  INEXACT )
06  INT64:                65504/0x00000000000000ffe0 (0 => OK)
06   HALF: 0x77ff  (0 => OK)
06   HALF: 0x73ff  (0 => OK)
06   HALF: 0x6bff  (0 => OK)
06   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x08  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x04  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x02  (0x18 =>  UNDERFLOW  INEXACT )
07  INT64:                65505/0x00000000000000ffe1 (0 => OK)
07   HALF: 0x77ff  (0x10 =>    INEXACT )
07   HALF: 0x73ff  (0x10 =>    INEXACT )
07   HALF: 0x6bff  (0x10 =>    INEXACT )
07   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x08  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x04  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x02  (0x18 =>  UNDERFLOW  INEXACT )
08  INT64:                65535/0x00000000000000ffff (0 => OK)
08   HALF: 0x7800  (0x10 =>    INEXACT )
08   HALF: 0x7400  (0x10 =>    INEXACT )
08   HALF: 0x6c00  (0x10 =>    INEXACT )
08   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x08  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x04  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x02  (0x18 =>  UNDERFLOW  INEXACT )
09  INT64:                65536/0x000000000000010000 (0 => OK)
09   HALF: 0x7800  (0 => OK)
09   HALF: 0x7400  (0 => OK)
09   HALF: 0x6c00  (0 => OK)
09   HALF: 0x100  (0 => OK)
09   HALF: 0x08  (0 => OK)
09   HALF: 0x04  (0 => OK)
09   HALF: 0x02  (0 => OK)
10  INT64:              1048576/0x000000000000100000 (0 => OK)
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0xc00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x80  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x40  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x20  (0x14 => OVERFLOW   INEXACT )
11  INT64:             16777215/0x000000000000ffffff (0 => OK)
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x400  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
11   HALF: 0x200  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
12  INT64:             16777216/0x000000000001000000 (0 => OK)
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x400  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x200  (0x14 => OVERFLOW   INEXACT )
13  INT64:             16777217/0x000000000001000001 (0 => OK)
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x400  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x200  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
14  INT64:            268435456/0x000000000010000000 (0 => OK)
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1400  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1000  (0x14 => OVERFLOW   INEXACT )
15  INT64:            536870912/0x000000000020000000 (0 => OK)
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1400  (0x14 => OVERFLOW   INEXACT )
16  INT64:           1073741824/0x000000000040000000 (0 => OK)
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x2000  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
17  INT64:           2147483648/0x000000000080000000 (0 => OK)
17   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x3800  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x2400  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x2000  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
18  INT64:          34359738368/0x000000000800000000 (0 => OK)
18   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x4800  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
19  INT64:         549755813888/0x000000008000000000 (0 => OK)
19   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x5800  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x4400  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x4000  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x3c00  (0x14 => OVERFLOW   INEXACT )
20  INT64:        8796093022208/0x000000080000000000 (0 => OK)
20   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x6800  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x5400  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x5000  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x4c00  (0x14 => OVERFLOW   INEXACT )
21  INT64:      140737488355328/0x000000800000000000 (0 => OK)
21   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7800  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x6400  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x6000  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x5c00  (0x14 => OVERFLOW   INEXACT )
22  INT64:     2251799813685248/0x000008000000000000 (0 => OK)
22   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7400  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7000  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x6c00  (0x14 => OVERFLOW   INEXACT )
23  INT64:    36028797018963968/0x000080000000000000 (0 => OK)
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24  INT64:   576460752303423488/0x000800000000000000 (0 => OK)
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
25  INT64: -9223372036854775808/0x008000000000000000 (0 => OK)
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26  INT64: -9223372036854775807/0x008000000000000001 (0 => OK)
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27  INT64: -9223372036854775777/0x00800000000000001f (0 => OK)
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28  INT64: -9223372036854775745/0x00800000000000003f (0 => OK)
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29  INT64: -9223372036854775681/0x00800000000000007f (0 => OK)
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30  INT64: -9223372036854775553/0x0080000000000000ff (0 => OK)
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31  INT64: -9223372036854775297/0x0080000000000001ff (0 => OK)
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32  INT64: -9223372036854775009/0x00800000000000031f (0 => OK)
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33  INT64: -9223372036854773761/0x0080000000000007ff (0 => OK)
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34  INT64: -9223372036854771713/0x008000000000000fff (0 => OK)
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35  INT64: -9223372036854710273/0x00800000000000ffff (0 => OK)
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36  INT64: -9223372036853727233/0x0080000000000fffff (0 => OK)
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37  INT64: -9223372036837998593/0x008000000000ffffff (0 => OK)
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38  INT64: -9223372036586340353/0x00800000000fffffff (0 => OK)
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39  INT64: -9223372032559808513/0x0080000000ffffffff (0 => OK)
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40  INT64: -9223371968135299073/0x008000000fffffffff (0 => OK)
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41  INT64: -9223370937343148033/0x00800000ffffffffff (0 => OK)
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42  INT64: -9223354444668731393/0x0080000fffffffffff (0 => OK)
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43  INT64: -9223090561878065153/0x008000ffffffffffff (0 => OK)
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44  INT64: -9218868437227405313/0x00800fffffffffffff (0 => OK)
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45  INT64: -9218868437227405313/0x00800fffffffffffff (0 => OK)
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46  INT64: -9151314442816847873/0x0080ffffffffffffff (0 => OK)
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47  INT64: -9079256848778919937/0x0081ffffffffffffff (0 => OK)
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48  INT64: -8935141660703064065/0x0083ffffffffffffff (0 => OK)
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49  INT64: -8646911284551352321/0x0087ffffffffffffff (0 => OK)
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50  INT64: -8070450532247928833/0x008fffffffffffffff (0 => OK)
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51  INT64: -6917529027641081857/0x009fffffffffffffff (0 => OK)
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52  INT64: -5764607523034234881/0x00afffffffffffffff (0 => OK)
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53  INT64: -4611686018427387905/0x00bfffffffffffffff (0 => OK)
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54  INT64: -3458764513820540929/0x00cfffffffffffffff (0 => OK)
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55  INT64: -2305843009213693953/0x00dfffffffffffffff (0 => OK)
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56  INT64: -1152921504606846977/0x00efffffffffffffff (0 => OK)
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57  INT64: -1152921504606846976/0x00f000000000000000 (0 => OK)
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58  INT64:   -18001204369948673/0x00ffc00bffffffffff (0 => OK)
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xf7ff  (0x14 => OVERFLOW   INEXACT )
59  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
59   HALF: 0xb800  (0 => OK)
59   HALF: 0xb400  (0 => OK)
59   HALF: 0xac00  (0 => OK)
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
### Rounding upwards
Converting single-precision to half-precision
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00   HALF: 0000  (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01   HALF: 0000  (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02   HALF: 0000  (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03   HALF: 0000  (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04   HALF: 0000  (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05   HALF: 0000  (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06   HALF: 0000  (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07   HALF: 0000  (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08   HALF: 0000  (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09   HALF: 0000  (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10   HALF: 0000  (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11   HALF: 0000  (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12   HALF: 0000  (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13   HALF: 0000  (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14   HALF: 0000  (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15   HALF: 0x3c00  (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16   HALF: 0x3c00  (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17   HALF: 0x4000  (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18   HALF: 0x4000  (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19   HALF: 0x4200  (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20   HALF: 0x7bff  (0x10 =>    INEXACT )
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21   HALF: 0x7bff  (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23   HALF: 0x7bfe  (0x10 =>    INEXACT )
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24   HALF: 0x7bfe  (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25   HALF: 0x7bff  (0x10 =>    INEXACT )
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29   HALF: 0000  (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30   HALF: 0000  (0 => OK)
Converting single-precision to double-precision
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19 DOUBLE: 3.00000000000000000000e+00 / 0x004008000000000000 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23 DOUBLE: 6.54710000000000000000e+04 / 0x0040eff7e000000000 (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24 DOUBLE: 6.54720000000000000000e+04 / 0x0040eff80000000000 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25 DOUBLE: 6.54730000000000000000e+04 / 0x0040eff82000000000 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
Converting single-precision to fixed point 32 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      2/       0x2 (0 => OK)
15  INT32:      4/       0x4 (0 => OK)
15  INT32:     16/      0x10 (0 => OK)
15  INT32:    256/     0x100 (0 => OK)
15  INT32:  65536/   0x10000 (0 => OK)
15  INT32:  65536/   0x10000 (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      2/       0x2 (0 => OK)
16  INT32:      4/       0x4 (0 => OK)
16  INT32:     16/      0x10 (0 => OK)
16  INT32:    256/     0x100 (0 => OK)
16  INT32:  65536/   0x10000 (0 => OK)
16  INT32:  65536/   0x10000 (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      4/       0x4 (0 => OK)
17  INT32:      8/       0x8 (0 => OK)
17  INT32:     32/      0x20 (0 => OK)
17  INT32:    512/     0x200 (0 => OK)
17  INT32: 131072/   0x20000 (0 => OK)
17  INT32: 131072/   0x20000 (0 => OK)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      4/       0x4 (0 => OK)
18  INT32:      8/       0x8 (0 => OK)
18  INT32:     32/      0x20 (0 => OK)
18  INT32:    512/     0x200 (0 => OK)
18  INT32: 131072/   0x20000 (0 => OK)
18  INT32: 131072/   0x20000 (0 => OK)
18  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      6/       0x6 (0 => OK)
19  INT32:     12/       0xc (0 => OK)
19  INT32:     48/      0x30 (0 => OK)
19  INT32:    768/     0x300 (0 => OK)
19  INT32: 196608/   0x30000 (0 => OK)
19  INT32: 196608/   0x30000 (0 => OK)
19  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32: 131006/   0x1ffbe (0 => OK)
20  INT32: 262012/   0x3ff7c (0 => OK)
20  INT32: 1048048/   0xffdf0 (0 => OK)
20  INT32: 16768768/  0xffdf00 (0 => OK)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32: 131008/   0x1ffc0 (0 => OK)
21  INT32: 262016/   0x3ff80 (0 => OK)
21  INT32: 1048064/   0xffe00 (0 => OK)
21  INT32: 16769024/  0xffe000 (0 => OK)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32: 131010/   0x1ffc2 (0 => OK)
22  INT32: 262020/   0x3ff84 (0 => OK)
22  INT32: 1048080/   0xffe10 (0 => OK)
22  INT32: 16769280/  0xffe100 (0 => OK)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32: 130942/   0x1ff7e (0 => OK)
23  INT32: 261884/   0x3fefc (0 => OK)
23  INT32: 1047536/   0xffbf0 (0 => OK)
23  INT32: 16760576/  0xffbf00 (0 => OK)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32: 130944/   0x1ff80 (0 => OK)
24  INT32: 261888/   0x3ff00 (0 => OK)
24  INT32: 1047552/   0xffc00 (0 => OK)
24  INT32: 16760832/  0xffc000 (0 => OK)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32: 130946/   0x1ff82 (0 => OK)
25  INT32: 261892/   0x3ff04 (0 => OK)
25  INT32: 1047568/   0xffc10 (0 => OK)
25  INT32: 16761088/  0xffc100 (0 => OK)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32: 131070/   0x1fffe (0 => OK)
26  INT32: 262140/   0x3fffc (0 => OK)
26  INT32: 1048560/   0xffff0 (0 => OK)
26  INT32: 16776960/  0xffff00 (0 => OK)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32: 131070/   0x1fffe (0 => OK)
27  INT32: 262140/   0x3fffc (0 => OK)
27  INT32: 1048560/   0xffff0 (0 => OK)
27  INT32: 16776960/  0xffff00 (0 => OK)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32: 131070/   0x1fffe (0 => OK)
28  INT32: 262140/   0x3fffc (0 => OK)
28  INT32: 1048560/   0xffff0 (0 => OK)
28  INT32: 16776960/  0xffff00 (0 => OK)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting single-precision to fixed point 64 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT64:                    2/0x000000000000000002 (0 => OK)
15  INT64:                    4/0x000000000000000004 (0 => OK)
15  INT64:                   16/0x000000000000000010 (0 => OK)
15  INT64:                  256/0x000000000000000100 (0 => OK)
15  INT64:                65536/0x000000000000010000 (0 => OK)
15  INT64:           4294967296/0x000000000100000000 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT64:                    2/0x000000000000000002 (0 => OK)
16  INT64:                    4/0x000000000000000004 (0 => OK)
16  INT64:                   16/0x000000000000000010 (0 => OK)
16  INT64:                  256/0x000000000000000100 (0 => OK)
16  INT64:                65536/0x000000000000010000 (0 => OK)
16  INT64:           4294967296/0x000000000100000000 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT64:                    4/0x000000000000000004 (0 => OK)
17  INT64:                    8/0x000000000000000008 (0 => OK)
17  INT64:                   32/0x000000000000000020 (0 => OK)
17  INT64:                  512/0x000000000000000200 (0 => OK)
17  INT64:               131072/0x000000000000020000 (0 => OK)
17  INT64:           8589934592/0x000000000200000000 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT64:                    4/0x000000000000000004 (0 => OK)
18  INT64:                    8/0x000000000000000008 (0 => OK)
18  INT64:                   32/0x000000000000000020 (0 => OK)
18  INT64:                  512/0x000000000000000200 (0 => OK)
18  INT64:               131072/0x000000000000020000 (0 => OK)
18  INT64:           8589934592/0x000000000200000000 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT64:                    6/0x000000000000000006 (0 => OK)
19  INT64:                   12/0x00000000000000000c (0 => OK)
19  INT64:                   48/0x000000000000000030 (0 => OK)
19  INT64:                  768/0x000000000000000300 (0 => OK)
19  INT64:               196608/0x000000000000030000 (0 => OK)
19  INT64:          12884901888/0x000000000300000000 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT64:               131006/0x00000000000001ffbe (0 => OK)
20  INT64:               262012/0x00000000000003ff7c (0 => OK)
20  INT64:              1048048/0x0000000000000ffdf0 (0 => OK)
20  INT64:             16768768/0x000000000000ffdf00 (0 => OK)
20  INT64:           4292804608/0x0000000000ffdf0000 (0 => OK)
20  INT64:      281333242789888/0x000000ffdf00000000 (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT64:               131008/0x00000000000001ffc0 (0 => OK)
21  INT64:               262016/0x00000000000003ff80 (0 => OK)
21  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
21  INT64:             16769024/0x000000000000ffe000 (0 => OK)
21  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
21  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT64:               131010/0x00000000000001ffc2 (0 => OK)
22  INT64:               262020/0x00000000000003ff84 (0 => OK)
22  INT64:              1048080/0x0000000000000ffe10 (0 => OK)
22  INT64:             16769280/0x000000000000ffe100 (0 => OK)
22  INT64:           4292935680/0x0000000000ffe10000 (0 => OK)
22  INT64:      281341832724480/0x000000ffe100000000 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT64:               130942/0x00000000000001ff7e (0 => OK)
23  INT64:               261884/0x00000000000003fefc (0 => OK)
23  INT64:              1047536/0x0000000000000ffbf0 (0 => OK)
23  INT64:             16760576/0x000000000000ffbf00 (0 => OK)
23  INT64:           4290707456/0x0000000000ffbf0000 (0 => OK)
23  INT64:      281195803836416/0x000000ffbf00000000 (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT64:               130944/0x00000000000001ff80 (0 => OK)
24  INT64:               261888/0x00000000000003ff00 (0 => OK)
24  INT64:              1047552/0x0000000000000ffc00 (0 => OK)
24  INT64:             16760832/0x000000000000ffc000 (0 => OK)
24  INT64:           4290772992/0x0000000000ffc00000 (0 => OK)
24  INT64:      281200098803712/0x000000ffc000000000 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT64:               130946/0x00000000000001ff82 (0 => OK)
25  INT64:               261892/0x00000000000003ff04 (0 => OK)
25  INT64:              1047568/0x0000000000000ffc10 (0 => OK)
25  INT64:             16761088/0x000000000000ffc100 (0 => OK)
25  INT64:           4290838528/0x0000000000ffc10000 (0 => OK)
25  INT64:      281204393771008/0x000000ffc100000000 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT64:               131070/0x00000000000001fffe (0 => OK)
26  INT64:               262140/0x00000000000003fffc (0 => OK)
26  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
26  INT64:             16776960/0x000000000000ffff00 (0 => OK)
26  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
26  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT64:               131070/0x00000000000001fffe (0 => OK)
27  INT64:               262140/0x00000000000003fffc (0 => OK)
27  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
27  INT64:             16776960/0x000000000000ffff00 (0 => OK)
27  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
27  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT64:               131070/0x00000000000001fffe (0 => OK)
28  INT64:               262140/0x00000000000003fffc (0 => OK)
28  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
28  INT64:             16776960/0x000000000000ffff00 (0 => OK)
28  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
28  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
Converting single-precision to 32 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      1/       0x1 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      1/       0x1 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      2/       0x2 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      2/       0x2 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      3/       0x3 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32:  65503/    0xffdf (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32:  65504/    0xffe0 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32:  65505/    0xffe1 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32:  65471/    0xffbf (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32:  65472/    0xffc0 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32:  65473/    0xffc1 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32:  65535/    0xffff (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32:  65535/    0xffff (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32:  65535/    0xffff (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting single-precision to 64 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      1/       0x1 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      1/       0x1 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      2/       0x2 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      2/       0x2 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      3/       0x3 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32:  65503/    0xffdf (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32:  65504/    0xffe0 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32:  65505/    0xffe1 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32:  65471/    0xffbf (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32:  65472/    0xffc0 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32:  65473/    0xffc1 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32:  65535/    0xffff (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32:  65535/    0xffff (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32:  65535/    0xffff (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting double-precision to half-precision
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00   HALF: 0x7f00  (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01   HALF: 0xfe00  (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02   HALF: 0xfc00  (0 => OK)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09   HALF: 0xc000  (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10   HALF: 0xbc00  (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13   HALF: 0000  (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
16 DOUBLE: 5.96046000000000015662e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17   HALF: 0x400  (0x18 =>  UNDERFLOW  INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18   HALF: 0x401  (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19   HALF: 0x3c00  (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20   HALF: 0x3c01  (0 => OK)
21 DOUBLE: 2.22507385850720138310e-308 / 0x000010000000000000 (0 => OK)
21   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
22 DOUBLE: 1.37899728486072282844e-308 / 0x000009ea82a2287680 (0 => OK)
22   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
23 DOUBLE: 1.49147387366816238764e-308 / 0x00000ab98fba843210 (0 => OK)
23   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24   HALF: 0x3c00  (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25   HALF: 0x4000  (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26   HALF: 0x4170  (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27   HALF: 0x4249  (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28   HALF: 0x7bff  (0x10 =>    INEXACT )
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29   HALF: 0x7bff  (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39   HALF: 0x7c00  (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40   HALF: 0x7e00  (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41   HALF: 0x7e00  (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42   HALF: 0x7f00  (0x1 =>     INVALID)
Converting double-precision to single-precision
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00 SINGLE: nan / 0x7fe00000  (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01 SINGLE: -nan / 0xffc00000  (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02 SINGLE: -inf / 0xff800000  (0 => OK)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03 SINGLE: -3.40282346638528859811e+38 / 0xff7fffff  (0x14 => OVERFLOW   INEXACT )
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04 SINGLE: -3.40282346638528859811e+38 / 0xff7fffff  (0x14 => OVERFLOW   INEXACT )
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05 SINGLE: -3.40282346638528859811e+38 / 0xff7fffff  (0 => OK)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06 SINGLE: -3.40282346638528859811e+38 / 0xff7fffff  (0 => OK)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07 SINGLE: -1.11099992680387713644e+31 / 0xf30c3a58  (0x10 =>    INEXACT )
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08 SINGLE: -1.11099995702702262681e+30 / 0xf1605d5a  (0x10 =>    INEXACT )
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09 SINGLE: -2.00000000000000000000e+00 / 0xc0000000  (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10 SINGLE: -1.00000000000000000000e+00 / 0xbf800000  (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11 SINGLE: -0.00000000000000000000e+00 / 0x80000000  (0x18 =>  UNDERFLOW  INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12 SINGLE: -1.17549435082228750796e-38 / 0x80800000  (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14 SINGLE: 1.17549435082228750797e-38 / 0x00800000  (0 => OK)
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15 SINGLE: 2.98023259404089913006e-08 / 0x33000001  (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015662e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16 SINGLE: 5.96046021428264793940e-08 / 0x337ffff4  (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17 SINGLE: 6.09756025369279086590e-05 / 0x387fc00e  (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18 SINGLE: 6.10352071817032992840e-05 / 0x38800007  (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20 SINGLE: 1.00097656250000000000e+00 / 0x3f802000  (0 => OK)
21 DOUBLE: 2.22507385850720138310e-308 / 0x000010000000000000 (0 => OK)
21 SINGLE: 1.40129846432481707093e-45 / 0x00000001  (0x18 =>  UNDERFLOW  INEXACT )
22 DOUBLE: 1.37899728486072282844e-308 / 0x000009ea82a2287680 (0 => OK)
22 SINGLE: 1.40129846432481707093e-45 / 0x00000001  (0x18 =>  UNDERFLOW  INEXACT )
23 DOUBLE: 1.49147387366816238764e-308 / 0x00000ab98fba843210 (0 => OK)
23 SINGLE: 1.40129846432481707093e-45 / 0x00000001  (0x18 =>  UNDERFLOW  INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26 SINGLE: 2.71828198432922363282e+00 / 0x402df855  (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27 SINGLE: 3.14159274101257324219e+00 / 0x40490fdb  (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31 SINGLE: 1.31007000000000000000e+05 / 0x47ffdf80  (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32 SINGLE: 1.31008000000000000000e+05 / 0x47ffe000  (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33 SINGLE: 1.31009000000000000000e+05 / 0x47ffe080  (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34 SINGLE: 2.14748364800000000000e+09 / 0x4f000000  (0x10 =>    INEXACT )
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35 SINGLE: 3.40282346638528859812e+38 / 0x7f7fffff  (0 => OK)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36 SINGLE: 3.40282346638528859812e+38 / 0x7f7fffff  (0 => OK)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37 SINGLE: 1.40129846432481707093e-45 / 0x00000001  (0x18 =>  UNDERFLOW  INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38 SINGLE: inf / 0x7f800000  (0x14 => OVERFLOW   INEXACT )
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39 SINGLE: inf / 0x7f800000  (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40 SINGLE: nan / 0x7fc00000  (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41 SINGLE: nan / 0x7fc00000  (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42 SINGLE: nan / 0x7fe00000  (0x1 =>     INVALID)
Converting double-precision to fixed point 32 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015662e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT32:     -7/0xfffffff9 (0x10 =>    INEXACT )
18  INT32:    -14/0xfffffff2 (0x10 =>    INEXACT )
18  INT32:    -58/0xffffffc6 (0x10 =>    INEXACT )
18  INT32:   -936/0xfffffc58 (0x10 =>    INEXACT )
18  INT32: -239739/0xfffc5785 (0x10 =>    INEXACT )
18  INT32: -239739/0xfffc5785 (0x10 =>    INEXACT )
18  INT32: -2147483648/0x80000000 (0x11 =>    INEXACT INVALID)
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
21 DOUBLE: 2.22507385850720138310e-308 / 0x000010000000000000 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
22 DOUBLE: 1.37899728486072282844e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238764e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:    -66/0xffffffbe (0x10 =>    INEXACT )
23  INT32:    -66/0xffffffbe (0x10 =>    INEXACT )
23  INT32: -4331784/0xffbde6f8 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
Converting double-precision to fixed point 64 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
09  INT64:                   -8/0x00fffffffffffffff8 (0 => OK)
09  INT64:                  -32/0x00ffffffffffffffe0 (0 => OK)
09  INT64:                 -512/0x00fffffffffffffe00 (0 => OK)
09  INT64:              -131072/0x00fffffffffffe0000 (0 => OK)
09  INT64:          -8589934592/0x00fffffffe00000000 (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
10  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
10  INT64:                  -16/0x00fffffffffffffff0 (0 => OK)
10  INT64:                 -256/0x00ffffffffffffff00 (0 => OK)
10  INT64:               -65536/0x00ffffffffffff0000 (0 => OK)
10  INT64:          -4294967296/0x00ffffffff00000000 (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                  128/0x000000000000000080 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015662e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                  255/0x0000000000000000ff (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    3/0x000000000000000003 (0x10 =>    INEXACT )
17  INT64:               261888/0x00000000000003ff00 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    4/0x000000000000000004 (0x10 =>    INEXACT )
18  INT64:               262144/0x000000000000040000 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT64:                    2/0x000000000000000002 (0 => OK)
19  INT64:                    4/0x000000000000000004 (0 => OK)
19  INT64:                   16/0x000000000000000010 (0 => OK)
19  INT64:                  256/0x000000000000000100 (0 => OK)
19  INT64:                65536/0x000000000000010000 (0 => OK)
19  INT64:           4294967296/0x000000000100000000 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT64:                    2/0x000000000000000002 (0x10 =>    INEXACT )
20  INT64:                    4/0x000000000000000004 (0x10 =>    INEXACT )
20  INT64:                   16/0x000000000000000010 (0x10 =>    INEXACT )
20  INT64:                  256/0x000000000000000100 (0x10 =>    INEXACT )
20  INT64:                65600/0x000000000000010040 (0x10 =>    INEXACT )
20  INT64:           4299161600/0x000000000100400000 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138310e-308 / 0x000010000000000000 (0 => OK)
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282844e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238764e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT64:                    2/0x000000000000000002 (0 => OK)
24  INT64:                    4/0x000000000000000004 (0 => OK)
24  INT64:                   16/0x000000000000000010 (0 => OK)
24  INT64:                  256/0x000000000000000100 (0 => OK)
24  INT64:                65536/0x000000000000010000 (0 => OK)
24  INT64:           4294967296/0x000000000100000000 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT64:                    4/0x000000000000000004 (0 => OK)
25  INT64:                    8/0x000000000000000008 (0 => OK)
25  INT64:                   32/0x000000000000000020 (0 => OK)
25  INT64:                  512/0x000000000000000200 (0 => OK)
25  INT64:               131072/0x000000000000020000 (0 => OK)
25  INT64:           8589934592/0x000000000200000000 (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT64:                    5/0x000000000000000005 (0x10 =>    INEXACT )
26  INT64:                   10/0x00000000000000000a (0x10 =>    INEXACT )
26  INT64:                   43/0x00000000000000002b (0x10 =>    INEXACT )
26  INT64:                  695/0x0000000000000002b7 (0x10 =>    INEXACT )
26  INT64:               178145/0x00000000000002b7e1 (0x10 =>    INEXACT )
26  INT64:          11674931554/0x0000000002b7e15162 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT64:                    6/0x000000000000000006 (0x10 =>    INEXACT )
27  INT64:                   12/0x00000000000000000c (0x10 =>    INEXACT )
27  INT64:                   50/0x000000000000000032 (0x10 =>    INEXACT )
27  INT64:                  804/0x000000000000000324 (0x10 =>    INEXACT )
27  INT64:               205887/0x00000000000003243f (0x10 =>    INEXACT )
27  INT64:          13493037704/0x0000000003243f6a88 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT64:               131006/0x00000000000001ffbe (0 => OK)
28  INT64:               262012/0x00000000000003ff7c (0 => OK)
28  INT64:              1048048/0x0000000000000ffdf0 (0 => OK)
28  INT64:             16768768/0x000000000000ffdf00 (0 => OK)
28  INT64:           4292804608/0x0000000000ffdf0000 (0 => OK)
28  INT64:      281333242789888/0x000000ffdf00000000 (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT64:               131008/0x00000000000001ffc0 (0 => OK)
29  INT64:               262016/0x00000000000003ff80 (0 => OK)
29  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
29  INT64:             16769024/0x000000000000ffe000 (0 => OK)
29  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
29  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT64:               131010/0x00000000000001ffc2 (0 => OK)
30  INT64:               262020/0x00000000000003ff84 (0 => OK)
30  INT64:              1048080/0x0000000000000ffe10 (0 => OK)
30  INT64:             16769280/0x000000000000ffe100 (0 => OK)
30  INT64:           4292935680/0x0000000000ffe10000 (0 => OK)
30  INT64:      281341832724480/0x000000ffe100000000 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT64:               262014/0x00000000000003ff7e (0 => OK)
31  INT64:               524028/0x00000000000007fefc (0 => OK)
31  INT64:              2096112/0x0000000000001ffbf0 (0 => OK)
31  INT64:             33537792/0x000000000001ffbf00 (0 => OK)
31  INT64:           8585674752/0x0000000001ffbf0000 (0 => OK)
31  INT64:      562670780547072/0x000001ffbf00000000 (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT64:               262016/0x00000000000003ff80 (0 => OK)
32  INT64:               524032/0x00000000000007ff00 (0 => OK)
32  INT64:              2096128/0x0000000000001ffc00 (0 => OK)
32  INT64:             33538048/0x000000000001ffc000 (0 => OK)
32  INT64:           8585740288/0x0000000001ffc00000 (0 => OK)
32  INT64:      562675075514368/0x000001ffc000000000 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT64:               262018/0x00000000000003ff82 (0 => OK)
33  INT64:               524036/0x00000000000007ff04 (0 => OK)
33  INT64:              2096144/0x0000000000001ffc10 (0 => OK)
33  INT64:             33538304/0x000000000001ffc100 (0 => OK)
33  INT64:           8585805824/0x0000000001ffc10000 (0 => OK)
33  INT64:      562679370481664/0x000001ffc100000000 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT64:           4294967294/0x0000000000fffffffe (0 => OK)
34  INT64:           8589934588/0x0000000001fffffffc (0 => OK)
34  INT64:          34359738352/0x0000000007fffffff0 (0 => OK)
34  INT64:         549755813632/0x000000007fffffff00 (0 => OK)
34  INT64:      140737488289792/0x0000007fffffff0000 (0 => OK)
34  INT64:  9223372032559808512/0x007fffffff00000000 (0 => OK)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting double-precision to 32 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT32:     -2/0xfffffffe (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT32:     -1/0xffffffff (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12  INT32:      0/         0 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14  INT32:      0/         0 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT32:      0/         0 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015662e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT32:      0/         0 (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT32:      0/         0 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT32:      0/         0 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT32:      1/       0x1 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT32:      1/       0x1 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138310e-308 / 0x000010000000000000 (0 => OK)
21  INT32:      0/         0 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282844e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT32:      0/         0 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238764e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT32:      0/         0 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT32:      1/       0x1 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT32:      2/       0x2 (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT32:      2/       0x2 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT32:      3/       0x3 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT32:  65503/    0xffdf (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT32:  65504/    0xffe0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT32:  65505/    0xffe1 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT32: 131007/   0x1ffbf (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT32: 131008/   0x1ffc0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT32: 131009/   0x1ffc1 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT32: 2147483647/0x7fffffff (0 => OK)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37  INT32:      0/         0 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT32:      0/         0 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT32:      0/         0 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT32:      0/         0 (0x1 =>     INVALID)
Converting double-precision to 64 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015662e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT64:                    1/0x000000000000000001 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT64:                    1/0x000000000000000001 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138310e-308 / 0x000010000000000000 (0 => OK)
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282844e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238764e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT64:                    1/0x000000000000000001 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT64:                    2/0x000000000000000002 (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT64:                    2/0x000000000000000002 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT64:                    3/0x000000000000000003 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT64:                65503/0x00000000000000ffdf (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT64:                65504/0x00000000000000ffe0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT64:                65505/0x00000000000000ffe1 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT64:               131007/0x00000000000001ffbf (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT64:               131008/0x00000000000001ffc0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT64:               131009/0x00000000000001ffc1 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT64:           2147483647/0x00000000007fffffff (0 => OK)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to double-precision
00   HALF: 0xffff  (0 => OK)
00 DOUBLE: -nan / 0x00fffffc0000000000 (0 => OK)
01   HALF: 0xfcff  (0 => OK)
01 DOUBLE: -nan / 0x00fffbfc0000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02 DOUBLE: -nan / 0x00fff8040000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
04   HALF: 0xfbff  (0 => OK)
04 DOUBLE: -6.55040000000000000000e+04 / 0x00c0effc0000000000 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05 DOUBLE: -6.54720000000000000000e+04 / 0x00c0eff80000000000 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
08   HALF: 0x8001  (0 => OK)
08 DOUBLE: -5.96046447753906250000e-08 / 0x00be70000000000000 (0 => OK)
09   HALF: 0x8000  (0 => OK)
09 DOUBLE: -0.00000000000000000000e+00 / 0x008000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11 DOUBLE: 5.96046447753906250000e-08 / 0x003e70000000000000 (0 => OK)
12   HALF: 0x3c00  (0 => OK)
12 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13 DOUBLE: 6.54720000000000000000e+04 / 0x0040eff80000000000 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
16   HALF: 0x7c01  (0 => OK)
16 DOUBLE: nan / 0x007ff8040000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17 DOUBLE: nan / 0x007ffbfc0000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18 DOUBLE: nan / 0x007ffffc0000000000 (0 => OK)
Converting half-precision to single-precision
00   HALF: 0xffff  (0 => OK)
00 SINGLE: -nan / 0xffffe000  (0 => OK)
01   HALF: 0xfcff  (0 => OK)
01 SINGLE: -nan / 0xffdfe000  (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02 SINGLE: -nan / 0xffc02000  (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03 SINGLE: -inf / 0xff800000  (0 => OK)
04   HALF: 0xfbff  (0 => OK)
04 SINGLE: -6.55040000000000000000e+04 / 0xc77fe000  (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05 SINGLE: -6.54720000000000000000e+04 / 0xc77fc000  (0 => OK)
06   HALF: 0xc000  (0 => OK)
06 SINGLE: -2.00000000000000000000e+00 / 0xc0000000  (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07 SINGLE: -1.00000000000000000000e+00 / 0xbf800000  (0 => OK)
08   HALF: 0x8001  (0 => OK)
08 SINGLE: -5.96046447753906250000e-08 / 0xb3800000  (0 => OK)
09   HALF: 0x8000  (0 => OK)
09 SINGLE: -0.00000000000000000000e+00 / 0x80000000  (0 => OK)
10   HALF: 0000  (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11   HALF: 0x01  (0 => OK)
11 SINGLE: 5.96046447753906250000e-08 / 0x33800000  (0 => OK)
12   HALF: 0x3c00  (0 => OK)
12 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15 SINGLE: inf / 0x7f800000  (0 => OK)
16   HALF: 0x7c01  (0 => OK)
16 SINGLE: nan / 0x7fc02000  (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17 SINGLE: nan / 0x7fdfe000  (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18 SINGLE: nan / 0x7fffe000  (0 => OK)
Converting half-precision to fixed point 64 bit int
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:              -131008/0x00fffffffffffe0040 (0 => OK)
04  INT64:              -262016/0x00fffffffffffc0080 (0 => OK)
04  INT64:             -1048064/0x00fffffffffff00200 (0 => OK)
04  INT64:            -16769024/0x00ffffffffff002000 (0 => OK)
04  INT64:          -4292870144/0x00ffffffff00200000 (0 => OK)
04  INT64:     -281337537757184/0x00ffff002000000000 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:              -130944/0x00fffffffffffe0080 (0 => OK)
05  INT64:              -261888/0x00fffffffffffc0100 (0 => OK)
05  INT64:             -1047552/0x00fffffffffff00400 (0 => OK)
05  INT64:            -16760832/0x00ffffffffff004000 (0 => OK)
05  INT64:          -4290772992/0x00ffffffff00400000 (0 => OK)
05  INT64:     -281200098803712/0x00ffff004000000000 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
06  INT64:                   -8/0x00fffffffffffffff8 (0 => OK)
06  INT64:                  -32/0x00ffffffffffffffe0 (0 => OK)
06  INT64:                 -512/0x00fffffffffffffe00 (0 => OK)
06  INT64:              -131072/0x00fffffffffffe0000 (0 => OK)
06  INT64:          -8589934592/0x00fffffffe00000000 (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
07  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
07  INT64:                  -16/0x00fffffffffffffff0 (0 => OK)
07  INT64:                 -256/0x00ffffffffffffff00 (0 => OK)
07  INT64:               -65536/0x00ffffffffffff0000 (0 => OK)
07  INT64:          -4294967296/0x00ffffffff00000000 (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                 -256/0x00ffffffffffffff00 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                  256/0x000000000000000100 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    2/0x000000000000000002 (0 => OK)
12  INT64:                    4/0x000000000000000004 (0 => OK)
12  INT64:                   16/0x000000000000000010 (0 => OK)
12  INT64:                  256/0x000000000000000100 (0 => OK)
12  INT64:                65536/0x000000000000010000 (0 => OK)
12  INT64:           4294967296/0x000000000100000000 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:               130944/0x00000000000001ff80 (0 => OK)
13  INT64:               261888/0x00000000000003ff00 (0 => OK)
13  INT64:              1047552/0x0000000000000ffc00 (0 => OK)
13  INT64:             16760832/0x000000000000ffc000 (0 => OK)
13  INT64:           4290772992/0x0000000000ffc00000 (0 => OK)
13  INT64:      281200098803712/0x000000ffc000000000 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:               131008/0x00000000000001ffc0 (0 => OK)
14  INT64:               262016/0x00000000000003ff80 (0 => OK)
14  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
14  INT64:             16769024/0x000000000000ffe000 (0 => OK)
14  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
14  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to fixed point 32 bit int
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT32:     -4/0xfffffffc (0x10 =>    INEXACT )
06  INT32:     -8/0xfffffff8 (0x10 =>    INEXACT )
06  INT32:    -32/0xffffffe0 (0x10 =>    INEXACT )
06  INT32:   -515/0xfffffdfd (0x10 =>    INEXACT )
06  INT32: -131840/0xfffdfd00 (0x10 =>    INEXACT )
06  INT32: -131840/0xfffdfd00 (0x10 =>    INEXACT )
06  INT32: -2147483648/0x80000000 (0x11 =>    INEXACT INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:     -2/0xfffffffe (0x10 =>    INEXACT )
07  INT32:   -514/0xfffffdfe (0x10 =>    INEXACT )
07  INT32:   -514/0xfffffdfe (0x10 =>    INEXACT )
07  INT32: -33746944/0xfdfd1000 (0x10 =>    INEXACT )
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      2/       0x2 (0x10 =>    INEXACT )
12  INT32:    512/     0x200 (0x10 =>    INEXACT )
12  INT32:    512/     0x200 (0x10 =>    INEXACT )
12  INT32: 33615872/ 0x200f000 (0x10 =>    INEXACT )
13   HALF: 0x7bfe  (0 => OK)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14   HALF: 0x7bff  (0 => OK)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15   HALF: 0x7c00  (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 64 bit int
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:               -65504/0x00ffffffffffff0020 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:               -65472/0x00ffffffffffff0040 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    1/0x000000000000000001 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:                65472/0x00000000000000ffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:                65504/0x00000000000000ffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to 32 bit int
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32:      0/         0 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32: -65504/0xffff0020 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT32: -65472/0xffff0040 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT32:     -2/0xfffffffe (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT32:     -1/0xffffffff (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      1/       0x1 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT32:  65472/    0xffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT32:  65504/    0xffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32:      0/         0 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32:      0/         0 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 64 bit uint
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    1/0x000000000000000001 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:                65472/0x00000000000000ffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:                65504/0x00000000000000ffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:                   -1/0x00ffffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to 32 bit uint
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32:      0/         0 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32:      0/         0 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32:      0/         0 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT32:      0/         0 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT32:      0/         0 (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT32:      0/         0 (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      1/       0x1 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT32:  65472/    0xffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT32:  65504/    0xffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT32:     -1/0xffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32:      0/         0 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32:      0/         0 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 16 bit uint
00   HALF: 0xffff  (0 => OK)
00   HALF: 0000  (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01   HALF: 0000  (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02   HALF: 0000  (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03   HALF: 0000  (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04   HALF: 0000  (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05   HALF: 0000  (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06   HALF: 0000  (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07   HALF: 0000  (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08   HALF: 0000  (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09   HALF: 0000  (0 => OK)
10   HALF: 0000  (0 => OK)
10   HALF: 0000  (0 => OK)
11   HALF: 0x01  (0 => OK)
11   HALF: 0000  (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12   HALF: 0x01  (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13   HALF: 0xffc0  (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14   HALF: 0xffe0  (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15   HALF: 0xffff  (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16   HALF: 0000  (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17   HALF: 0000  (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18   HALF: 0000  (0x1 =>     INVALID)
Converting signed int32 to half-precision
00  INT32:      0/         0 (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT32:      1/       0x1 (0 => OK)
01   HALF: 0x3c00  (0 => OK)
02  INT32:     16/      0x10 (0 => OK)
02   HALF: 0x4c00  (0 => OK)
03  INT32:    256/     0x100 (0 => OK)
03   HALF: 0x5c00  (0 => OK)
04  INT32:   4096/    0x1000 (0 => OK)
04   HALF: 0x6c00  (0 => OK)
05  INT32:  65503/    0xffdf (0 => OK)
05   HALF: 0x7bff  (0x10 =>    INEXACT )
06  INT32:  65504/    0xffe0 (0 => OK)
06   HALF: 0x7bff  (0 => OK)
07  INT32:  65505/    0xffe1 (0 => OK)
07   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
08  INT32:  65535/    0xffff (0 => OK)
08   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
09  INT32:  65536/   0x10000 (0 => OK)
09   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10  INT32: 1048576/  0x100000 (0 => OK)
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11  INT32: 16777215/  0xffffff (0 => OK)
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12  INT32: 16777216/ 0x1000000 (0 => OK)
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13  INT32: 16777217/ 0x1000001 (0 => OK)
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14  INT32: 268435456/0x10000000 (0 => OK)
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15  INT32: 536870912/0x20000000 (0 => OK)
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16  INT32: 1073741824/0x40000000 (0 => OK)
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
17  INT32: -2147483648/0x80000000 (0 => OK)
17   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
18  INT32: -2147483647/0x80000001 (0 => OK)
18   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
19  INT32: -2147483617/0x8000001f (0 => OK)
19   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
20  INT32: -2147483585/0x8000003f (0 => OK)
20   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
21  INT32: -2147483521/0x8000007f (0 => OK)
21   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
22  INT32: -2147483393/0x800000ff (0 => OK)
22   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
23  INT32: -2147483137/0x800001ff (0 => OK)
23   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
24  INT32: -2147482849/0x8000031f (0 => OK)
24   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25  INT32: -2147481601/0x800007ff (0 => OK)
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26  INT32: -2147479553/0x80000fff (0 => OK)
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27  INT32: -2147418113/0x8000ffff (0 => OK)
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28  INT32: -2146435073/0x800fffff (0 => OK)
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29  INT32: -2130706433/0x80ffffff (0 => OK)
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30  INT32: -1879048193/0x8fffffff (0 => OK)
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31  INT32: -1610612737/0x9fffffff (0 => OK)
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32  INT32: -1342177281/0xafffffff (0 => OK)
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33  INT32: -1073741825/0xbfffffff (0 => OK)
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34  INT32: -805306369/0xcfffffff (0 => OK)
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35  INT32: -536870913/0xdfffffff (0 => OK)
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36  INT32: -268435457/0xefffffff (0 => OK)
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37  INT32:     -1/0xffffffff (0 => OK)
37   HALF: 0xbc00  (0 => OK)
38  INT32:     -2/0xfffffffe (0 => OK)
38   HALF: 0xc000  (0 => OK)
39  INT32:     -3/0xfffffffd (0 => OK)
39   HALF: 0xc200  (0 => OK)
40  INT32:     -4/0xfffffffc (0 => OK)
40   HALF: 0xc400  (0 => OK)
41  INT32:     -8/0xfffffff8 (0 => OK)
41   HALF: 0xc800  (0 => OK)
42  INT32:    -16/0xfffffff0 (0 => OK)
42   HALF: 0xcc00  (0 => OK)
43  INT32:    -32/0xffffffe0 (0 => OK)
43   HALF: 0xd000  (0 => OK)
44  INT32:    -48/0xffffffd0 (0 => OK)
44   HALF: 0xd200  (0 => OK)
45  INT32:    -64/0xffffffc0 (0 => OK)
45   HALF: 0xd400  (0 => OK)
46  INT32:   -128/0xffffff80 (0 => OK)
46   HALF: 0xd800  (0 => OK)
47  INT32:   -512/0xfffffe00 (0 => OK)
47   HALF: 0xe000  (0 => OK)
48  INT32:   -768/0xfffffd00 (0 => OK)
48   HALF: 0xe200  (0 => OK)
49  INT32:  -1024/0xfffffc00 (0 => OK)
49   HALF: 0xe400  (0 => OK)
50  INT32:  -2048/0xfffff800 (0 => OK)
50   HALF: 0xe800  (0 => OK)
51  INT32:  -4096/0xfffff000 (0 => OK)
51   HALF: 0xec00  (0 => OK)
52  INT32:  -8192/0xffffe000 (0 => OK)
52   HALF: 0xf000  (0 => OK)
53  INT32: -12288/0xffffd000 (0 => OK)
53   HALF: 0xf200  (0 => OK)
54  INT32: -16384/0xffffc000 (0 => OK)
54   HALF: 0xf400  (0 => OK)
55  INT32: -32768/0xffff8000 (0 => OK)
55   HALF: 0xf800  (0 => OK)
56  INT32: -524288/0xfff80000 (0 => OK)
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57  INT32: -8388608/0xff800000 (0 => OK)
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58  INT32: -16777216/0xff000000 (0 => OK)
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
59  INT32: -33554432/0xfe000000 (0 => OK)
59   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
60  INT32: -50331648/0xfd000000 (0 => OK)
60   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
61  INT32: -67108864/0xfc000000 (0 => OK)
61   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
62  INT32: -134217728/0xf8000000 (0 => OK)
62   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
63  INT32: -268435456/0xf0000000 (0 => OK)
63   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
64  INT32: -536870912/0xe0000000 (0 => OK)
64   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
65  INT32: -805306368/0xd0000000 (0 => OK)
65   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
66  INT32: -1073741824/0xc0000000 (0 => OK)
66   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
67  INT32: -2147483648/0x80000000 (0 => OK)
67   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
Converting fixed point int32 to half-precision
00  INT32:      0/         0 (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT32:      1/       0x1 (0 => OK)
01   HALF: 0x3800  (0 => OK)
01   HALF: 0x3400  (0 => OK)
01   HALF: 0x2c00  (0 => OK)
01   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
02  INT32:     16/      0x10 (0 => OK)
02   HALF: 0x4800  (0 => OK)
02   HALF: 0x4400  (0 => OK)
02   HALF: 0x3c00  (0 => OK)
02   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
03  INT32:    256/     0x100 (0 => OK)
03   HALF: 0x5800  (0 => OK)
03   HALF: 0x5400  (0 => OK)
03   HALF: 0x4c00  (0 => OK)
03   HALF: 0x01  (0 => OK)
04  INT32:   4096/    0x1000 (0 => OK)
04   HALF: 0x6800  (0 => OK)
04   HALF: 0x6400  (0 => OK)
04   HALF: 0x5c00  (0 => OK)
04   HALF: 0x10  (0 => OK)
05  INT32:  65503/    0xffdf (0 => OK)
05   HALF: 0x77ff  (0x10 =>    INEXACT )
05   HALF: 0x73ff  (0x10 =>    INEXACT )
05   HALF: 0x6bff  (0x10 =>    INEXACT )
05   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
06  INT32:  65504/    0xffe0 (0 => OK)
06   HALF: 0x77ff  (0 => OK)
06   HALF: 0x73ff  (0 => OK)
06   HALF: 0x6bff  (0 => OK)
06   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
07  INT32:  65505/    0xffe1 (0 => OK)
07   HALF: 0x7800  (0x10 =>    INEXACT )
07   HALF: 0x7400  (0x10 =>    INEXACT )
07   HALF: 0x6c00  (0x10 =>    INEXACT )
07   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
08  INT32:  65535/    0xffff (0 => OK)
08   HALF: 0x7800  (0x10 =>    INEXACT )
08   HALF: 0x7400  (0x10 =>    INEXACT )
08   HALF: 0x6c00  (0x10 =>    INEXACT )
08   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
09  INT32:  65536/   0x10000 (0 => OK)
09   HALF: 0x7800  (0 => OK)
09   HALF: 0x7400  (0 => OK)
09   HALF: 0x6c00  (0 => OK)
09   HALF: 0x100  (0 => OK)
10  INT32: 1048576/  0x100000 (0 => OK)
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0xc00  (0x14 => OVERFLOW   INEXACT )
11  INT32: 16777215/  0xffffff (0 => OK)
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
12  INT32: 16777216/ 0x1000000 (0 => OK)
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
13  INT32: 16777217/ 0x1000001 (0 => OK)
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x1c01  (0x14 => OVERFLOW   INEXACT )
14  INT32: 268435456/0x10000000 (0 => OK)
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
15  INT32: 536870912/0x20000000 (0 => OK)
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
16  INT32: 1073741824/0x40000000 (0 => OK)
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
17  INT32: -2147483648/0x80000000 (0 => OK)
17   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
18  INT32: -2147483647/0x80000001 (0 => OK)
18   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
19  INT32: -2147483617/0x8000001f (0 => OK)
19   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
20  INT32: -2147483585/0x8000003f (0 => OK)
20   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
21  INT32: -2147483521/0x8000007f (0 => OK)
21   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
22  INT32: -2147483393/0x800000ff (0 => OK)
22   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
23  INT32: -2147483137/0x800001ff (0 => OK)
23   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
24  INT32: -2147482849/0x8000031f (0 => OK)
24   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
25  INT32: -2147481601/0x800007ff (0 => OK)
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
26  INT32: -2147479553/0x80000fff (0 => OK)
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
27  INT32: -2147418113/0x8000ffff (0 => OK)
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
28  INT32: -2146435073/0x800fffff (0 => OK)
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
29  INT32: -2130706433/0x80ffffff (0 => OK)
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xb7f0  (0x14 => OVERFLOW   INEXACT )
30  INT32: -1879048193/0x8fffffff (0 => OK)
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xb700  (0x14 => OVERFLOW   INEXACT )
31  INT32: -1610612737/0x9fffffff (0 => OK)
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xb600  (0x14 => OVERFLOW   INEXACT )
32  INT32: -1342177281/0xafffffff (0 => OK)
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xb500  (0x14 => OVERFLOW   INEXACT )
33  INT32: -1073741825/0xbfffffff (0 => OK)
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xb400  (0x14 => OVERFLOW   INEXACT )
34  INT32: -805306369/0xcfffffff (0 => OK)
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xb200  (0x14 => OVERFLOW   INEXACT )
35  INT32: -536870913/0xdfffffff (0 => OK)
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xb000  (0x14 => OVERFLOW   INEXACT )
36  INT32: -268435457/0xefffffff (0 => OK)
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xac00  (0x14 => OVERFLOW   INEXACT )
37  INT32:     -1/0xffffffff (0 => OK)
37   HALF: 0xb800  (0 => OK)
37   HALF: 0xb400  (0 => OK)
37   HALF: 0xac00  (0 => OK)
37   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
38  INT32:     -2/0xfffffffe (0 => OK)
38   HALF: 0xbc00  (0 => OK)
38   HALF: 0xb800  (0 => OK)
38   HALF: 0xb000  (0 => OK)
38   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
39  INT32:     -3/0xfffffffd (0 => OK)
39   HALF: 0xbe00  (0 => OK)
39   HALF: 0xba00  (0 => OK)
39   HALF: 0xb200  (0 => OK)
39   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
40  INT32:     -4/0xfffffffc (0 => OK)
40   HALF: 0xc000  (0 => OK)
40   HALF: 0xbc00  (0 => OK)
40   HALF: 0xb400  (0 => OK)
40   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
41  INT32:     -8/0xfffffff8 (0 => OK)
41   HALF: 0xc400  (0 => OK)
41   HALF: 0xc000  (0 => OK)
41   HALF: 0xb800  (0 => OK)
41   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
42  INT32:    -16/0xfffffff0 (0 => OK)
42   HALF: 0xc800  (0 => OK)
42   HALF: 0xc400  (0 => OK)
42   HALF: 0xbc00  (0 => OK)
42   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
43  INT32:    -32/0xffffffe0 (0 => OK)
43   HALF: 0xcc00  (0 => OK)
43   HALF: 0xc800  (0 => OK)
43   HALF: 0xc000  (0 => OK)
43   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
44  INT32:    -48/0xffffffd0 (0 => OK)
44   HALF: 0xce00  (0 => OK)
44   HALF: 0xca00  (0 => OK)
44   HALF: 0xc200  (0 => OK)
44   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
45  INT32:    -64/0xffffffc0 (0 => OK)
45   HALF: 0xd000  (0 => OK)
45   HALF: 0xcc00  (0 => OK)
45   HALF: 0xc400  (0 => OK)
45   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
46  INT32:   -128/0xffffff80 (0 => OK)
46   HALF: 0xd400  (0 => OK)
46   HALF: 0xd000  (0 => OK)
46   HALF: 0xc800  (0 => OK)
46   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
47  INT32:   -512/0xfffffe00 (0 => OK)
47   HALF: 0xdc00  (0 => OK)
47   HALF: 0xd800  (0 => OK)
47   HALF: 0xd000  (0 => OK)
47   HALF: 0x8002  (0 => OK)
48  INT32:   -768/0xfffffd00 (0 => OK)
48   HALF: 0xde00  (0 => OK)
48   HALF: 0xda00  (0 => OK)
48   HALF: 0xd200  (0 => OK)
48   HALF: 0x8003  (0 => OK)
49  INT32:  -1024/0xfffffc00 (0 => OK)
49   HALF: 0xe000  (0 => OK)
49   HALF: 0xdc00  (0 => OK)
49   HALF: 0xd400  (0 => OK)
49   HALF: 0x8004  (0 => OK)
50  INT32:  -2048/0xfffff800 (0 => OK)
50   HALF: 0xe400  (0 => OK)
50   HALF: 0xe000  (0 => OK)
50   HALF: 0xd800  (0 => OK)
50   HALF: 0x8008  (0 => OK)
51  INT32:  -4096/0xfffff000 (0 => OK)
51   HALF: 0xe800  (0 => OK)
51   HALF: 0xe400  (0 => OK)
51   HALF: 0xdc00  (0 => OK)
51   HALF: 0x8010  (0 => OK)
52  INT32:  -8192/0xffffe000 (0 => OK)
52   HALF: 0xec00  (0 => OK)
52   HALF: 0xe800  (0 => OK)
52   HALF: 0xe000  (0 => OK)
52   HALF: 0x8020  (0 => OK)
53  INT32: -12288/0xffffd000 (0 => OK)
53   HALF: 0xee00  (0 => OK)
53   HALF: 0xea00  (0 => OK)
53   HALF: 0xe200  (0 => OK)
53   HALF: 0x8030  (0 => OK)
54  INT32: -16384/0xffffc000 (0 => OK)
54   HALF: 0xf000  (0 => OK)
54   HALF: 0xec00  (0 => OK)
54   HALF: 0xe400  (0 => OK)
54   HALF: 0x8040  (0 => OK)
55  INT32: -32768/0xffff8000 (0 => OK)
55   HALF: 0xf400  (0 => OK)
55   HALF: 0xf000  (0 => OK)
55   HALF: 0xe800  (0 => OK)
55   HALF: 0x8080  (0 => OK)
56  INT32: -524288/0xfff80000 (0 => OK)
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xf800  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0x8800  (0x14 => OVERFLOW   INEXACT )
57  INT32: -8388608/0xff800000 (0 => OK)
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0x9800  (0x14 => OVERFLOW   INEXACT )
58  INT32: -16777216/0xff000000 (0 => OK)
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0x9c00  (0x14 => OVERFLOW   INEXACT )
59  INT32: -33554432/0xfe000000 (0 => OK)
59   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xa000  (0x14 => OVERFLOW   INEXACT )
60  INT32: -50331648/0xfd000000 (0 => OK)
60   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xa200  (0x14 => OVERFLOW   INEXACT )
61  INT32: -67108864/0xfc000000 (0 => OK)
61   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xa400  (0x14 => OVERFLOW   INEXACT )
62  INT32: -134217728/0xf8000000 (0 => OK)
62   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xa800  (0x14 => OVERFLOW   INEXACT )
63  INT32: -268435456/0xf0000000 (0 => OK)
63   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xac00  (0x14 => OVERFLOW   INEXACT )
64  INT32: -536870912/0xe0000000 (0 => OK)
64   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xb000  (0x14 => OVERFLOW   INEXACT )
65  INT32: -805306368/0xd0000000 (0 => OK)
65   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xb200  (0x14 => OVERFLOW   INEXACT )
66  INT32: -1073741824/0xc0000000 (0 => OK)
66   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xb400  (0x14 => OVERFLOW   INEXACT )
67  INT32: -2147483648/0x80000000 (0 => OK)
67   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
Converting fixed point int64 to half-precision
00  INT64:                    0/00000000000000000000 (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT64:                    1/0x000000000000000001 (0 => OK)
01   HALF: 0x3800  (0 => OK)
01   HALF: 0x3400  (0 => OK)
01   HALF: 0x2c00  (0 => OK)
01   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
02  INT64:                   16/0x000000000000000010 (0 => OK)
02   HALF: 0x4800  (0 => OK)
02   HALF: 0x4400  (0 => OK)
02   HALF: 0x3c00  (0 => OK)
02   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
03  INT64:                  256/0x000000000000000100 (0 => OK)
03   HALF: 0x5800  (0 => OK)
03   HALF: 0x5400  (0 => OK)
03   HALF: 0x4c00  (0 => OK)
03   HALF: 0x01  (0 => OK)
03   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
03   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
03   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
04  INT64:                 4096/0x000000000000001000 (0 => OK)
04   HALF: 0x6800  (0 => OK)
04   HALF: 0x6400  (0 => OK)
04   HALF: 0x5c00  (0 => OK)
04   HALF: 0x10  (0 => OK)
04   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
04   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
04   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
05  INT64:                65503/0x00000000000000ffdf (0 => OK)
05   HALF: 0x77ff  (0x10 =>    INEXACT )
05   HALF: 0x73ff  (0x10 =>    INEXACT )
05   HALF: 0x6bff  (0x10 =>    INEXACT )
05   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x08  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x04  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x02  (0x18 =>  UNDERFLOW  INEXACT )
06  INT64:                65504/0x00000000000000ffe0 (0 => OK)
06   HALF: 0x77ff  (0 => OK)
06   HALF: 0x73ff  (0 => OK)
06   HALF: 0x6bff  (0 => OK)
06   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x08  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x04  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x02  (0x18 =>  UNDERFLOW  INEXACT )
07  INT64:                65505/0x00000000000000ffe1 (0 => OK)
07   HALF: 0x7800  (0x10 =>    INEXACT )
07   HALF: 0x7400  (0x10 =>    INEXACT )
07   HALF: 0x6c00  (0x10 =>    INEXACT )
07   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x08  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x04  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x02  (0x18 =>  UNDERFLOW  INEXACT )
08  INT64:                65535/0x00000000000000ffff (0 => OK)
08   HALF: 0x7800  (0x10 =>    INEXACT )
08   HALF: 0x7400  (0x10 =>    INEXACT )
08   HALF: 0x6c00  (0x10 =>    INEXACT )
08   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x08  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x04  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x02  (0x18 =>  UNDERFLOW  INEXACT )
09  INT64:                65536/0x000000000000010000 (0 => OK)
09   HALF: 0x7800  (0 => OK)
09   HALF: 0x7400  (0 => OK)
09   HALF: 0x6c00  (0 => OK)
09   HALF: 0x100  (0 => OK)
09   HALF: 0x08  (0 => OK)
09   HALF: 0x04  (0 => OK)
09   HALF: 0x02  (0 => OK)
10  INT64:              1048576/0x000000000000100000 (0 => OK)
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0xc00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x80  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x40  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x20  (0x14 => OVERFLOW   INEXACT )
11  INT64:             16777215/0x000000000000ffffff (0 => OK)
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x400  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
11   HALF: 0x200  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
12  INT64:             16777216/0x000000000001000000 (0 => OK)
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x400  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x200  (0x14 => OVERFLOW   INEXACT )
13  INT64:             16777217/0x000000000001000001 (0 => OK)
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x1c01  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x801  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x401  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x201  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
14  INT64:            268435456/0x000000000010000000 (0 => OK)
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1400  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1000  (0x14 => OVERFLOW   INEXACT )
15  INT64:            536870912/0x000000000020000000 (0 => OK)
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1400  (0x14 => OVERFLOW   INEXACT )
16  INT64:           1073741824/0x000000000040000000 (0 => OK)
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x2000  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
17  INT64:           2147483648/0x000000000080000000 (0 => OK)
17   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x3800  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x2400  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x2000  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
18  INT64:          34359738368/0x000000000800000000 (0 => OK)
18   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x4800  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
19  INT64:         549755813888/0x000000008000000000 (0 => OK)
19   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x5800  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x4400  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x4000  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x3c00  (0x14 => OVERFLOW   INEXACT )
20  INT64:        8796093022208/0x000000080000000000 (0 => OK)
20   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x6800  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x5400  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x5000  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x4c00  (0x14 => OVERFLOW   INEXACT )
21  INT64:      140737488355328/0x000000800000000000 (0 => OK)
21   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7800  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x6400  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x6000  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x5c00  (0x14 => OVERFLOW   INEXACT )
22  INT64:     2251799813685248/0x000008000000000000 (0 => OK)
22   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7400  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7000  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x6c00  (0x14 => OVERFLOW   INEXACT )
23  INT64:    36028797018963968/0x000080000000000000 (0 => OK)
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24  INT64:   576460752303423488/0x000800000000000000 (0 => OK)
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
25  INT64: -9223372036854775808/0x008000000000000000 (0 => OK)
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26  INT64: -9223372036854775807/0x008000000000000001 (0 => OK)
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27  INT64: -9223372036854775777/0x00800000000000001f (0 => OK)
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28  INT64: -9223372036854775745/0x00800000000000003f (0 => OK)
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29  INT64: -9223372036854775681/0x00800000000000007f (0 => OK)
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30  INT64: -9223372036854775553/0x0080000000000000ff (0 => OK)
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31  INT64: -9223372036854775297/0x0080000000000001ff (0 => OK)
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32  INT64: -9223372036854775009/0x00800000000000031f (0 => OK)
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33  INT64: -9223372036854773761/0x0080000000000007ff (0 => OK)
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34  INT64: -9223372036854771713/0x008000000000000fff (0 => OK)
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35  INT64: -9223372036854710273/0x00800000000000ffff (0 => OK)
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36  INT64: -9223372036853727233/0x0080000000000fffff (0 => OK)
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37  INT64: -9223372036837998593/0x008000000000ffffff (0 => OK)
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38  INT64: -9223372036586340353/0x00800000000fffffff (0 => OK)
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39  INT64: -9223372032559808513/0x0080000000ffffffff (0 => OK)
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40  INT64: -9223371968135299073/0x008000000fffffffff (0 => OK)
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41  INT64: -9223370937343148033/0x00800000ffffffffff (0 => OK)
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42  INT64: -9223354444668731393/0x0080000fffffffffff (0 => OK)
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43  INT64: -9223090561878065153/0x008000ffffffffffff (0 => OK)
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44  INT64: -9218868437227405313/0x00800fffffffffffff (0 => OK)
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45  INT64: -9218868437227405313/0x00800fffffffffffff (0 => OK)
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46  INT64: -9151314442816847873/0x0080ffffffffffffff (0 => OK)
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47  INT64: -9079256848778919937/0x0081ffffffffffffff (0 => OK)
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48  INT64: -8935141660703064065/0x0083ffffffffffffff (0 => OK)
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49  INT64: -8646911284551352321/0x0087ffffffffffffff (0 => OK)
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50  INT64: -8070450532247928833/0x008fffffffffffffff (0 => OK)
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51  INT64: -6917529027641081857/0x009fffffffffffffff (0 => OK)
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52  INT64: -5764607523034234881/0x00afffffffffffffff (0 => OK)
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53  INT64: -4611686018427387905/0x00bfffffffffffffff (0 => OK)
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54  INT64: -3458764513820540929/0x00cfffffffffffffff (0 => OK)
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55  INT64: -2305843009213693953/0x00dfffffffffffffff (0 => OK)
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56  INT64: -1152921504606846977/0x00efffffffffffffff (0 => OK)
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57  INT64: -1152921504606846976/0x00f000000000000000 (0 => OK)
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58  INT64:   -18001204369948673/0x00ffc00bffffffffff (0 => OK)
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbfe  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xf7fe  (0x14 => OVERFLOW   INEXACT )
59  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
59   HALF: 0xb800  (0 => OK)
59   HALF: 0xb400  (0 => OK)
59   HALF: 0xac00  (0 => OK)
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
### Rounding downwards
Converting single-precision to half-precision
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00   HALF: 0000  (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01   HALF: 0000  (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02   HALF: 0000  (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03   HALF: 0000  (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04   HALF: 0000  (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05   HALF: 0000  (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06   HALF: 0000  (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07   HALF: 0000  (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08   HALF: 0000  (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09   HALF: 0000  (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10   HALF: 0000  (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11   HALF: 0000  (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12   HALF: 0000  (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13   HALF: 0000  (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14   HALF: 0000  (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15   HALF: 0x3c00  (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16   HALF: 0x3c00  (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17   HALF: 0x4000  (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18   HALF: 0x4000  (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19   HALF: 0x4200  (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20   HALF: 0x7bfe  (0x10 =>    INEXACT )
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21   HALF: 0x7bff  (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22   HALF: 0x7bff  (0x10 =>    INEXACT )
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23   HALF: 0x7bfd  (0x10 =>    INEXACT )
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24   HALF: 0x7bfe  (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25   HALF: 0x7bfe  (0x10 =>    INEXACT )
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26   HALF: 0x7bff  (0x10 =>    INEXACT )
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27   HALF: 0x7bff  (0x10 =>    INEXACT )
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28   HALF: 0x7bff  (0x10 =>    INEXACT )
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29   HALF: 0000  (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30   HALF: 0000  (0 => OK)
Converting single-precision to double-precision
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19 DOUBLE: 3.00000000000000000000e+00 / 0x004008000000000000 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23 DOUBLE: 6.54710000000000000000e+04 / 0x0040eff7e000000000 (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24 DOUBLE: 6.54720000000000000000e+04 / 0x0040eff80000000000 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25 DOUBLE: 6.54730000000000000000e+04 / 0x0040eff82000000000 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
Converting single-precision to fixed point 32 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      2/       0x2 (0 => OK)
15  INT32:      4/       0x4 (0 => OK)
15  INT32:     16/      0x10 (0 => OK)
15  INT32:    256/     0x100 (0 => OK)
15  INT32:  65536/   0x10000 (0 => OK)
15  INT32:  65536/   0x10000 (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      2/       0x2 (0 => OK)
16  INT32:      4/       0x4 (0 => OK)
16  INT32:     16/      0x10 (0 => OK)
16  INT32:    256/     0x100 (0 => OK)
16  INT32:  65536/   0x10000 (0 => OK)
16  INT32:  65536/   0x10000 (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      4/       0x4 (0 => OK)
17  INT32:      8/       0x8 (0 => OK)
17  INT32:     32/      0x20 (0 => OK)
17  INT32:    512/     0x200 (0 => OK)
17  INT32: 131072/   0x20000 (0 => OK)
17  INT32: 131072/   0x20000 (0 => OK)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      4/       0x4 (0 => OK)
18  INT32:      8/       0x8 (0 => OK)
18  INT32:     32/      0x20 (0 => OK)
18  INT32:    512/     0x200 (0 => OK)
18  INT32: 131072/   0x20000 (0 => OK)
18  INT32: 131072/   0x20000 (0 => OK)
18  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      6/       0x6 (0 => OK)
19  INT32:     12/       0xc (0 => OK)
19  INT32:     48/      0x30 (0 => OK)
19  INT32:    768/     0x300 (0 => OK)
19  INT32: 196608/   0x30000 (0 => OK)
19  INT32: 196608/   0x30000 (0 => OK)
19  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32: 131006/   0x1ffbe (0 => OK)
20  INT32: 262012/   0x3ff7c (0 => OK)
20  INT32: 1048048/   0xffdf0 (0 => OK)
20  INT32: 16768768/  0xffdf00 (0 => OK)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32: 131008/   0x1ffc0 (0 => OK)
21  INT32: 262016/   0x3ff80 (0 => OK)
21  INT32: 1048064/   0xffe00 (0 => OK)
21  INT32: 16769024/  0xffe000 (0 => OK)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32: 131010/   0x1ffc2 (0 => OK)
22  INT32: 262020/   0x3ff84 (0 => OK)
22  INT32: 1048080/   0xffe10 (0 => OK)
22  INT32: 16769280/  0xffe100 (0 => OK)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32: 130942/   0x1ff7e (0 => OK)
23  INT32: 261884/   0x3fefc (0 => OK)
23  INT32: 1047536/   0xffbf0 (0 => OK)
23  INT32: 16760576/  0xffbf00 (0 => OK)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32: 130944/   0x1ff80 (0 => OK)
24  INT32: 261888/   0x3ff00 (0 => OK)
24  INT32: 1047552/   0xffc00 (0 => OK)
24  INT32: 16760832/  0xffc000 (0 => OK)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32: 130946/   0x1ff82 (0 => OK)
25  INT32: 261892/   0x3ff04 (0 => OK)
25  INT32: 1047568/   0xffc10 (0 => OK)
25  INT32: 16761088/  0xffc100 (0 => OK)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32: 131070/   0x1fffe (0 => OK)
26  INT32: 262140/   0x3fffc (0 => OK)
26  INT32: 1048560/   0xffff0 (0 => OK)
26  INT32: 16776960/  0xffff00 (0 => OK)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32: 131070/   0x1fffe (0 => OK)
27  INT32: 262140/   0x3fffc (0 => OK)
27  INT32: 1048560/   0xffff0 (0 => OK)
27  INT32: 16776960/  0xffff00 (0 => OK)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32: 131070/   0x1fffe (0 => OK)
28  INT32: 262140/   0x3fffc (0 => OK)
28  INT32: 1048560/   0xffff0 (0 => OK)
28  INT32: 16776960/  0xffff00 (0 => OK)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting single-precision to fixed point 64 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT64:                    2/0x000000000000000002 (0 => OK)
15  INT64:                    4/0x000000000000000004 (0 => OK)
15  INT64:                   16/0x000000000000000010 (0 => OK)
15  INT64:                  256/0x000000000000000100 (0 => OK)
15  INT64:                65536/0x000000000000010000 (0 => OK)
15  INT64:           4294967296/0x000000000100000000 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT64:                    2/0x000000000000000002 (0 => OK)
16  INT64:                    4/0x000000000000000004 (0 => OK)
16  INT64:                   16/0x000000000000000010 (0 => OK)
16  INT64:                  256/0x000000000000000100 (0 => OK)
16  INT64:                65536/0x000000000000010000 (0 => OK)
16  INT64:           4294967296/0x000000000100000000 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT64:                    4/0x000000000000000004 (0 => OK)
17  INT64:                    8/0x000000000000000008 (0 => OK)
17  INT64:                   32/0x000000000000000020 (0 => OK)
17  INT64:                  512/0x000000000000000200 (0 => OK)
17  INT64:               131072/0x000000000000020000 (0 => OK)
17  INT64:           8589934592/0x000000000200000000 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT64:                    4/0x000000000000000004 (0 => OK)
18  INT64:                    8/0x000000000000000008 (0 => OK)
18  INT64:                   32/0x000000000000000020 (0 => OK)
18  INT64:                  512/0x000000000000000200 (0 => OK)
18  INT64:               131072/0x000000000000020000 (0 => OK)
18  INT64:           8589934592/0x000000000200000000 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT64:                    6/0x000000000000000006 (0 => OK)
19  INT64:                   12/0x00000000000000000c (0 => OK)
19  INT64:                   48/0x000000000000000030 (0 => OK)
19  INT64:                  768/0x000000000000000300 (0 => OK)
19  INT64:               196608/0x000000000000030000 (0 => OK)
19  INT64:          12884901888/0x000000000300000000 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT64:               131006/0x00000000000001ffbe (0 => OK)
20  INT64:               262012/0x00000000000003ff7c (0 => OK)
20  INT64:              1048048/0x0000000000000ffdf0 (0 => OK)
20  INT64:             16768768/0x000000000000ffdf00 (0 => OK)
20  INT64:           4292804608/0x0000000000ffdf0000 (0 => OK)
20  INT64:      281333242789888/0x000000ffdf00000000 (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT64:               131008/0x00000000000001ffc0 (0 => OK)
21  INT64:               262016/0x00000000000003ff80 (0 => OK)
21  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
21  INT64:             16769024/0x000000000000ffe000 (0 => OK)
21  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
21  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT64:               131010/0x00000000000001ffc2 (0 => OK)
22  INT64:               262020/0x00000000000003ff84 (0 => OK)
22  INT64:              1048080/0x0000000000000ffe10 (0 => OK)
22  INT64:             16769280/0x000000000000ffe100 (0 => OK)
22  INT64:           4292935680/0x0000000000ffe10000 (0 => OK)
22  INT64:      281341832724480/0x000000ffe100000000 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT64:               130942/0x00000000000001ff7e (0 => OK)
23  INT64:               261884/0x00000000000003fefc (0 => OK)
23  INT64:              1047536/0x0000000000000ffbf0 (0 => OK)
23  INT64:             16760576/0x000000000000ffbf00 (0 => OK)
23  INT64:           4290707456/0x0000000000ffbf0000 (0 => OK)
23  INT64:      281195803836416/0x000000ffbf00000000 (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT64:               130944/0x00000000000001ff80 (0 => OK)
24  INT64:               261888/0x00000000000003ff00 (0 => OK)
24  INT64:              1047552/0x0000000000000ffc00 (0 => OK)
24  INT64:             16760832/0x000000000000ffc000 (0 => OK)
24  INT64:           4290772992/0x0000000000ffc00000 (0 => OK)
24  INT64:      281200098803712/0x000000ffc000000000 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT64:               130946/0x00000000000001ff82 (0 => OK)
25  INT64:               261892/0x00000000000003ff04 (0 => OK)
25  INT64:              1047568/0x0000000000000ffc10 (0 => OK)
25  INT64:             16761088/0x000000000000ffc100 (0 => OK)
25  INT64:           4290838528/0x0000000000ffc10000 (0 => OK)
25  INT64:      281204393771008/0x000000ffc100000000 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT64:               131070/0x00000000000001fffe (0 => OK)
26  INT64:               262140/0x00000000000003fffc (0 => OK)
26  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
26  INT64:             16776960/0x000000000000ffff00 (0 => OK)
26  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
26  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT64:               131070/0x00000000000001fffe (0 => OK)
27  INT64:               262140/0x00000000000003fffc (0 => OK)
27  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
27  INT64:             16776960/0x000000000000ffff00 (0 => OK)
27  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
27  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT64:               131070/0x00000000000001fffe (0 => OK)
28  INT64:               262140/0x00000000000003fffc (0 => OK)
28  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
28  INT64:             16776960/0x000000000000ffff00 (0 => OK)
28  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
28  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
Converting single-precision to 32 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      1/       0x1 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      1/       0x1 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      2/       0x2 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      2/       0x2 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      3/       0x3 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32:  65503/    0xffdf (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32:  65504/    0xffe0 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32:  65505/    0xffe1 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32:  65471/    0xffbf (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32:  65472/    0xffc0 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32:  65473/    0xffc1 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32:  65535/    0xffff (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32:  65535/    0xffff (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32:  65535/    0xffff (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting single-precision to 64 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      1/       0x1 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      1/       0x1 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      2/       0x2 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      2/       0x2 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      3/       0x3 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32:  65503/    0xffdf (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32:  65504/    0xffe0 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32:  65505/    0xffe1 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32:  65471/    0xffbf (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32:  65472/    0xffc0 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32:  65473/    0xffc1 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32:  65535/    0xffff (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32:  65535/    0xffff (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32:  65535/    0xffff (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting double-precision to half-precision
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00   HALF: 0x7f00  (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01   HALF: 0xfe00  (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02   HALF: 0xfc00  (0 => OK)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
04 DOUBLE: -2.25369976746044681213e+307 / 0x00ffc00bffffffffff (0 => OK)
04   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
07 DOUBLE: -1.11100000000000007530e+31 / 0x00c661874b135ff654 (0 => OK)
07   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09   HALF: 0xc000  (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10   HALF: 0xbc00  (0 => OK)
11 DOUBLE: -2.22507385850720138310e-308 / 0x008010000000000000 (0 => OK)
11   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13   HALF: 0000  (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17   HALF: 0x3ff  (0x18 =>  UNDERFLOW  INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18   HALF: 0x400  (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19   HALF: 0x3c00  (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20   HALF: 0x3c01  (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24   HALF: 0x3c00  (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25   HALF: 0x4000  (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26   HALF: 0x416f  (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27   HALF: 0x4248  (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28   HALF: 0x7bfe  (0x10 =>    INEXACT )
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29   HALF: 0x7bff  (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30   HALF: 0x7bff  (0x10 =>    INEXACT )
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39   HALF: 0x7c00  (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40   HALF: 0x7e00  (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41   HALF: 0x7e00  (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42   HALF: 0x7f00  (0x1 =>     INVALID)
Converting double-precision to single-precision
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00 SINGLE: nan / 0x7fe00000  (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01 SINGLE: -nan / 0xffc00000  (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02 SINGLE: -inf / 0xff800000  (0 => OK)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03 SINGLE: -inf / 0xff800000  (0x14 => OVERFLOW   INEXACT )
04 DOUBLE: -2.25369976746044681213e+307 / 0x00ffc00bffffffffff (0 => OK)
04 SINGLE: -inf / 0xff800000  (0x14 => OVERFLOW   INEXACT )
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05 SINGLE: -3.40282346638528859812e+38 / 0xff7fffff  (0 => OK)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06 SINGLE: -3.40282346638528859812e+38 / 0xff7fffff  (0 => OK)
07 DOUBLE: -1.11100000000000007530e+31 / 0x00c661874b135ff654 (0 => OK)
07 SINGLE: -1.11100004769645909791e+31 / 0xf30c3a59  (0x10 =>    INEXACT )
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08 SINGLE: -1.11100003258488635273e+30 / 0xf1605d5b  (0x10 =>    INEXACT )
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09 SINGLE: -2.00000000000000000000e+00 / 0xc0000000  (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10 SINGLE: -1.00000000000000000000e+00 / 0xbf800000  (0 => OK)
11 DOUBLE: -2.22507385850720138310e-308 / 0x008010000000000000 (0 => OK)
11 SINGLE: -1.40129846432481707093e-45 / 0x80000001  (0x18 =>  UNDERFLOW  INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12 SINGLE: -1.17549435082228750797e-38 / 0x80800000  (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14 SINGLE: 1.17549435082228750796e-38 / 0x00800000  (0 => OK)
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15 SINGLE: 2.98023223876953125000e-08 / 0x33000000  (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16 SINGLE: 5.96045985901128005934e-08 / 0x337ffff3  (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17 SINGLE: 6.09755988989491015672e-05 / 0x387fc00d  (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18 SINGLE: 6.10351999057456851005e-05 / 0x38800006  (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20 SINGLE: 1.00097656250000000000e+00 / 0x3f802000  (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26 SINGLE: 2.71828174591064453125e+00 / 0x402df854  (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27 SINGLE: 3.14159250259399414062e+00 / 0x40490fda  (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31 SINGLE: 1.31007000000000000000e+05 / 0x47ffdf80  (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32 SINGLE: 1.31008000000000000000e+05 / 0x47ffe000  (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33 SINGLE: 1.31009000000000000000e+05 / 0x47ffe080  (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34 SINGLE: 2.14748352000000000000e+09 / 0x4effffff  (0x10 =>    INEXACT )
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35 SINGLE: 3.40282346638528859811e+38 / 0x7f7fffff  (0 => OK)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36 SINGLE: 3.40282346638528859811e+38 / 0x7f7fffff  (0 => OK)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38 SINGLE: 3.40282346638528859811e+38 / 0x7f7fffff  (0x14 => OVERFLOW   INEXACT )
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39 SINGLE: inf / 0x7f800000  (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40 SINGLE: nan / 0x7fc00000  (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41 SINGLE: nan / 0x7fc00000  (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42 SINGLE: nan / 0x7fe00000  (0x1 =>     INVALID)
Converting double-precision to fixed point 32 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681213e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007530e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 DOUBLE: -2.22507385850720138310e-308 / 0x008010000000000000 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT32:     -7/0xfffffff9 (0x10 =>    INEXACT )
18  INT32:    -14/0xfffffff2 (0x10 =>    INEXACT )
18  INT32:    -58/0xffffffc6 (0x10 =>    INEXACT )
18  INT32:   -936/0xfffffc58 (0x10 =>    INEXACT )
18  INT32: -239739/0xfffc5785 (0x10 =>    INEXACT )
18  INT32: -239739/0xfffc5785 (0x10 =>    INEXACT )
18  INT32: -2147483648/0x80000000 (0x11 =>    INEXACT INVALID)
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:    -66/0xffffffbe (0x10 =>    INEXACT )
23  INT32:    -66/0xffffffbe (0x10 =>    INEXACT )
23  INT32: -4331784/0xffbde6f8 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
Converting double-precision to fixed point 64 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681213e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007530e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
09  INT64:                   -8/0x00fffffffffffffff8 (0 => OK)
09  INT64:                  -32/0x00ffffffffffffffe0 (0 => OK)
09  INT64:                 -512/0x00fffffffffffffe00 (0 => OK)
09  INT64:              -131072/0x00fffffffffffe0000 (0 => OK)
09  INT64:          -8589934592/0x00fffffffe00000000 (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
10  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
10  INT64:                  -16/0x00fffffffffffffff0 (0 => OK)
10  INT64:                 -256/0x00ffffffffffffff00 (0 => OK)
10  INT64:               -65536/0x00ffffffffffff0000 (0 => OK)
10  INT64:          -4294967296/0x00ffffffff00000000 (0 => OK)
11 DOUBLE: -2.22507385850720138310e-308 / 0x008010000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                  128/0x000000000000000080 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                  255/0x0000000000000000ff (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    3/0x000000000000000003 (0x10 =>    INEXACT )
17  INT64:               261888/0x00000000000003ff00 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    4/0x000000000000000004 (0x10 =>    INEXACT )
18  INT64:               262144/0x000000000000040000 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT64:                    2/0x000000000000000002 (0 => OK)
19  INT64:                    4/0x000000000000000004 (0 => OK)
19  INT64:                   16/0x000000000000000010 (0 => OK)
19  INT64:                  256/0x000000000000000100 (0 => OK)
19  INT64:                65536/0x000000000000010000 (0 => OK)
19  INT64:           4294967296/0x000000000100000000 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT64:                    2/0x000000000000000002 (0x10 =>    INEXACT )
20  INT64:                    4/0x000000000000000004 (0x10 =>    INEXACT )
20  INT64:                   16/0x000000000000000010 (0x10 =>    INEXACT )
20  INT64:                  256/0x000000000000000100 (0x10 =>    INEXACT )
20  INT64:                65600/0x000000000000010040 (0x10 =>    INEXACT )
20  INT64:           4299161600/0x000000000100400000 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT64:                    2/0x000000000000000002 (0 => OK)
24  INT64:                    4/0x000000000000000004 (0 => OK)
24  INT64:                   16/0x000000000000000010 (0 => OK)
24  INT64:                  256/0x000000000000000100 (0 => OK)
24  INT64:                65536/0x000000000000010000 (0 => OK)
24  INT64:           4294967296/0x000000000100000000 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT64:                    4/0x000000000000000004 (0 => OK)
25  INT64:                    8/0x000000000000000008 (0 => OK)
25  INT64:                   32/0x000000000000000020 (0 => OK)
25  INT64:                  512/0x000000000000000200 (0 => OK)
25  INT64:               131072/0x000000000000020000 (0 => OK)
25  INT64:           8589934592/0x000000000200000000 (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT64:                    5/0x000000000000000005 (0x10 =>    INEXACT )
26  INT64:                   10/0x00000000000000000a (0x10 =>    INEXACT )
26  INT64:                   43/0x00000000000000002b (0x10 =>    INEXACT )
26  INT64:                  695/0x0000000000000002b7 (0x10 =>    INEXACT )
26  INT64:               178145/0x00000000000002b7e1 (0x10 =>    INEXACT )
26  INT64:          11674931554/0x0000000002b7e15162 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT64:                    6/0x000000000000000006 (0x10 =>    INEXACT )
27  INT64:                   12/0x00000000000000000c (0x10 =>    INEXACT )
27  INT64:                   50/0x000000000000000032 (0x10 =>    INEXACT )
27  INT64:                  804/0x000000000000000324 (0x10 =>    INEXACT )
27  INT64:               205887/0x00000000000003243f (0x10 =>    INEXACT )
27  INT64:          13493037704/0x0000000003243f6a88 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT64:               131006/0x00000000000001ffbe (0 => OK)
28  INT64:               262012/0x00000000000003ff7c (0 => OK)
28  INT64:              1048048/0x0000000000000ffdf0 (0 => OK)
28  INT64:             16768768/0x000000000000ffdf00 (0 => OK)
28  INT64:           4292804608/0x0000000000ffdf0000 (0 => OK)
28  INT64:      281333242789888/0x000000ffdf00000000 (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT64:               131008/0x00000000000001ffc0 (0 => OK)
29  INT64:               262016/0x00000000000003ff80 (0 => OK)
29  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
29  INT64:             16769024/0x000000000000ffe000 (0 => OK)
29  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
29  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT64:               131010/0x00000000000001ffc2 (0 => OK)
30  INT64:               262020/0x00000000000003ff84 (0 => OK)
30  INT64:              1048080/0x0000000000000ffe10 (0 => OK)
30  INT64:             16769280/0x000000000000ffe100 (0 => OK)
30  INT64:           4292935680/0x0000000000ffe10000 (0 => OK)
30  INT64:      281341832724480/0x000000ffe100000000 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT64:               262014/0x00000000000003ff7e (0 => OK)
31  INT64:               524028/0x00000000000007fefc (0 => OK)
31  INT64:              2096112/0x0000000000001ffbf0 (0 => OK)
31  INT64:             33537792/0x000000000001ffbf00 (0 => OK)
31  INT64:           8585674752/0x0000000001ffbf0000 (0 => OK)
31  INT64:      562670780547072/0x000001ffbf00000000 (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT64:               262016/0x00000000000003ff80 (0 => OK)
32  INT64:               524032/0x00000000000007ff00 (0 => OK)
32  INT64:              2096128/0x0000000000001ffc00 (0 => OK)
32  INT64:             33538048/0x000000000001ffc000 (0 => OK)
32  INT64:           8585740288/0x0000000001ffc00000 (0 => OK)
32  INT64:      562675075514368/0x000001ffc000000000 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT64:               262018/0x00000000000003ff82 (0 => OK)
33  INT64:               524036/0x00000000000007ff04 (0 => OK)
33  INT64:              2096144/0x0000000000001ffc10 (0 => OK)
33  INT64:             33538304/0x000000000001ffc100 (0 => OK)
33  INT64:           8585805824/0x0000000001ffc10000 (0 => OK)
33  INT64:      562679370481664/0x000001ffc100000000 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT64:           4294967294/0x0000000000fffffffe (0 => OK)
34  INT64:           8589934588/0x0000000001fffffffc (0 => OK)
34  INT64:          34359738352/0x0000000007fffffff0 (0 => OK)
34  INT64:         549755813632/0x000000007fffffff00 (0 => OK)
34  INT64:      140737488289792/0x0000007fffffff0000 (0 => OK)
34  INT64:  9223372032559808512/0x007fffffff00000000 (0 => OK)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting double-precision to 32 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681213e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007530e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT32:     -2/0xfffffffe (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT32:     -1/0xffffffff (0 => OK)
11 DOUBLE: -2.22507385850720138310e-308 / 0x008010000000000000 (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12  INT32:      0/         0 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14  INT32:      0/         0 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT32:      0/         0 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT32:      0/         0 (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT32:      0/         0 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT32:      0/         0 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT32:      1/       0x1 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT32:      1/       0x1 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT32:      0/         0 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT32:      0/         0 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT32:      0/         0 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT32:      1/       0x1 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT32:      2/       0x2 (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT32:      2/       0x2 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT32:      3/       0x3 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT32:  65503/    0xffdf (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT32:  65504/    0xffe0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT32:  65505/    0xffe1 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT32: 131007/   0x1ffbf (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT32: 131008/   0x1ffc0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT32: 131009/   0x1ffc1 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT32: 2147483647/0x7fffffff (0 => OK)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37  INT32:      0/         0 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT32:      0/         0 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT32:      0/         0 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT32:      0/         0 (0x1 =>     INVALID)
Converting double-precision to 64 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681213e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007530e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
11 DOUBLE: -2.22507385850720138310e-308 / 0x008010000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT64:                    1/0x000000000000000001 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT64:                    1/0x000000000000000001 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT64:                    1/0x000000000000000001 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT64:                    2/0x000000000000000002 (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT64:                    2/0x000000000000000002 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT64:                    3/0x000000000000000003 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT64:                65503/0x00000000000000ffdf (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT64:                65504/0x00000000000000ffe0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT64:                65505/0x00000000000000ffe1 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT64:               131007/0x00000000000001ffbf (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT64:               131008/0x00000000000001ffc0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT64:               131009/0x00000000000001ffc1 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT64:           2147483647/0x00000000007fffffff (0 => OK)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to double-precision
00   HALF: 0xffff  (0 => OK)
00 DOUBLE: -nan / 0x00fffffc0000000000 (0 => OK)
01   HALF: 0xfcff  (0 => OK)
01 DOUBLE: -nan / 0x00fffbfc0000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02 DOUBLE: -nan / 0x00fff8040000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
04   HALF: 0xfbff  (0 => OK)
04 DOUBLE: -6.55040000000000000000e+04 / 0x00c0effc0000000000 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05 DOUBLE: -6.54720000000000000000e+04 / 0x00c0eff80000000000 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
08   HALF: 0x8001  (0 => OK)
08 DOUBLE: -5.96046447753906250000e-08 / 0x00be70000000000000 (0 => OK)
09   HALF: 0x8000  (0 => OK)
09 DOUBLE: -0.00000000000000000000e+00 / 0x008000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11 DOUBLE: 5.96046447753906250000e-08 / 0x003e70000000000000 (0 => OK)
12   HALF: 0x3c00  (0 => OK)
12 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13 DOUBLE: 6.54720000000000000000e+04 / 0x0040eff80000000000 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
16   HALF: 0x7c01  (0 => OK)
16 DOUBLE: nan / 0x007ff8040000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17 DOUBLE: nan / 0x007ffbfc0000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18 DOUBLE: nan / 0x007ffffc0000000000 (0 => OK)
Converting half-precision to single-precision
00   HALF: 0xffff  (0 => OK)
00 SINGLE: -nan / 0xffffe000  (0 => OK)
01   HALF: 0xfcff  (0 => OK)
01 SINGLE: -nan / 0xffdfe000  (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02 SINGLE: -nan / 0xffc02000  (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03 SINGLE: -inf / 0xff800000  (0 => OK)
04   HALF: 0xfbff  (0 => OK)
04 SINGLE: -6.55040000000000000000e+04 / 0xc77fe000  (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05 SINGLE: -6.54720000000000000000e+04 / 0xc77fc000  (0 => OK)
06   HALF: 0xc000  (0 => OK)
06 SINGLE: -2.00000000000000000000e+00 / 0xc0000000  (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07 SINGLE: -1.00000000000000000000e+00 / 0xbf800000  (0 => OK)
08   HALF: 0x8001  (0 => OK)
08 SINGLE: -5.96046447753906250000e-08 / 0xb3800000  (0 => OK)
09   HALF: 0x8000  (0 => OK)
09 SINGLE: -0.00000000000000000000e+00 / 0x80000000  (0 => OK)
10   HALF: 0000  (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11   HALF: 0x01  (0 => OK)
11 SINGLE: 5.96046447753906250000e-08 / 0x33800000  (0 => OK)
12   HALF: 0x3c00  (0 => OK)
12 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15 SINGLE: inf / 0x7f800000  (0 => OK)
16   HALF: 0x7c01  (0 => OK)
16 SINGLE: nan / 0x7fc02000  (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17 SINGLE: nan / 0x7fdfe000  (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18 SINGLE: nan / 0x7fffe000  (0 => OK)
Converting half-precision to fixed point 64 bit int
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:              -131008/0x00fffffffffffe0040 (0 => OK)
04  INT64:              -262016/0x00fffffffffffc0080 (0 => OK)
04  INT64:             -1048064/0x00fffffffffff00200 (0 => OK)
04  INT64:            -16769024/0x00ffffffffff002000 (0 => OK)
04  INT64:          -4292870144/0x00ffffffff00200000 (0 => OK)
04  INT64:     -281337537757184/0x00ffff002000000000 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:              -130944/0x00fffffffffffe0080 (0 => OK)
05  INT64:              -261888/0x00fffffffffffc0100 (0 => OK)
05  INT64:             -1047552/0x00fffffffffff00400 (0 => OK)
05  INT64:            -16760832/0x00ffffffffff004000 (0 => OK)
05  INT64:          -4290772992/0x00ffffffff00400000 (0 => OK)
05  INT64:     -281200098803712/0x00ffff004000000000 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
06  INT64:                   -8/0x00fffffffffffffff8 (0 => OK)
06  INT64:                  -32/0x00ffffffffffffffe0 (0 => OK)
06  INT64:                 -512/0x00fffffffffffffe00 (0 => OK)
06  INT64:              -131072/0x00fffffffffffe0000 (0 => OK)
06  INT64:          -8589934592/0x00fffffffe00000000 (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
07  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
07  INT64:                  -16/0x00fffffffffffffff0 (0 => OK)
07  INT64:                 -256/0x00ffffffffffffff00 (0 => OK)
07  INT64:               -65536/0x00ffffffffffff0000 (0 => OK)
07  INT64:          -4294967296/0x00ffffffff00000000 (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                 -256/0x00ffffffffffffff00 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                  256/0x000000000000000100 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    2/0x000000000000000002 (0 => OK)
12  INT64:                    4/0x000000000000000004 (0 => OK)
12  INT64:                   16/0x000000000000000010 (0 => OK)
12  INT64:                  256/0x000000000000000100 (0 => OK)
12  INT64:                65536/0x000000000000010000 (0 => OK)
12  INT64:           4294967296/0x000000000100000000 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:               130944/0x00000000000001ff80 (0 => OK)
13  INT64:               261888/0x00000000000003ff00 (0 => OK)
13  INT64:              1047552/0x0000000000000ffc00 (0 => OK)
13  INT64:             16760832/0x000000000000ffc000 (0 => OK)
13  INT64:           4290772992/0x0000000000ffc00000 (0 => OK)
13  INT64:      281200098803712/0x000000ffc000000000 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:               131008/0x00000000000001ffc0 (0 => OK)
14  INT64:               262016/0x00000000000003ff80 (0 => OK)
14  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
14  INT64:             16769024/0x000000000000ffe000 (0 => OK)
14  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
14  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to fixed point 32 bit int
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT32:     -4/0xfffffffc (0x10 =>    INEXACT )
06  INT32:     -8/0xfffffff8 (0x10 =>    INEXACT )
06  INT32:    -32/0xffffffe0 (0x10 =>    INEXACT )
06  INT32:   -515/0xfffffdfd (0x10 =>    INEXACT )
06  INT32: -131840/0xfffdfd00 (0x10 =>    INEXACT )
06  INT32: -131840/0xfffdfd00 (0x10 =>    INEXACT )
06  INT32: -2147483648/0x80000000 (0x11 =>    INEXACT INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:     -2/0xfffffffe (0x10 =>    INEXACT )
07  INT32:   -514/0xfffffdfe (0x10 =>    INEXACT )
07  INT32:   -514/0xfffffdfe (0x10 =>    INEXACT )
07  INT32: -33746944/0xfdfd1000 (0x10 =>    INEXACT )
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      2/       0x2 (0x10 =>    INEXACT )
12  INT32:    512/     0x200 (0x10 =>    INEXACT )
12  INT32:    512/     0x200 (0x10 =>    INEXACT )
12  INT32: 33615872/ 0x200f000 (0x10 =>    INEXACT )
13   HALF: 0x7bfe  (0 => OK)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14   HALF: 0x7bff  (0 => OK)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15   HALF: 0x7c00  (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 64 bit int
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:               -65504/0x00ffffffffffff0020 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:               -65472/0x00ffffffffffff0040 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    1/0x000000000000000001 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:                65472/0x00000000000000ffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:                65504/0x00000000000000ffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to 32 bit int
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32:      0/         0 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32: -65504/0xffff0020 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT32: -65472/0xffff0040 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT32:     -2/0xfffffffe (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT32:     -1/0xffffffff (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      1/       0x1 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT32:  65472/    0xffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT32:  65504/    0xffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32:      0/         0 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32:      0/         0 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 64 bit uint
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    1/0x000000000000000001 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:                65472/0x00000000000000ffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:                65504/0x00000000000000ffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:                   -1/0x00ffffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to 32 bit uint
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32:      0/         0 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32:      0/         0 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32:      0/         0 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT32:      0/         0 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT32:      0/         0 (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT32:      0/         0 (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      1/       0x1 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT32:  65472/    0xffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT32:  65504/    0xffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT32:     -1/0xffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32:      0/         0 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32:      0/         0 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 16 bit uint
00   HALF: 0xffff  (0 => OK)
00   HALF: 0000  (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01   HALF: 0000  (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02   HALF: 0000  (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03   HALF: 0000  (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04   HALF: 0000  (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05   HALF: 0000  (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06   HALF: 0000  (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07   HALF: 0000  (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08   HALF: 0000  (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09   HALF: 0000  (0 => OK)
10   HALF: 0000  (0 => OK)
10   HALF: 0000  (0 => OK)
11   HALF: 0x01  (0 => OK)
11   HALF: 0000  (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12   HALF: 0x01  (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13   HALF: 0xffc0  (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14   HALF: 0xffe0  (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15   HALF: 0xffff  (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16   HALF: 0000  (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17   HALF: 0000  (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18   HALF: 0000  (0x1 =>     INVALID)
Converting signed int32 to half-precision
00  INT32:      0/         0 (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT32:      1/       0x1 (0 => OK)
01   HALF: 0x3c00  (0 => OK)
02  INT32:     16/      0x10 (0 => OK)
02   HALF: 0x4c00  (0 => OK)
03  INT32:    256/     0x100 (0 => OK)
03   HALF: 0x5c00  (0 => OK)
04  INT32:   4096/    0x1000 (0 => OK)
04   HALF: 0x6c00  (0 => OK)
05  INT32:  65503/    0xffdf (0 => OK)
05   HALF: 0x7bfe  (0x10 =>    INEXACT )
06  INT32:  65504/    0xffe0 (0 => OK)
06   HALF: 0x7bff  (0 => OK)
07  INT32:  65505/    0xffe1 (0 => OK)
07   HALF: 0x7bff  (0x10 =>    INEXACT )
08  INT32:  65535/    0xffff (0 => OK)
08   HALF: 0x7bff  (0x10 =>    INEXACT )
09  INT32:  65536/   0x10000 (0 => OK)
09   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10  INT32: 1048576/  0x100000 (0 => OK)
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11  INT32: 16777215/  0xffffff (0 => OK)
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12  INT32: 16777216/ 0x1000000 (0 => OK)
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13  INT32: 16777217/ 0x1000001 (0 => OK)
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14  INT32: 268435456/0x10000000 (0 => OK)
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15  INT32: 536870912/0x20000000 (0 => OK)
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16  INT32: 1073741824/0x40000000 (0 => OK)
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
17  INT32: -2147483648/0x80000000 (0 => OK)
17   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
18  INT32: -2147483647/0x80000001 (0 => OK)
18   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
19  INT32: -2147483617/0x8000001f (0 => OK)
19   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
20  INT32: -2147483585/0x8000003f (0 => OK)
20   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
21  INT32: -2147483521/0x8000007f (0 => OK)
21   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
22  INT32: -2147483393/0x800000ff (0 => OK)
22   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
23  INT32: -2147483137/0x800001ff (0 => OK)
23   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
24  INT32: -2147482849/0x8000031f (0 => OK)
24   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25  INT32: -2147481601/0x800007ff (0 => OK)
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26  INT32: -2147479553/0x80000fff (0 => OK)
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27  INT32: -2147418113/0x8000ffff (0 => OK)
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28  INT32: -2146435073/0x800fffff (0 => OK)
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29  INT32: -2130706433/0x80ffffff (0 => OK)
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30  INT32: -1879048193/0x8fffffff (0 => OK)
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31  INT32: -1610612737/0x9fffffff (0 => OK)
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32  INT32: -1342177281/0xafffffff (0 => OK)
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33  INT32: -1073741825/0xbfffffff (0 => OK)
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34  INT32: -805306369/0xcfffffff (0 => OK)
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35  INT32: -536870913/0xdfffffff (0 => OK)
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36  INT32: -268435457/0xefffffff (0 => OK)
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37  INT32:     -1/0xffffffff (0 => OK)
37   HALF: 0xbc00  (0 => OK)
38  INT32:     -2/0xfffffffe (0 => OK)
38   HALF: 0xc000  (0 => OK)
39  INT32:     -3/0xfffffffd (0 => OK)
39   HALF: 0xc200  (0 => OK)
40  INT32:     -4/0xfffffffc (0 => OK)
40   HALF: 0xc400  (0 => OK)
41  INT32:     -8/0xfffffff8 (0 => OK)
41   HALF: 0xc800  (0 => OK)
42  INT32:    -16/0xfffffff0 (0 => OK)
42   HALF: 0xcc00  (0 => OK)
43  INT32:    -32/0xffffffe0 (0 => OK)
43   HALF: 0xd000  (0 => OK)
44  INT32:    -48/0xffffffd0 (0 => OK)
44   HALF: 0xd200  (0 => OK)
45  INT32:    -64/0xffffffc0 (0 => OK)
45   HALF: 0xd400  (0 => OK)
46  INT32:   -128/0xffffff80 (0 => OK)
46   HALF: 0xd800  (0 => OK)
47  INT32:   -512/0xfffffe00 (0 => OK)
47   HALF: 0xe000  (0 => OK)
48  INT32:   -768/0xfffffd00 (0 => OK)
48   HALF: 0xe200  (0 => OK)
49  INT32:  -1024/0xfffffc00 (0 => OK)
49   HALF: 0xe400  (0 => OK)
50  INT32:  -2048/0xfffff800 (0 => OK)
50   HALF: 0xe800  (0 => OK)
51  INT32:  -4096/0xfffff000 (0 => OK)
51   HALF: 0xec00  (0 => OK)
52  INT32:  -8192/0xffffe000 (0 => OK)
52   HALF: 0xf000  (0 => OK)
53  INT32: -12288/0xffffd000 (0 => OK)
53   HALF: 0xf200  (0 => OK)
54  INT32: -16384/0xffffc000 (0 => OK)
54   HALF: 0xf400  (0 => OK)
55  INT32: -32768/0xffff8000 (0 => OK)
55   HALF: 0xf800  (0 => OK)
56  INT32: -524288/0xfff80000 (0 => OK)
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57  INT32: -8388608/0xff800000 (0 => OK)
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58  INT32: -16777216/0xff000000 (0 => OK)
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
59  INT32: -33554432/0xfe000000 (0 => OK)
59   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
60  INT32: -50331648/0xfd000000 (0 => OK)
60   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
61  INT32: -67108864/0xfc000000 (0 => OK)
61   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
62  INT32: -134217728/0xf8000000 (0 => OK)
62   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
63  INT32: -268435456/0xf0000000 (0 => OK)
63   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
64  INT32: -536870912/0xe0000000 (0 => OK)
64   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
65  INT32: -805306368/0xd0000000 (0 => OK)
65   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
66  INT32: -1073741824/0xc0000000 (0 => OK)
66   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
67  INT32: -2147483648/0x80000000 (0 => OK)
67   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
Converting fixed point int32 to half-precision
00  INT32:      0/         0 (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT32:      1/       0x1 (0 => OK)
01   HALF: 0x3800  (0 => OK)
01   HALF: 0x3400  (0 => OK)
01   HALF: 0x2c00  (0 => OK)
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02  INT32:     16/      0x10 (0 => OK)
02   HALF: 0x4800  (0 => OK)
02   HALF: 0x4400  (0 => OK)
02   HALF: 0x3c00  (0 => OK)
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03  INT32:    256/     0x100 (0 => OK)
03   HALF: 0x5800  (0 => OK)
03   HALF: 0x5400  (0 => OK)
03   HALF: 0x4c00  (0 => OK)
03   HALF: 0x01  (0 => OK)
04  INT32:   4096/    0x1000 (0 => OK)
04   HALF: 0x6800  (0 => OK)
04   HALF: 0x6400  (0 => OK)
04   HALF: 0x5c00  (0 => OK)
04   HALF: 0x10  (0 => OK)
05  INT32:  65503/    0xffdf (0 => OK)
05   HALF: 0x77fe  (0x10 =>    INEXACT )
05   HALF: 0x73fe  (0x10 =>    INEXACT )
05   HALF: 0x6bfe  (0x10 =>    INEXACT )
05   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
06  INT32:  65504/    0xffe0 (0 => OK)
06   HALF: 0x77ff  (0 => OK)
06   HALF: 0x73ff  (0 => OK)
06   HALF: 0x6bff  (0 => OK)
06   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
07  INT32:  65505/    0xffe1 (0 => OK)
07   HALF: 0x77ff  (0x10 =>    INEXACT )
07   HALF: 0x73ff  (0x10 =>    INEXACT )
07   HALF: 0x6bff  (0x10 =>    INEXACT )
07   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
08  INT32:  65535/    0xffff (0 => OK)
08   HALF: 0x77ff  (0x10 =>    INEXACT )
08   HALF: 0x73ff  (0x10 =>    INEXACT )
08   HALF: 0x6bff  (0x10 =>    INEXACT )
08   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
09  INT32:  65536/   0x10000 (0 => OK)
09   HALF: 0x7800  (0 => OK)
09   HALF: 0x7400  (0 => OK)
09   HALF: 0x6c00  (0 => OK)
09   HALF: 0x100  (0 => OK)
10  INT32: 1048576/  0x100000 (0 => OK)
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0xc00  (0x14 => OVERFLOW   INEXACT )
11  INT32: 16777215/  0xffffff (0 => OK)
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x1bff  (0x14 => OVERFLOW   INEXACT )
12  INT32: 16777216/ 0x1000000 (0 => OK)
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
13  INT32: 16777217/ 0x1000001 (0 => OK)
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
14  INT32: 268435456/0x10000000 (0 => OK)
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
15  INT32: 536870912/0x20000000 (0 => OK)
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
16  INT32: 1073741824/0x40000000 (0 => OK)
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
17  INT32: -2147483648/0x80000000 (0 => OK)
17   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
18  INT32: -2147483647/0x80000001 (0 => OK)
18   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
19  INT32: -2147483617/0x8000001f (0 => OK)
19   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
20  INT32: -2147483585/0x8000003f (0 => OK)
20   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
21  INT32: -2147483521/0x8000007f (0 => OK)
21   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
22  INT32: -2147483393/0x800000ff (0 => OK)
22   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
23  INT32: -2147483137/0x800001ff (0 => OK)
23   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
24  INT32: -2147482849/0x8000031f (0 => OK)
24   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
25  INT32: -2147481601/0x800007ff (0 => OK)
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
26  INT32: -2147479553/0x80000fff (0 => OK)
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
27  INT32: -2147418113/0x8000ffff (0 => OK)
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
28  INT32: -2146435073/0x800fffff (0 => OK)
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
29  INT32: -2130706433/0x80ffffff (0 => OK)
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xb7f1  (0x14 => OVERFLOW   INEXACT )
30  INT32: -1879048193/0x8fffffff (0 => OK)
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xb701  (0x14 => OVERFLOW   INEXACT )
31  INT32: -1610612737/0x9fffffff (0 => OK)
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xb601  (0x14 => OVERFLOW   INEXACT )
32  INT32: -1342177281/0xafffffff (0 => OK)
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xb501  (0x14 => OVERFLOW   INEXACT )
33  INT32: -1073741825/0xbfffffff (0 => OK)
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xb401  (0x14 => OVERFLOW   INEXACT )
34  INT32: -805306369/0xcfffffff (0 => OK)
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xb201  (0x14 => OVERFLOW   INEXACT )
35  INT32: -536870913/0xdfffffff (0 => OK)
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xb001  (0x14 => OVERFLOW   INEXACT )
36  INT32: -268435457/0xefffffff (0 => OK)
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xac01  (0x14 => OVERFLOW   INEXACT )
37  INT32:     -1/0xffffffff (0 => OK)
37   HALF: 0xb800  (0 => OK)
37   HALF: 0xb400  (0 => OK)
37   HALF: 0xac00  (0 => OK)
37   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
38  INT32:     -2/0xfffffffe (0 => OK)
38   HALF: 0xbc00  (0 => OK)
38   HALF: 0xb800  (0 => OK)
38   HALF: 0xb000  (0 => OK)
38   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
39  INT32:     -3/0xfffffffd (0 => OK)
39   HALF: 0xbe00  (0 => OK)
39   HALF: 0xba00  (0 => OK)
39   HALF: 0xb200  (0 => OK)
39   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
40  INT32:     -4/0xfffffffc (0 => OK)
40   HALF: 0xc000  (0 => OK)
40   HALF: 0xbc00  (0 => OK)
40   HALF: 0xb400  (0 => OK)
40   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
41  INT32:     -8/0xfffffff8 (0 => OK)
41   HALF: 0xc400  (0 => OK)
41   HALF: 0xc000  (0 => OK)
41   HALF: 0xb800  (0 => OK)
41   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
42  INT32:    -16/0xfffffff0 (0 => OK)
42   HALF: 0xc800  (0 => OK)
42   HALF: 0xc400  (0 => OK)
42   HALF: 0xbc00  (0 => OK)
42   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
43  INT32:    -32/0xffffffe0 (0 => OK)
43   HALF: 0xcc00  (0 => OK)
43   HALF: 0xc800  (0 => OK)
43   HALF: 0xc000  (0 => OK)
43   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
44  INT32:    -48/0xffffffd0 (0 => OK)
44   HALF: 0xce00  (0 => OK)
44   HALF: 0xca00  (0 => OK)
44   HALF: 0xc200  (0 => OK)
44   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
45  INT32:    -64/0xffffffc0 (0 => OK)
45   HALF: 0xd000  (0 => OK)
45   HALF: 0xcc00  (0 => OK)
45   HALF: 0xc400  (0 => OK)
45   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
46  INT32:   -128/0xffffff80 (0 => OK)
46   HALF: 0xd400  (0 => OK)
46   HALF: 0xd000  (0 => OK)
46   HALF: 0xc800  (0 => OK)
46   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
47  INT32:   -512/0xfffffe00 (0 => OK)
47   HALF: 0xdc00  (0 => OK)
47   HALF: 0xd800  (0 => OK)
47   HALF: 0xd000  (0 => OK)
47   HALF: 0x8002  (0 => OK)
48  INT32:   -768/0xfffffd00 (0 => OK)
48   HALF: 0xde00  (0 => OK)
48   HALF: 0xda00  (0 => OK)
48   HALF: 0xd200  (0 => OK)
48   HALF: 0x8003  (0 => OK)
49  INT32:  -1024/0xfffffc00 (0 => OK)
49   HALF: 0xe000  (0 => OK)
49   HALF: 0xdc00  (0 => OK)
49   HALF: 0xd400  (0 => OK)
49   HALF: 0x8004  (0 => OK)
50  INT32:  -2048/0xfffff800 (0 => OK)
50   HALF: 0xe400  (0 => OK)
50   HALF: 0xe000  (0 => OK)
50   HALF: 0xd800  (0 => OK)
50   HALF: 0x8008  (0 => OK)
51  INT32:  -4096/0xfffff000 (0 => OK)
51   HALF: 0xe800  (0 => OK)
51   HALF: 0xe400  (0 => OK)
51   HALF: 0xdc00  (0 => OK)
51   HALF: 0x8010  (0 => OK)
52  INT32:  -8192/0xffffe000 (0 => OK)
52   HALF: 0xec00  (0 => OK)
52   HALF: 0xe800  (0 => OK)
52   HALF: 0xe000  (0 => OK)
52   HALF: 0x8020  (0 => OK)
53  INT32: -12288/0xffffd000 (0 => OK)
53   HALF: 0xee00  (0 => OK)
53   HALF: 0xea00  (0 => OK)
53   HALF: 0xe200  (0 => OK)
53   HALF: 0x8030  (0 => OK)
54  INT32: -16384/0xffffc000 (0 => OK)
54   HALF: 0xf000  (0 => OK)
54   HALF: 0xec00  (0 => OK)
54   HALF: 0xe400  (0 => OK)
54   HALF: 0x8040  (0 => OK)
55  INT32: -32768/0xffff8000 (0 => OK)
55   HALF: 0xf400  (0 => OK)
55   HALF: 0xf000  (0 => OK)
55   HALF: 0xe800  (0 => OK)
55   HALF: 0x8080  (0 => OK)
56  INT32: -524288/0xfff80000 (0 => OK)
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xf800  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0x8800  (0x14 => OVERFLOW   INEXACT )
57  INT32: -8388608/0xff800000 (0 => OK)
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0x9800  (0x14 => OVERFLOW   INEXACT )
58  INT32: -16777216/0xff000000 (0 => OK)
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0x9c00  (0x14 => OVERFLOW   INEXACT )
59  INT32: -33554432/0xfe000000 (0 => OK)
59   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xa000  (0x14 => OVERFLOW   INEXACT )
60  INT32: -50331648/0xfd000000 (0 => OK)
60   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xa200  (0x14 => OVERFLOW   INEXACT )
61  INT32: -67108864/0xfc000000 (0 => OK)
61   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xa400  (0x14 => OVERFLOW   INEXACT )
62  INT32: -134217728/0xf8000000 (0 => OK)
62   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xa800  (0x14 => OVERFLOW   INEXACT )
63  INT32: -268435456/0xf0000000 (0 => OK)
63   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xac00  (0x14 => OVERFLOW   INEXACT )
64  INT32: -536870912/0xe0000000 (0 => OK)
64   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xb000  (0x14 => OVERFLOW   INEXACT )
65  INT32: -805306368/0xd0000000 (0 => OK)
65   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xb200  (0x14 => OVERFLOW   INEXACT )
66  INT32: -1073741824/0xc0000000 (0 => OK)
66   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xb400  (0x14 => OVERFLOW   INEXACT )
67  INT32: -2147483648/0x80000000 (0 => OK)
67   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
Converting fixed point int64 to half-precision
00  INT64:                    0/00000000000000000000 (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT64:                    1/0x000000000000000001 (0 => OK)
01   HALF: 0x3800  (0 => OK)
01   HALF: 0x3400  (0 => OK)
01   HALF: 0x2c00  (0 => OK)
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02  INT64:                   16/0x000000000000000010 (0 => OK)
02   HALF: 0x4800  (0 => OK)
02   HALF: 0x4400  (0 => OK)
02   HALF: 0x3c00  (0 => OK)
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03  INT64:                  256/0x000000000000000100 (0 => OK)
03   HALF: 0x5800  (0 => OK)
03   HALF: 0x5400  (0 => OK)
03   HALF: 0x4c00  (0 => OK)
03   HALF: 0x01  (0 => OK)
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04  INT64:                 4096/0x000000000000001000 (0 => OK)
04   HALF: 0x6800  (0 => OK)
04   HALF: 0x6400  (0 => OK)
04   HALF: 0x5c00  (0 => OK)
04   HALF: 0x10  (0 => OK)
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
05  INT64:                65503/0x00000000000000ffdf (0 => OK)
05   HALF: 0x77fe  (0x10 =>    INEXACT )
05   HALF: 0x73fe  (0x10 =>    INEXACT )
05   HALF: 0x6bfe  (0x10 =>    INEXACT )
05   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x07  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x03  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
06  INT64:                65504/0x00000000000000ffe0 (0 => OK)
06   HALF: 0x77ff  (0 => OK)
06   HALF: 0x73ff  (0 => OK)
06   HALF: 0x6bff  (0 => OK)
06   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x07  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x03  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
07  INT64:                65505/0x00000000000000ffe1 (0 => OK)
07   HALF: 0x77ff  (0x10 =>    INEXACT )
07   HALF: 0x73ff  (0x10 =>    INEXACT )
07   HALF: 0x6bff  (0x10 =>    INEXACT )
07   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x07  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x03  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
08  INT64:                65535/0x00000000000000ffff (0 => OK)
08   HALF: 0x77ff  (0x10 =>    INEXACT )
08   HALF: 0x73ff  (0x10 =>    INEXACT )
08   HALF: 0x6bff  (0x10 =>    INEXACT )
08   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x07  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x03  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
09  INT64:                65536/0x000000000000010000 (0 => OK)
09   HALF: 0x7800  (0 => OK)
09   HALF: 0x7400  (0 => OK)
09   HALF: 0x6c00  (0 => OK)
09   HALF: 0x100  (0 => OK)
09   HALF: 0x08  (0 => OK)
09   HALF: 0x04  (0 => OK)
09   HALF: 0x02  (0 => OK)
10  INT64:              1048576/0x000000000000100000 (0 => OK)
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0xc00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x80  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x40  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x20  (0x14 => OVERFLOW   INEXACT )
11  INT64:             16777215/0x000000000000ffffff (0 => OK)
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x1bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7ff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x3ff  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
11   HALF: 0x1ff  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
12  INT64:             16777216/0x000000000001000000 (0 => OK)
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x400  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x200  (0x14 => OVERFLOW   INEXACT )
13  INT64:             16777217/0x000000000001000001 (0 => OK)
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x400  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x200  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
14  INT64:            268435456/0x000000000010000000 (0 => OK)
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1400  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1000  (0x14 => OVERFLOW   INEXACT )
15  INT64:            536870912/0x000000000020000000 (0 => OK)
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1400  (0x14 => OVERFLOW   INEXACT )
16  INT64:           1073741824/0x000000000040000000 (0 => OK)
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x2000  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
17  INT64:           2147483648/0x000000000080000000 (0 => OK)
17   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x3800  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x2400  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x2000  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
18  INT64:          34359738368/0x000000000800000000 (0 => OK)
18   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x4800  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
19  INT64:         549755813888/0x000000008000000000 (0 => OK)
19   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x5800  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x4400  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x4000  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x3c00  (0x14 => OVERFLOW   INEXACT )
20  INT64:        8796093022208/0x000000080000000000 (0 => OK)
20   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x6800  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x5400  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x5000  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x4c00  (0x14 => OVERFLOW   INEXACT )
21  INT64:      140737488355328/0x000000800000000000 (0 => OK)
21   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7800  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x6400  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x6000  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x5c00  (0x14 => OVERFLOW   INEXACT )
22  INT64:     2251799813685248/0x000008000000000000 (0 => OK)
22   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7400  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7000  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x6c00  (0x14 => OVERFLOW   INEXACT )
23  INT64:    36028797018963968/0x000080000000000000 (0 => OK)
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24  INT64:   576460752303423488/0x000800000000000000 (0 => OK)
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
25  INT64: -9223372036854775808/0x008000000000000000 (0 => OK)
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26  INT64: -9223372036854775807/0x008000000000000001 (0 => OK)
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27  INT64: -9223372036854775777/0x00800000000000001f (0 => OK)
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28  INT64: -9223372036854775745/0x00800000000000003f (0 => OK)
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29  INT64: -9223372036854775681/0x00800000000000007f (0 => OK)
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30  INT64: -9223372036854775553/0x0080000000000000ff (0 => OK)
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31  INT64: -9223372036854775297/0x0080000000000001ff (0 => OK)
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32  INT64: -9223372036854775009/0x00800000000000031f (0 => OK)
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33  INT64: -9223372036854773761/0x0080000000000007ff (0 => OK)
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34  INT64: -9223372036854771713/0x008000000000000fff (0 => OK)
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35  INT64: -9223372036854710273/0x00800000000000ffff (0 => OK)
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36  INT64: -9223372036853727233/0x0080000000000fffff (0 => OK)
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37  INT64: -9223372036837998593/0x008000000000ffffff (0 => OK)
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38  INT64: -9223372036586340353/0x00800000000fffffff (0 => OK)
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39  INT64: -9223372032559808513/0x0080000000ffffffff (0 => OK)
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40  INT64: -9223371968135299073/0x008000000fffffffff (0 => OK)
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41  INT64: -9223370937343148033/0x00800000ffffffffff (0 => OK)
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42  INT64: -9223354444668731393/0x0080000fffffffffff (0 => OK)
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43  INT64: -9223090561878065153/0x008000ffffffffffff (0 => OK)
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44  INT64: -9218868437227405313/0x00800fffffffffffff (0 => OK)
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45  INT64: -9218868437227405313/0x00800fffffffffffff (0 => OK)
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46  INT64: -9151314442816847873/0x0080ffffffffffffff (0 => OK)
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47  INT64: -9079256848778919937/0x0081ffffffffffffff (0 => OK)
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48  INT64: -8935141660703064065/0x0083ffffffffffffff (0 => OK)
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49  INT64: -8646911284551352321/0x0087ffffffffffffff (0 => OK)
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50  INT64: -8070450532247928833/0x008fffffffffffffff (0 => OK)
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51  INT64: -6917529027641081857/0x009fffffffffffffff (0 => OK)
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52  INT64: -5764607523034234881/0x00afffffffffffffff (0 => OK)
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53  INT64: -4611686018427387905/0x00bfffffffffffffff (0 => OK)
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54  INT64: -3458764513820540929/0x00cfffffffffffffff (0 => OK)
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55  INT64: -2305843009213693953/0x00dfffffffffffffff (0 => OK)
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56  INT64: -1152921504606846977/0x00efffffffffffffff (0 => OK)
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57  INT64: -1152921504606846976/0x00f000000000000000 (0 => OK)
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58  INT64:   -18001204369948673/0x00ffc00bffffffffff (0 => OK)
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xf7ff  (0x14 => OVERFLOW   INEXACT )
59  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
59   HALF: 0xb800  (0 => OK)
59   HALF: 0xb400  (0 => OK)
59   HALF: 0xac00  (0 => OK)
59   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
### Rounding to zero
Converting single-precision to half-precision
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00   HALF: 0000  (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01   HALF: 0000  (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02   HALF: 0000  (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03   HALF: 0000  (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04   HALF: 0000  (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05   HALF: 0000  (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06   HALF: 0000  (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07   HALF: 0000  (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08   HALF: 0000  (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09   HALF: 0000  (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10   HALF: 0000  (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11   HALF: 0000  (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12   HALF: 0000  (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13   HALF: 0000  (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14   HALF: 0000  (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15   HALF: 0x3c00  (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16   HALF: 0x3c00  (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17   HALF: 0x4000  (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18   HALF: 0x4000  (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19   HALF: 0x4200  (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20   HALF: 0x7bfe  (0x10 =>    INEXACT )
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21   HALF: 0x7bff  (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22   HALF: 0x7bff  (0x10 =>    INEXACT )
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23   HALF: 0x7bfd  (0x10 =>    INEXACT )
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24   HALF: 0x7bfe  (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25   HALF: 0x7bfe  (0x10 =>    INEXACT )
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26   HALF: 0x7bff  (0x10 =>    INEXACT )
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27   HALF: 0x7bff  (0x10 =>    INEXACT )
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28   HALF: 0x7bff  (0x10 =>    INEXACT )
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29   HALF: 0000  (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30   HALF: 0000  (0 => OK)
Converting single-precision to double-precision
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19 DOUBLE: 3.00000000000000000000e+00 / 0x004008000000000000 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23 DOUBLE: 6.54710000000000000000e+04 / 0x0040eff7e000000000 (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24 DOUBLE: 6.54720000000000000000e+04 / 0x0040eff80000000000 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25 DOUBLE: 6.54730000000000000000e+04 / 0x0040eff82000000000 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
Converting single-precision to fixed point 32 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      2/       0x2 (0 => OK)
15  INT32:      4/       0x4 (0 => OK)
15  INT32:     16/      0x10 (0 => OK)
15  INT32:    256/     0x100 (0 => OK)
15  INT32:  65536/   0x10000 (0 => OK)
15  INT32:  65536/   0x10000 (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      2/       0x2 (0 => OK)
16  INT32:      4/       0x4 (0 => OK)
16  INT32:     16/      0x10 (0 => OK)
16  INT32:    256/     0x100 (0 => OK)
16  INT32:  65536/   0x10000 (0 => OK)
16  INT32:  65536/   0x10000 (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      4/       0x4 (0 => OK)
17  INT32:      8/       0x8 (0 => OK)
17  INT32:     32/      0x20 (0 => OK)
17  INT32:    512/     0x200 (0 => OK)
17  INT32: 131072/   0x20000 (0 => OK)
17  INT32: 131072/   0x20000 (0 => OK)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      4/       0x4 (0 => OK)
18  INT32:      8/       0x8 (0 => OK)
18  INT32:     32/      0x20 (0 => OK)
18  INT32:    512/     0x200 (0 => OK)
18  INT32: 131072/   0x20000 (0 => OK)
18  INT32: 131072/   0x20000 (0 => OK)
18  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      6/       0x6 (0 => OK)
19  INT32:     12/       0xc (0 => OK)
19  INT32:     48/      0x30 (0 => OK)
19  INT32:    768/     0x300 (0 => OK)
19  INT32: 196608/   0x30000 (0 => OK)
19  INT32: 196608/   0x30000 (0 => OK)
19  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32: 131006/   0x1ffbe (0 => OK)
20  INT32: 262012/   0x3ff7c (0 => OK)
20  INT32: 1048048/   0xffdf0 (0 => OK)
20  INT32: 16768768/  0xffdf00 (0 => OK)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32: 131008/   0x1ffc0 (0 => OK)
21  INT32: 262016/   0x3ff80 (0 => OK)
21  INT32: 1048064/   0xffe00 (0 => OK)
21  INT32: 16769024/  0xffe000 (0 => OK)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32: 131010/   0x1ffc2 (0 => OK)
22  INT32: 262020/   0x3ff84 (0 => OK)
22  INT32: 1048080/   0xffe10 (0 => OK)
22  INT32: 16769280/  0xffe100 (0 => OK)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32: 130942/   0x1ff7e (0 => OK)
23  INT32: 261884/   0x3fefc (0 => OK)
23  INT32: 1047536/   0xffbf0 (0 => OK)
23  INT32: 16760576/  0xffbf00 (0 => OK)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32: 130944/   0x1ff80 (0 => OK)
24  INT32: 261888/   0x3ff00 (0 => OK)
24  INT32: 1047552/   0xffc00 (0 => OK)
24  INT32: 16760832/  0xffc000 (0 => OK)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32: 130946/   0x1ff82 (0 => OK)
25  INT32: 261892/   0x3ff04 (0 => OK)
25  INT32: 1047568/   0xffc10 (0 => OK)
25  INT32: 16761088/  0xffc100 (0 => OK)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32: 131070/   0x1fffe (0 => OK)
26  INT32: 262140/   0x3fffc (0 => OK)
26  INT32: 1048560/   0xffff0 (0 => OK)
26  INT32: 16776960/  0xffff00 (0 => OK)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32: 131070/   0x1fffe (0 => OK)
27  INT32: 262140/   0x3fffc (0 => OK)
27  INT32: 1048560/   0xffff0 (0 => OK)
27  INT32: 16776960/  0xffff00 (0 => OK)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32: 131070/   0x1fffe (0 => OK)
28  INT32: 262140/   0x3fffc (0 => OK)
28  INT32: 1048560/   0xffff0 (0 => OK)
28  INT32: 16776960/  0xffff00 (0 => OK)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting single-precision to fixed point 64 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT64:                    2/0x000000000000000002 (0 => OK)
15  INT64:                    4/0x000000000000000004 (0 => OK)
15  INT64:                   16/0x000000000000000010 (0 => OK)
15  INT64:                  256/0x000000000000000100 (0 => OK)
15  INT64:                65536/0x000000000000010000 (0 => OK)
15  INT64:           4294967296/0x000000000100000000 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT64:                    2/0x000000000000000002 (0 => OK)
16  INT64:                    4/0x000000000000000004 (0 => OK)
16  INT64:                   16/0x000000000000000010 (0 => OK)
16  INT64:                  256/0x000000000000000100 (0 => OK)
16  INT64:                65536/0x000000000000010000 (0 => OK)
16  INT64:           4294967296/0x000000000100000000 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT64:                    4/0x000000000000000004 (0 => OK)
17  INT64:                    8/0x000000000000000008 (0 => OK)
17  INT64:                   32/0x000000000000000020 (0 => OK)
17  INT64:                  512/0x000000000000000200 (0 => OK)
17  INT64:               131072/0x000000000000020000 (0 => OK)
17  INT64:           8589934592/0x000000000200000000 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT64:                    4/0x000000000000000004 (0 => OK)
18  INT64:                    8/0x000000000000000008 (0 => OK)
18  INT64:                   32/0x000000000000000020 (0 => OK)
18  INT64:                  512/0x000000000000000200 (0 => OK)
18  INT64:               131072/0x000000000000020000 (0 => OK)
18  INT64:           8589934592/0x000000000200000000 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT64:                    6/0x000000000000000006 (0 => OK)
19  INT64:                   12/0x00000000000000000c (0 => OK)
19  INT64:                   48/0x000000000000000030 (0 => OK)
19  INT64:                  768/0x000000000000000300 (0 => OK)
19  INT64:               196608/0x000000000000030000 (0 => OK)
19  INT64:          12884901888/0x000000000300000000 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT64:               131006/0x00000000000001ffbe (0 => OK)
20  INT64:               262012/0x00000000000003ff7c (0 => OK)
20  INT64:              1048048/0x0000000000000ffdf0 (0 => OK)
20  INT64:             16768768/0x000000000000ffdf00 (0 => OK)
20  INT64:           4292804608/0x0000000000ffdf0000 (0 => OK)
20  INT64:      281333242789888/0x000000ffdf00000000 (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT64:               131008/0x00000000000001ffc0 (0 => OK)
21  INT64:               262016/0x00000000000003ff80 (0 => OK)
21  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
21  INT64:             16769024/0x000000000000ffe000 (0 => OK)
21  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
21  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT64:               131010/0x00000000000001ffc2 (0 => OK)
22  INT64:               262020/0x00000000000003ff84 (0 => OK)
22  INT64:              1048080/0x0000000000000ffe10 (0 => OK)
22  INT64:             16769280/0x000000000000ffe100 (0 => OK)
22  INT64:           4292935680/0x0000000000ffe10000 (0 => OK)
22  INT64:      281341832724480/0x000000ffe100000000 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT64:               130942/0x00000000000001ff7e (0 => OK)
23  INT64:               261884/0x00000000000003fefc (0 => OK)
23  INT64:              1047536/0x0000000000000ffbf0 (0 => OK)
23  INT64:             16760576/0x000000000000ffbf00 (0 => OK)
23  INT64:           4290707456/0x0000000000ffbf0000 (0 => OK)
23  INT64:      281195803836416/0x000000ffbf00000000 (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT64:               130944/0x00000000000001ff80 (0 => OK)
24  INT64:               261888/0x00000000000003ff00 (0 => OK)
24  INT64:              1047552/0x0000000000000ffc00 (0 => OK)
24  INT64:             16760832/0x000000000000ffc000 (0 => OK)
24  INT64:           4290772992/0x0000000000ffc00000 (0 => OK)
24  INT64:      281200098803712/0x000000ffc000000000 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT64:               130946/0x00000000000001ff82 (0 => OK)
25  INT64:               261892/0x00000000000003ff04 (0 => OK)
25  INT64:              1047568/0x0000000000000ffc10 (0 => OK)
25  INT64:             16761088/0x000000000000ffc100 (0 => OK)
25  INT64:           4290838528/0x0000000000ffc10000 (0 => OK)
25  INT64:      281204393771008/0x000000ffc100000000 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT64:               131070/0x00000000000001fffe (0 => OK)
26  INT64:               262140/0x00000000000003fffc (0 => OK)
26  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
26  INT64:             16776960/0x000000000000ffff00 (0 => OK)
26  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
26  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT64:               131070/0x00000000000001fffe (0 => OK)
27  INT64:               262140/0x00000000000003fffc (0 => OK)
27  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
27  INT64:             16776960/0x000000000000ffff00 (0 => OK)
27  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
27  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT64:               131070/0x00000000000001fffe (0 => OK)
28  INT64:               262140/0x00000000000003fffc (0 => OK)
28  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
28  INT64:             16776960/0x000000000000ffff00 (0 => OK)
28  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
28  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
Converting single-precision to 32 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      1/       0x1 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      1/       0x1 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      2/       0x2 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      2/       0x2 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      3/       0x3 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32:  65503/    0xffdf (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32:  65504/    0xffe0 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32:  65505/    0xffe1 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32:  65471/    0xffbf (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32:  65472/    0xffc0 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32:  65473/    0xffc1 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32:  65535/    0xffff (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32:  65535/    0xffff (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32:  65535/    0xffff (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting single-precision to 64 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      1/       0x1 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      1/       0x1 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      2/       0x2 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      2/       0x2 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      3/       0x3 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32:  65503/    0xffdf (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32:  65504/    0xffe0 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32:  65505/    0xffe1 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32:  65471/    0xffbf (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32:  65472/    0xffc0 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32:  65473/    0xffc1 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32:  65535/    0xffff (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32:  65535/    0xffff (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32:  65535/    0xffff (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting double-precision to half-precision
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00   HALF: 0x7f00  (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01   HALF: 0xfe00  (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02   HALF: 0xfc00  (0 => OK)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09   HALF: 0xc000  (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10   HALF: 0xbc00  (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13   HALF: 0000  (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17   HALF: 0x3ff  (0x18 =>  UNDERFLOW  INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18   HALF: 0x400  (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19   HALF: 0x3c00  (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20   HALF: 0x3c01  (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24   HALF: 0x3c00  (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25   HALF: 0x4000  (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26   HALF: 0x416f  (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27   HALF: 0x4248  (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28   HALF: 0x7bfe  (0x10 =>    INEXACT )
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29   HALF: 0x7bff  (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30   HALF: 0x7bff  (0x10 =>    INEXACT )
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39   HALF: 0x7c00  (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40   HALF: 0x7e00  (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41   HALF: 0x7e00  (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42   HALF: 0x7f00  (0x1 =>     INVALID)
Converting double-precision to single-precision
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00 SINGLE: nan / 0x7fe00000  (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01 SINGLE: -nan / 0xffc00000  (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02 SINGLE: -inf / 0xff800000  (0 => OK)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03 SINGLE: -3.40282346638528859811e+38 / 0xff7fffff  (0x14 => OVERFLOW   INEXACT )
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04 SINGLE: -3.40282346638528859811e+38 / 0xff7fffff  (0x14 => OVERFLOW   INEXACT )
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05 SINGLE: -3.40282346638528859811e+38 / 0xff7fffff  (0 => OK)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06 SINGLE: -3.40282346638528859811e+38 / 0xff7fffff  (0 => OK)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07 SINGLE: -1.11099992680387713644e+31 / 0xf30c3a58  (0x10 =>    INEXACT )
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08 SINGLE: -1.11099995702702262681e+30 / 0xf1605d5a  (0x10 =>    INEXACT )
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09 SINGLE: -2.00000000000000000000e+00 / 0xc0000000  (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10 SINGLE: -1.00000000000000000000e+00 / 0xbf800000  (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11 SINGLE: -0.00000000000000000000e+00 / 0x80000000  (0x18 =>  UNDERFLOW  INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12 SINGLE: -1.17549435082228750796e-38 / 0x80800000  (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14 SINGLE: 1.17549435082228750796e-38 / 0x00800000  (0 => OK)
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15 SINGLE: 2.98023223876953125000e-08 / 0x33000000  (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16 SINGLE: 5.96045985901128005934e-08 / 0x337ffff3  (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17 SINGLE: 6.09755988989491015672e-05 / 0x387fc00d  (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18 SINGLE: 6.10351999057456851005e-05 / 0x38800006  (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20 SINGLE: 1.00097656250000000000e+00 / 0x3f802000  (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26 SINGLE: 2.71828174591064453125e+00 / 0x402df854  (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27 SINGLE: 3.14159250259399414062e+00 / 0x40490fda  (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31 SINGLE: 1.31007000000000000000e+05 / 0x47ffdf80  (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32 SINGLE: 1.31008000000000000000e+05 / 0x47ffe000  (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33 SINGLE: 1.31009000000000000000e+05 / 0x47ffe080  (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34 SINGLE: 2.14748352000000000000e+09 / 0x4effffff  (0x10 =>    INEXACT )
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35 SINGLE: 3.40282346638528859811e+38 / 0x7f7fffff  (0 => OK)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36 SINGLE: 3.40282346638528859811e+38 / 0x7f7fffff  (0 => OK)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38 SINGLE: 3.40282346638528859811e+38 / 0x7f7fffff  (0x14 => OVERFLOW   INEXACT )
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39 SINGLE: inf / 0x7f800000  (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40 SINGLE: nan / 0x7fc00000  (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41 SINGLE: nan / 0x7fc00000  (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42 SINGLE: nan / 0x7fe00000  (0x1 =>     INVALID)
Converting double-precision to fixed point 32 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT32:     -7/0xfffffff9 (0x10 =>    INEXACT )
18  INT32:    -14/0xfffffff2 (0x10 =>    INEXACT )
18  INT32:    -58/0xffffffc6 (0x10 =>    INEXACT )
18  INT32:   -936/0xfffffc58 (0x10 =>    INEXACT )
18  INT32: -239739/0xfffc5785 (0x10 =>    INEXACT )
18  INT32: -239739/0xfffc5785 (0x10 =>    INEXACT )
18  INT32: -2147483648/0x80000000 (0x11 =>    INEXACT INVALID)
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:    -66/0xffffffbe (0x10 =>    INEXACT )
23  INT32:    -66/0xffffffbe (0x10 =>    INEXACT )
23  INT32: -4331784/0xffbde6f8 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
Converting double-precision to fixed point 64 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
09  INT64:                   -8/0x00fffffffffffffff8 (0 => OK)
09  INT64:                  -32/0x00ffffffffffffffe0 (0 => OK)
09  INT64:                 -512/0x00fffffffffffffe00 (0 => OK)
09  INT64:              -131072/0x00fffffffffffe0000 (0 => OK)
09  INT64:          -8589934592/0x00fffffffe00000000 (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
10  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
10  INT64:                  -16/0x00fffffffffffffff0 (0 => OK)
10  INT64:                 -256/0x00ffffffffffffff00 (0 => OK)
10  INT64:               -65536/0x00ffffffffffff0000 (0 => OK)
10  INT64:          -4294967296/0x00ffffffff00000000 (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                  128/0x000000000000000080 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                  255/0x0000000000000000ff (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    3/0x000000000000000003 (0x10 =>    INEXACT )
17  INT64:               261888/0x00000000000003ff00 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    4/0x000000000000000004 (0x10 =>    INEXACT )
18  INT64:               262144/0x000000000000040000 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT64:                    2/0x000000000000000002 (0 => OK)
19  INT64:                    4/0x000000000000000004 (0 => OK)
19  INT64:                   16/0x000000000000000010 (0 => OK)
19  INT64:                  256/0x000000000000000100 (0 => OK)
19  INT64:                65536/0x000000000000010000 (0 => OK)
19  INT64:           4294967296/0x000000000100000000 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT64:                    2/0x000000000000000002 (0x10 =>    INEXACT )
20  INT64:                    4/0x000000000000000004 (0x10 =>    INEXACT )
20  INT64:                   16/0x000000000000000010 (0x10 =>    INEXACT )
20  INT64:                  256/0x000000000000000100 (0x10 =>    INEXACT )
20  INT64:                65600/0x000000000000010040 (0x10 =>    INEXACT )
20  INT64:           4299161600/0x000000000100400000 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT64:                    2/0x000000000000000002 (0 => OK)
24  INT64:                    4/0x000000000000000004 (0 => OK)
24  INT64:                   16/0x000000000000000010 (0 => OK)
24  INT64:                  256/0x000000000000000100 (0 => OK)
24  INT64:                65536/0x000000000000010000 (0 => OK)
24  INT64:           4294967296/0x000000000100000000 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT64:                    4/0x000000000000000004 (0 => OK)
25  INT64:                    8/0x000000000000000008 (0 => OK)
25  INT64:                   32/0x000000000000000020 (0 => OK)
25  INT64:                  512/0x000000000000000200 (0 => OK)
25  INT64:               131072/0x000000000000020000 (0 => OK)
25  INT64:           8589934592/0x000000000200000000 (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT64:                    5/0x000000000000000005 (0x10 =>    INEXACT )
26  INT64:                   10/0x00000000000000000a (0x10 =>    INEXACT )
26  INT64:                   43/0x00000000000000002b (0x10 =>    INEXACT )
26  INT64:                  695/0x0000000000000002b7 (0x10 =>    INEXACT )
26  INT64:               178145/0x00000000000002b7e1 (0x10 =>    INEXACT )
26  INT64:          11674931554/0x0000000002b7e15162 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT64:                    6/0x000000000000000006 (0x10 =>    INEXACT )
27  INT64:                   12/0x00000000000000000c (0x10 =>    INEXACT )
27  INT64:                   50/0x000000000000000032 (0x10 =>    INEXACT )
27  INT64:                  804/0x000000000000000324 (0x10 =>    INEXACT )
27  INT64:               205887/0x00000000000003243f (0x10 =>    INEXACT )
27  INT64:          13493037704/0x0000000003243f6a88 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT64:               131006/0x00000000000001ffbe (0 => OK)
28  INT64:               262012/0x00000000000003ff7c (0 => OK)
28  INT64:              1048048/0x0000000000000ffdf0 (0 => OK)
28  INT64:             16768768/0x000000000000ffdf00 (0 => OK)
28  INT64:           4292804608/0x0000000000ffdf0000 (0 => OK)
28  INT64:      281333242789888/0x000000ffdf00000000 (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT64:               131008/0x00000000000001ffc0 (0 => OK)
29  INT64:               262016/0x00000000000003ff80 (0 => OK)
29  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
29  INT64:             16769024/0x000000000000ffe000 (0 => OK)
29  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
29  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT64:               131010/0x00000000000001ffc2 (0 => OK)
30  INT64:               262020/0x00000000000003ff84 (0 => OK)
30  INT64:              1048080/0x0000000000000ffe10 (0 => OK)
30  INT64:             16769280/0x000000000000ffe100 (0 => OK)
30  INT64:           4292935680/0x0000000000ffe10000 (0 => OK)
30  INT64:      281341832724480/0x000000ffe100000000 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT64:               262014/0x00000000000003ff7e (0 => OK)
31  INT64:               524028/0x00000000000007fefc (0 => OK)
31  INT64:              2096112/0x0000000000001ffbf0 (0 => OK)
31  INT64:             33537792/0x000000000001ffbf00 (0 => OK)
31  INT64:           8585674752/0x0000000001ffbf0000 (0 => OK)
31  INT64:      562670780547072/0x000001ffbf00000000 (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT64:               262016/0x00000000000003ff80 (0 => OK)
32  INT64:               524032/0x00000000000007ff00 (0 => OK)
32  INT64:              2096128/0x0000000000001ffc00 (0 => OK)
32  INT64:             33538048/0x000000000001ffc000 (0 => OK)
32  INT64:           8585740288/0x0000000001ffc00000 (0 => OK)
32  INT64:      562675075514368/0x000001ffc000000000 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT64:               262018/0x00000000000003ff82 (0 => OK)
33  INT64:               524036/0x00000000000007ff04 (0 => OK)
33  INT64:              2096144/0x0000000000001ffc10 (0 => OK)
33  INT64:             33538304/0x000000000001ffc100 (0 => OK)
33  INT64:           8585805824/0x0000000001ffc10000 (0 => OK)
33  INT64:      562679370481664/0x000001ffc100000000 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT64:           4294967294/0x0000000000fffffffe (0 => OK)
34  INT64:           8589934588/0x0000000001fffffffc (0 => OK)
34  INT64:          34359738352/0x0000000007fffffff0 (0 => OK)
34  INT64:         549755813632/0x000000007fffffff00 (0 => OK)
34  INT64:      140737488289792/0x0000007fffffff0000 (0 => OK)
34  INT64:  9223372032559808512/0x007fffffff00000000 (0 => OK)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting double-precision to 32 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT32:     -2/0xfffffffe (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT32:     -1/0xffffffff (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12  INT32:      0/         0 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14  INT32:      0/         0 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT32:      0/         0 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT32:      0/         0 (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT32:      0/         0 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT32:      0/         0 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT32:      1/       0x1 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT32:      1/       0x1 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT32:      0/         0 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT32:      0/         0 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT32:      0/         0 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT32:      1/       0x1 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT32:      2/       0x2 (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT32:      2/       0x2 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT32:      3/       0x3 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT32:  65503/    0xffdf (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT32:  65504/    0xffe0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT32:  65505/    0xffe1 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT32: 131007/   0x1ffbf (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT32: 131008/   0x1ffc0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT32: 131009/   0x1ffc1 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT32: 2147483647/0x7fffffff (0 => OK)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37  INT32:      0/         0 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT32:      0/         0 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT32:      0/         0 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT32:      0/         0 (0x1 =>     INVALID)
Converting double-precision to 64 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT64:                    1/0x000000000000000001 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT64:                    1/0x000000000000000001 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT64:                    1/0x000000000000000001 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT64:                    2/0x000000000000000002 (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT64:                    2/0x000000000000000002 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT64:                    3/0x000000000000000003 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT64:                65503/0x00000000000000ffdf (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT64:                65504/0x00000000000000ffe0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT64:                65505/0x00000000000000ffe1 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT64:               131007/0x00000000000001ffbf (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT64:               131008/0x00000000000001ffc0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT64:               131009/0x00000000000001ffc1 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT64:           2147483647/0x00000000007fffffff (0 => OK)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to double-precision
00   HALF: 0xffff  (0 => OK)
00 DOUBLE: -nan / 0x00fffffc0000000000 (0 => OK)
01   HALF: 0xfcff  (0 => OK)
01 DOUBLE: -nan / 0x00fffbfc0000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02 DOUBLE: -nan / 0x00fff8040000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
04   HALF: 0xfbff  (0 => OK)
04 DOUBLE: -6.55040000000000000000e+04 / 0x00c0effc0000000000 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05 DOUBLE: -6.54720000000000000000e+04 / 0x00c0eff80000000000 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
08   HALF: 0x8001  (0 => OK)
08 DOUBLE: -5.96046447753906250000e-08 / 0x00be70000000000000 (0 => OK)
09   HALF: 0x8000  (0 => OK)
09 DOUBLE: -0.00000000000000000000e+00 / 0x008000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11 DOUBLE: 5.96046447753906250000e-08 / 0x003e70000000000000 (0 => OK)
12   HALF: 0x3c00  (0 => OK)
12 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13 DOUBLE: 6.54720000000000000000e+04 / 0x0040eff80000000000 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
16   HALF: 0x7c01  (0 => OK)
16 DOUBLE: nan / 0x007ff8040000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17 DOUBLE: nan / 0x007ffbfc0000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18 DOUBLE: nan / 0x007ffffc0000000000 (0 => OK)
Converting half-precision to single-precision
00   HALF: 0xffff  (0 => OK)
00 SINGLE: -nan / 0xffffe000  (0 => OK)
01   HALF: 0xfcff  (0 => OK)
01 SINGLE: -nan / 0xffdfe000  (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02 SINGLE: -nan / 0xffc02000  (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03 SINGLE: -inf / 0xff800000  (0 => OK)
04   HALF: 0xfbff  (0 => OK)
04 SINGLE: -6.55040000000000000000e+04 / 0xc77fe000  (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05 SINGLE: -6.54720000000000000000e+04 / 0xc77fc000  (0 => OK)
06   HALF: 0xc000  (0 => OK)
06 SINGLE: -2.00000000000000000000e+00 / 0xc0000000  (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07 SINGLE: -1.00000000000000000000e+00 / 0xbf800000  (0 => OK)
08   HALF: 0x8001  (0 => OK)
08 SINGLE: -5.96046447753906250000e-08 / 0xb3800000  (0 => OK)
09   HALF: 0x8000  (0 => OK)
09 SINGLE: -0.00000000000000000000e+00 / 0x80000000  (0 => OK)
10   HALF: 0000  (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11   HALF: 0x01  (0 => OK)
11 SINGLE: 5.96046447753906250000e-08 / 0x33800000  (0 => OK)
12   HALF: 0x3c00  (0 => OK)
12 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15 SINGLE: inf / 0x7f800000  (0 => OK)
16   HALF: 0x7c01  (0 => OK)
16 SINGLE: nan / 0x7fc02000  (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17 SINGLE: nan / 0x7fdfe000  (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18 SINGLE: nan / 0x7fffe000  (0 => OK)
Converting half-precision to fixed point 64 bit int
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:              -131008/0x00fffffffffffe0040 (0 => OK)
04  INT64:              -262016/0x00fffffffffffc0080 (0 => OK)
04  INT64:             -1048064/0x00fffffffffff00200 (0 => OK)
04  INT64:            -16769024/0x00ffffffffff002000 (0 => OK)
04  INT64:          -4292870144/0x00ffffffff00200000 (0 => OK)
04  INT64:     -281337537757184/0x00ffff002000000000 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:              -130944/0x00fffffffffffe0080 (0 => OK)
05  INT64:              -261888/0x00fffffffffffc0100 (0 => OK)
05  INT64:             -1047552/0x00fffffffffff00400 (0 => OK)
05  INT64:            -16760832/0x00ffffffffff004000 (0 => OK)
05  INT64:          -4290772992/0x00ffffffff00400000 (0 => OK)
05  INT64:     -281200098803712/0x00ffff004000000000 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
06  INT64:                   -8/0x00fffffffffffffff8 (0 => OK)
06  INT64:                  -32/0x00ffffffffffffffe0 (0 => OK)
06  INT64:                 -512/0x00fffffffffffffe00 (0 => OK)
06  INT64:              -131072/0x00fffffffffffe0000 (0 => OK)
06  INT64:          -8589934592/0x00fffffffe00000000 (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
07  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
07  INT64:                  -16/0x00fffffffffffffff0 (0 => OK)
07  INT64:                 -256/0x00ffffffffffffff00 (0 => OK)
07  INT64:               -65536/0x00ffffffffffff0000 (0 => OK)
07  INT64:          -4294967296/0x00ffffffff00000000 (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                 -256/0x00ffffffffffffff00 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                  256/0x000000000000000100 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    2/0x000000000000000002 (0 => OK)
12  INT64:                    4/0x000000000000000004 (0 => OK)
12  INT64:                   16/0x000000000000000010 (0 => OK)
12  INT64:                  256/0x000000000000000100 (0 => OK)
12  INT64:                65536/0x000000000000010000 (0 => OK)
12  INT64:           4294967296/0x000000000100000000 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:               130944/0x00000000000001ff80 (0 => OK)
13  INT64:               261888/0x00000000000003ff00 (0 => OK)
13  INT64:              1047552/0x0000000000000ffc00 (0 => OK)
13  INT64:             16760832/0x000000000000ffc000 (0 => OK)
13  INT64:           4290772992/0x0000000000ffc00000 (0 => OK)
13  INT64:      281200098803712/0x000000ffc000000000 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:               131008/0x00000000000001ffc0 (0 => OK)
14  INT64:               262016/0x00000000000003ff80 (0 => OK)
14  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
14  INT64:             16769024/0x000000000000ffe000 (0 => OK)
14  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
14  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to fixed point 32 bit int
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT32:     -4/0xfffffffc (0x10 =>    INEXACT )
06  INT32:     -8/0xfffffff8 (0x10 =>    INEXACT )
06  INT32:    -32/0xffffffe0 (0x10 =>    INEXACT )
06  INT32:   -515/0xfffffdfd (0x10 =>    INEXACT )
06  INT32: -131840/0xfffdfd00 (0x10 =>    INEXACT )
06  INT32: -131840/0xfffdfd00 (0x10 =>    INEXACT )
06  INT32: -2147483648/0x80000000 (0x11 =>    INEXACT INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:     -2/0xfffffffe (0x10 =>    INEXACT )
07  INT32:   -514/0xfffffdfe (0x10 =>    INEXACT )
07  INT32:   -514/0xfffffdfe (0x10 =>    INEXACT )
07  INT32: -33746944/0xfdfd1000 (0x10 =>    INEXACT )
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      2/       0x2 (0x10 =>    INEXACT )
12  INT32:    512/     0x200 (0x10 =>    INEXACT )
12  INT32:    512/     0x200 (0x10 =>    INEXACT )
12  INT32: 33615872/ 0x200f000 (0x10 =>    INEXACT )
13   HALF: 0x7bfe  (0 => OK)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14   HALF: 0x7bff  (0 => OK)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15   HALF: 0x7c00  (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 64 bit int
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:               -65504/0x00ffffffffffff0020 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:               -65472/0x00ffffffffffff0040 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    1/0x000000000000000001 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:                65472/0x00000000000000ffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:                65504/0x00000000000000ffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to 32 bit int
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32:      0/         0 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32: -65504/0xffff0020 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT32: -65472/0xffff0040 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT32:     -2/0xfffffffe (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT32:     -1/0xffffffff (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      1/       0x1 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT32:  65472/    0xffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT32:  65504/    0xffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32:      0/         0 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32:      0/         0 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 64 bit uint
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    1/0x000000000000000001 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:                65472/0x00000000000000ffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:                65504/0x00000000000000ffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:                   -1/0x00ffffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to 32 bit uint
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32:      0/         0 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32:      0/         0 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32:      0/         0 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT32:      0/         0 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT32:      0/         0 (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT32:      0/         0 (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      1/       0x1 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT32:  65472/    0xffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT32:  65504/    0xffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT32:     -1/0xffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32:      0/         0 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32:      0/         0 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 16 bit uint
00   HALF: 0xffff  (0 => OK)
00   HALF: 0000  (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01   HALF: 0000  (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02   HALF: 0000  (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03   HALF: 0000  (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04   HALF: 0000  (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05   HALF: 0000  (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06   HALF: 0000  (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07   HALF: 0000  (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08   HALF: 0000  (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09   HALF: 0000  (0 => OK)
10   HALF: 0000  (0 => OK)
10   HALF: 0000  (0 => OK)
11   HALF: 0x01  (0 => OK)
11   HALF: 0000  (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12   HALF: 0x01  (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13   HALF: 0xffc0  (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14   HALF: 0xffe0  (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15   HALF: 0xffff  (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16   HALF: 0000  (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17   HALF: 0000  (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18   HALF: 0000  (0x1 =>     INVALID)
Converting signed int32 to half-precision
00  INT32:      0/         0 (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT32:      1/       0x1 (0 => OK)
01   HALF: 0x3c00  (0 => OK)
02  INT32:     16/      0x10 (0 => OK)
02   HALF: 0x4c00  (0 => OK)
03  INT32:    256/     0x100 (0 => OK)
03   HALF: 0x5c00  (0 => OK)
04  INT32:   4096/    0x1000 (0 => OK)
04   HALF: 0x6c00  (0 => OK)
05  INT32:  65503/    0xffdf (0 => OK)
05   HALF: 0x7bfe  (0x10 =>    INEXACT )
06  INT32:  65504/    0xffe0 (0 => OK)
06   HALF: 0x7bff  (0 => OK)
07  INT32:  65505/    0xffe1 (0 => OK)
07   HALF: 0x7bff  (0x10 =>    INEXACT )
08  INT32:  65535/    0xffff (0 => OK)
08   HALF: 0x7bff  (0x10 =>    INEXACT )
09  INT32:  65536/   0x10000 (0 => OK)
09   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10  INT32: 1048576/  0x100000 (0 => OK)
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11  INT32: 16777215/  0xffffff (0 => OK)
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12  INT32: 16777216/ 0x1000000 (0 => OK)
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13  INT32: 16777217/ 0x1000001 (0 => OK)
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14  INT32: 268435456/0x10000000 (0 => OK)
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15  INT32: 536870912/0x20000000 (0 => OK)
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16  INT32: 1073741824/0x40000000 (0 => OK)
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
17  INT32: -2147483648/0x80000000 (0 => OK)
17   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
18  INT32: -2147483647/0x80000001 (0 => OK)
18   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
19  INT32: -2147483617/0x8000001f (0 => OK)
19   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
20  INT32: -2147483585/0x8000003f (0 => OK)
20   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
21  INT32: -2147483521/0x8000007f (0 => OK)
21   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
22  INT32: -2147483393/0x800000ff (0 => OK)
22   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
23  INT32: -2147483137/0x800001ff (0 => OK)
23   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
24  INT32: -2147482849/0x8000031f (0 => OK)
24   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25  INT32: -2147481601/0x800007ff (0 => OK)
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26  INT32: -2147479553/0x80000fff (0 => OK)
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27  INT32: -2147418113/0x8000ffff (0 => OK)
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28  INT32: -2146435073/0x800fffff (0 => OK)
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29  INT32: -2130706433/0x80ffffff (0 => OK)
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30  INT32: -1879048193/0x8fffffff (0 => OK)
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31  INT32: -1610612737/0x9fffffff (0 => OK)
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32  INT32: -1342177281/0xafffffff (0 => OK)
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33  INT32: -1073741825/0xbfffffff (0 => OK)
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34  INT32: -805306369/0xcfffffff (0 => OK)
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35  INT32: -536870913/0xdfffffff (0 => OK)
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36  INT32: -268435457/0xefffffff (0 => OK)
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37  INT32:     -1/0xffffffff (0 => OK)
37   HALF: 0xbc00  (0 => OK)
38  INT32:     -2/0xfffffffe (0 => OK)
38   HALF: 0xc000  (0 => OK)
39  INT32:     -3/0xfffffffd (0 => OK)
39   HALF: 0xc200  (0 => OK)
40  INT32:     -4/0xfffffffc (0 => OK)
40   HALF: 0xc400  (0 => OK)
41  INT32:     -8/0xfffffff8 (0 => OK)
41   HALF: 0xc800  (0 => OK)
42  INT32:    -16/0xfffffff0 (0 => OK)
42   HALF: 0xcc00  (0 => OK)
43  INT32:    -32/0xffffffe0 (0 => OK)
43   HALF: 0xd000  (0 => OK)
44  INT32:    -48/0xffffffd0 (0 => OK)
44   HALF: 0xd200  (0 => OK)
45  INT32:    -64/0xffffffc0 (0 => OK)
45   HALF: 0xd400  (0 => OK)
46  INT32:   -128/0xffffff80 (0 => OK)
46   HALF: 0xd800  (0 => OK)
47  INT32:   -512/0xfffffe00 (0 => OK)
47   HALF: 0xe000  (0 => OK)
48  INT32:   -768/0xfffffd00 (0 => OK)
48   HALF: 0xe200  (0 => OK)
49  INT32:  -1024/0xfffffc00 (0 => OK)
49   HALF: 0xe400  (0 => OK)
50  INT32:  -2048/0xfffff800 (0 => OK)
50   HALF: 0xe800  (0 => OK)
51  INT32:  -4096/0xfffff000 (0 => OK)
51   HALF: 0xec00  (0 => OK)
52  INT32:  -8192/0xffffe000 (0 => OK)
52   HALF: 0xf000  (0 => OK)
53  INT32: -12288/0xffffd000 (0 => OK)
53   HALF: 0xf200  (0 => OK)
54  INT32: -16384/0xffffc000 (0 => OK)
54   HALF: 0xf400  (0 => OK)
55  INT32: -32768/0xffff8000 (0 => OK)
55   HALF: 0xf800  (0 => OK)
56  INT32: -524288/0xfff80000 (0 => OK)
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57  INT32: -8388608/0xff800000 (0 => OK)
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58  INT32: -16777216/0xff000000 (0 => OK)
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
59  INT32: -33554432/0xfe000000 (0 => OK)
59   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
60  INT32: -50331648/0xfd000000 (0 => OK)
60   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
61  INT32: -67108864/0xfc000000 (0 => OK)
61   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
62  INT32: -134217728/0xf8000000 (0 => OK)
62   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
63  INT32: -268435456/0xf0000000 (0 => OK)
63   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
64  INT32: -536870912/0xe0000000 (0 => OK)
64   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
65  INT32: -805306368/0xd0000000 (0 => OK)
65   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
66  INT32: -1073741824/0xc0000000 (0 => OK)
66   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
67  INT32: -2147483648/0x80000000 (0 => OK)
67   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
Converting fixed point int32 to half-precision
00  INT32:      0/         0 (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT32:      1/       0x1 (0 => OK)
01   HALF: 0x3800  (0 => OK)
01   HALF: 0x3400  (0 => OK)
01   HALF: 0x2c00  (0 => OK)
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02  INT32:     16/      0x10 (0 => OK)
02   HALF: 0x4800  (0 => OK)
02   HALF: 0x4400  (0 => OK)
02   HALF: 0x3c00  (0 => OK)
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03  INT32:    256/     0x100 (0 => OK)
03   HALF: 0x5800  (0 => OK)
03   HALF: 0x5400  (0 => OK)
03   HALF: 0x4c00  (0 => OK)
03   HALF: 0x01  (0 => OK)
04  INT32:   4096/    0x1000 (0 => OK)
04   HALF: 0x6800  (0 => OK)
04   HALF: 0x6400  (0 => OK)
04   HALF: 0x5c00  (0 => OK)
04   HALF: 0x10  (0 => OK)
05  INT32:  65503/    0xffdf (0 => OK)
05   HALF: 0x77fe  (0x10 =>    INEXACT )
05   HALF: 0x73fe  (0x10 =>    INEXACT )
05   HALF: 0x6bfe  (0x10 =>    INEXACT )
05   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
06  INT32:  65504/    0xffe0 (0 => OK)
06   HALF: 0x77ff  (0 => OK)
06   HALF: 0x73ff  (0 => OK)
06   HALF: 0x6bff  (0 => OK)
06   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
07  INT32:  65505/    0xffe1 (0 => OK)
07   HALF: 0x77ff  (0x10 =>    INEXACT )
07   HALF: 0x73ff  (0x10 =>    INEXACT )
07   HALF: 0x6bff  (0x10 =>    INEXACT )
07   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
08  INT32:  65535/    0xffff (0 => OK)
08   HALF: 0x77ff  (0x10 =>    INEXACT )
08   HALF: 0x73ff  (0x10 =>    INEXACT )
08   HALF: 0x6bff  (0x10 =>    INEXACT )
08   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
09  INT32:  65536/   0x10000 (0 => OK)
09   HALF: 0x7800  (0 => OK)
09   HALF: 0x7400  (0 => OK)
09   HALF: 0x6c00  (0 => OK)
09   HALF: 0x100  (0 => OK)
10  INT32: 1048576/  0x100000 (0 => OK)
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0xc00  (0x14 => OVERFLOW   INEXACT )
11  INT32: 16777215/  0xffffff (0 => OK)
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x1bff  (0x14 => OVERFLOW   INEXACT )
12  INT32: 16777216/ 0x1000000 (0 => OK)
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
13  INT32: 16777217/ 0x1000001 (0 => OK)
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
14  INT32: 268435456/0x10000000 (0 => OK)
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
15  INT32: 536870912/0x20000000 (0 => OK)
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
16  INT32: 1073741824/0x40000000 (0 => OK)
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
17  INT32: -2147483648/0x80000000 (0 => OK)
17   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
18  INT32: -2147483647/0x80000001 (0 => OK)
18   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
19  INT32: -2147483617/0x8000001f (0 => OK)
19   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
20  INT32: -2147483585/0x8000003f (0 => OK)
20   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
21  INT32: -2147483521/0x8000007f (0 => OK)
21   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
22  INT32: -2147483393/0x800000ff (0 => OK)
22   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
23  INT32: -2147483137/0x800001ff (0 => OK)
23   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
24  INT32: -2147482849/0x8000031f (0 => OK)
24   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
25  INT32: -2147481601/0x800007ff (0 => OK)
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
26  INT32: -2147479553/0x80000fff (0 => OK)
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
27  INT32: -2147418113/0x8000ffff (0 => OK)
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
28  INT32: -2146435073/0x800fffff (0 => OK)
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
29  INT32: -2130706433/0x80ffffff (0 => OK)
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xb7f0  (0x14 => OVERFLOW   INEXACT )
30  INT32: -1879048193/0x8fffffff (0 => OK)
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xb700  (0x14 => OVERFLOW   INEXACT )
31  INT32: -1610612737/0x9fffffff (0 => OK)
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xb600  (0x14 => OVERFLOW   INEXACT )
32  INT32: -1342177281/0xafffffff (0 => OK)
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xb500  (0x14 => OVERFLOW   INEXACT )
33  INT32: -1073741825/0xbfffffff (0 => OK)
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xb400  (0x14 => OVERFLOW   INEXACT )
34  INT32: -805306369/0xcfffffff (0 => OK)
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xb200  (0x14 => OVERFLOW   INEXACT )
35  INT32: -536870913/0xdfffffff (0 => OK)
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xb000  (0x14 => OVERFLOW   INEXACT )
36  INT32: -268435457/0xefffffff (0 => OK)
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xac00  (0x14 => OVERFLOW   INEXACT )
37  INT32:     -1/0xffffffff (0 => OK)
37   HALF: 0xb800  (0 => OK)
37   HALF: 0xb400  (0 => OK)
37   HALF: 0xac00  (0 => OK)
37   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
38  INT32:     -2/0xfffffffe (0 => OK)
38   HALF: 0xbc00  (0 => OK)
38   HALF: 0xb800  (0 => OK)
38   HALF: 0xb000  (0 => OK)
38   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
39  INT32:     -3/0xfffffffd (0 => OK)
39   HALF: 0xbe00  (0 => OK)
39   HALF: 0xba00  (0 => OK)
39   HALF: 0xb200  (0 => OK)
39   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
40  INT32:     -4/0xfffffffc (0 => OK)
40   HALF: 0xc000  (0 => OK)
40   HALF: 0xbc00  (0 => OK)
40   HALF: 0xb400  (0 => OK)
40   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
41  INT32:     -8/0xfffffff8 (0 => OK)
41   HALF: 0xc400  (0 => OK)
41   HALF: 0xc000  (0 => OK)
41   HALF: 0xb800  (0 => OK)
41   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
42  INT32:    -16/0xfffffff0 (0 => OK)
42   HALF: 0xc800  (0 => OK)
42   HALF: 0xc400  (0 => OK)
42   HALF: 0xbc00  (0 => OK)
42   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
43  INT32:    -32/0xffffffe0 (0 => OK)
43   HALF: 0xcc00  (0 => OK)
43   HALF: 0xc800  (0 => OK)
43   HALF: 0xc000  (0 => OK)
43   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
44  INT32:    -48/0xffffffd0 (0 => OK)
44   HALF: 0xce00  (0 => OK)
44   HALF: 0xca00  (0 => OK)
44   HALF: 0xc200  (0 => OK)
44   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
45  INT32:    -64/0xffffffc0 (0 => OK)
45   HALF: 0xd000  (0 => OK)
45   HALF: 0xcc00  (0 => OK)
45   HALF: 0xc400  (0 => OK)
45   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
46  INT32:   -128/0xffffff80 (0 => OK)
46   HALF: 0xd400  (0 => OK)
46   HALF: 0xd000  (0 => OK)
46   HALF: 0xc800  (0 => OK)
46   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
47  INT32:   -512/0xfffffe00 (0 => OK)
47   HALF: 0xdc00  (0 => OK)
47   HALF: 0xd800  (0 => OK)
47   HALF: 0xd000  (0 => OK)
47   HALF: 0x8002  (0 => OK)
48  INT32:   -768/0xfffffd00 (0 => OK)
48   HALF: 0xde00  (0 => OK)
48   HALF: 0xda00  (0 => OK)
48   HALF: 0xd200  (0 => OK)
48   HALF: 0x8003  (0 => OK)
49  INT32:  -1024/0xfffffc00 (0 => OK)
49   HALF: 0xe000  (0 => OK)
49   HALF: 0xdc00  (0 => OK)
49   HALF: 0xd400  (0 => OK)
49   HALF: 0x8004  (0 => OK)
50  INT32:  -2048/0xfffff800 (0 => OK)
50   HALF: 0xe400  (0 => OK)
50   HALF: 0xe000  (0 => OK)
50   HALF: 0xd800  (0 => OK)
50   HALF: 0x8008  (0 => OK)
51  INT32:  -4096/0xfffff000 (0 => OK)
51   HALF: 0xe800  (0 => OK)
51   HALF: 0xe400  (0 => OK)
51   HALF: 0xdc00  (0 => OK)
51   HALF: 0x8010  (0 => OK)
52  INT32:  -8192/0xffffe000 (0 => OK)
52   HALF: 0xec00  (0 => OK)
52   HALF: 0xe800  (0 => OK)
52   HALF: 0xe000  (0 => OK)
52   HALF: 0x8020  (0 => OK)
53  INT32: -12288/0xffffd000 (0 => OK)
53   HALF: 0xee00  (0 => OK)
53   HALF: 0xea00  (0 => OK)
53   HALF: 0xe200  (0 => OK)
53   HALF: 0x8030  (0 => OK)
54  INT32: -16384/0xffffc000 (0 => OK)
54   HALF: 0xf000  (0 => OK)
54   HALF: 0xec00  (0 => OK)
54   HALF: 0xe400  (0 => OK)
54   HALF: 0x8040  (0 => OK)
55  INT32: -32768/0xffff8000 (0 => OK)
55   HALF: 0xf400  (0 => OK)
55   HALF: 0xf000  (0 => OK)
55   HALF: 0xe800  (0 => OK)
55   HALF: 0x8080  (0 => OK)
56  INT32: -524288/0xfff80000 (0 => OK)
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xf800  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0x8800  (0x14 => OVERFLOW   INEXACT )
57  INT32: -8388608/0xff800000 (0 => OK)
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0x9800  (0x14 => OVERFLOW   INEXACT )
58  INT32: -16777216/0xff000000 (0 => OK)
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0x9c00  (0x14 => OVERFLOW   INEXACT )
59  INT32: -33554432/0xfe000000 (0 => OK)
59   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xa000  (0x14 => OVERFLOW   INEXACT )
60  INT32: -50331648/0xfd000000 (0 => OK)
60   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xa200  (0x14 => OVERFLOW   INEXACT )
61  INT32: -67108864/0xfc000000 (0 => OK)
61   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xa400  (0x14 => OVERFLOW   INEXACT )
62  INT32: -134217728/0xf8000000 (0 => OK)
62   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xa800  (0x14 => OVERFLOW   INEXACT )
63  INT32: -268435456/0xf0000000 (0 => OK)
63   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xac00  (0x14 => OVERFLOW   INEXACT )
64  INT32: -536870912/0xe0000000 (0 => OK)
64   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xb000  (0x14 => OVERFLOW   INEXACT )
65  INT32: -805306368/0xd0000000 (0 => OK)
65   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xb200  (0x14 => OVERFLOW   INEXACT )
66  INT32: -1073741824/0xc0000000 (0 => OK)
66   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xb400  (0x14 => OVERFLOW   INEXACT )
67  INT32: -2147483648/0x80000000 (0 => OK)
67   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
Converting fixed point int64 to half-precision
00  INT64:                    0/00000000000000000000 (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT64:                    1/0x000000000000000001 (0 => OK)
01   HALF: 0x3800  (0 => OK)
01   HALF: 0x3400  (0 => OK)
01   HALF: 0x2c00  (0 => OK)
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02  INT64:                   16/0x000000000000000010 (0 => OK)
02   HALF: 0x4800  (0 => OK)
02   HALF: 0x4400  (0 => OK)
02   HALF: 0x3c00  (0 => OK)
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03  INT64:                  256/0x000000000000000100 (0 => OK)
03   HALF: 0x5800  (0 => OK)
03   HALF: 0x5400  (0 => OK)
03   HALF: 0x4c00  (0 => OK)
03   HALF: 0x01  (0 => OK)
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04  INT64:                 4096/0x000000000000001000 (0 => OK)
04   HALF: 0x6800  (0 => OK)
04   HALF: 0x6400  (0 => OK)
04   HALF: 0x5c00  (0 => OK)
04   HALF: 0x10  (0 => OK)
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
05  INT64:                65503/0x00000000000000ffdf (0 => OK)
05   HALF: 0x77fe  (0x10 =>    INEXACT )
05   HALF: 0x73fe  (0x10 =>    INEXACT )
05   HALF: 0x6bfe  (0x10 =>    INEXACT )
05   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x07  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x03  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
06  INT64:                65504/0x00000000000000ffe0 (0 => OK)
06   HALF: 0x77ff  (0 => OK)
06   HALF: 0x73ff  (0 => OK)
06   HALF: 0x6bff  (0 => OK)
06   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x07  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x03  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
07  INT64:                65505/0x00000000000000ffe1 (0 => OK)
07   HALF: 0x77ff  (0x10 =>    INEXACT )
07   HALF: 0x73ff  (0x10 =>    INEXACT )
07   HALF: 0x6bff  (0x10 =>    INEXACT )
07   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x07  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x03  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
08  INT64:                65535/0x00000000000000ffff (0 => OK)
08   HALF: 0x77ff  (0x10 =>    INEXACT )
08   HALF: 0x73ff  (0x10 =>    INEXACT )
08   HALF: 0x6bff  (0x10 =>    INEXACT )
08   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x07  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x03  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
09  INT64:                65536/0x000000000000010000 (0 => OK)
09   HALF: 0x7800  (0 => OK)
09   HALF: 0x7400  (0 => OK)
09   HALF: 0x6c00  (0 => OK)
09   HALF: 0x100  (0 => OK)
09   HALF: 0x08  (0 => OK)
09   HALF: 0x04  (0 => OK)
09   HALF: 0x02  (0 => OK)
10  INT64:              1048576/0x000000000000100000 (0 => OK)
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0xc00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x80  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x40  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x20  (0x14 => OVERFLOW   INEXACT )
11  INT64:             16777215/0x000000000000ffffff (0 => OK)
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x1bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7ff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x3ff  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
11   HALF: 0x1ff  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
12  INT64:             16777216/0x000000000001000000 (0 => OK)
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x400  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x200  (0x14 => OVERFLOW   INEXACT )
13  INT64:             16777217/0x000000000001000001 (0 => OK)
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x400  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x200  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
14  INT64:            268435456/0x000000000010000000 (0 => OK)
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1400  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1000  (0x14 => OVERFLOW   INEXACT )
15  INT64:            536870912/0x000000000020000000 (0 => OK)
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1400  (0x14 => OVERFLOW   INEXACT )
16  INT64:           1073741824/0x000000000040000000 (0 => OK)
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x2000  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
17  INT64:           2147483648/0x000000000080000000 (0 => OK)
17   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x3800  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x2400  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x2000  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
18  INT64:          34359738368/0x000000000800000000 (0 => OK)
18   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x4800  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
19  INT64:         549755813888/0x000000008000000000 (0 => OK)
19   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x5800  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x4400  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x4000  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x3c00  (0x14 => OVERFLOW   INEXACT )
20  INT64:        8796093022208/0x000000080000000000 (0 => OK)
20   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x6800  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x5400  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x5000  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x4c00  (0x14 => OVERFLOW   INEXACT )
21  INT64:      140737488355328/0x000000800000000000 (0 => OK)
21   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7800  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x6400  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x6000  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x5c00  (0x14 => OVERFLOW   INEXACT )
22  INT64:     2251799813685248/0x000008000000000000 (0 => OK)
22   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7400  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7000  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x6c00  (0x14 => OVERFLOW   INEXACT )
23  INT64:    36028797018963968/0x000080000000000000 (0 => OK)
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24  INT64:   576460752303423488/0x000800000000000000 (0 => OK)
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
25  INT64: -9223372036854775808/0x008000000000000000 (0 => OK)
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26  INT64: -9223372036854775807/0x008000000000000001 (0 => OK)
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27  INT64: -9223372036854775777/0x00800000000000001f (0 => OK)
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28  INT64: -9223372036854775745/0x00800000000000003f (0 => OK)
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29  INT64: -9223372036854775681/0x00800000000000007f (0 => OK)
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30  INT64: -9223372036854775553/0x0080000000000000ff (0 => OK)
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31  INT64: -9223372036854775297/0x0080000000000001ff (0 => OK)
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32  INT64: -9223372036854775009/0x00800000000000031f (0 => OK)
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33  INT64: -9223372036854773761/0x0080000000000007ff (0 => OK)
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34  INT64: -9223372036854771713/0x008000000000000fff (0 => OK)
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35  INT64: -9223372036854710273/0x00800000000000ffff (0 => OK)
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36  INT64: -9223372036853727233/0x0080000000000fffff (0 => OK)
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37  INT64: -9223372036837998593/0x008000000000ffffff (0 => OK)
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38  INT64: -9223372036586340353/0x00800000000fffffff (0 => OK)
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39  INT64: -9223372032559808513/0x0080000000ffffffff (0 => OK)
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40  INT64: -9223371968135299073/0x008000000fffffffff (0 => OK)
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41  INT64: -9223370937343148033/0x00800000ffffffffff (0 => OK)
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42  INT64: -9223354444668731393/0x0080000fffffffffff (0 => OK)
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43  INT64: -9223090561878065153/0x008000ffffffffffff (0 => OK)
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44  INT64: -9218868437227405313/0x00800fffffffffffff (0 => OK)
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45  INT64: -9218868437227405313/0x00800fffffffffffff (0 => OK)
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46  INT64: -9151314442816847873/0x0080ffffffffffffff (0 => OK)
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47  INT64: -9079256848778919937/0x0081ffffffffffffff (0 => OK)
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48  INT64: -8935141660703064065/0x0083ffffffffffffff (0 => OK)
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49  INT64: -8646911284551352321/0x0087ffffffffffffff (0 => OK)
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50  INT64: -8070450532247928833/0x008fffffffffffffff (0 => OK)
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51  INT64: -6917529027641081857/0x009fffffffffffffff (0 => OK)
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52  INT64: -5764607523034234881/0x00afffffffffffffff (0 => OK)
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53  INT64: -4611686018427387905/0x00bfffffffffffffff (0 => OK)
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54  INT64: -3458764513820540929/0x00cfffffffffffffff (0 => OK)
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55  INT64: -2305843009213693953/0x00dfffffffffffffff (0 => OK)
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56  INT64: -1152921504606846977/0x00efffffffffffffff (0 => OK)
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57  INT64: -1152921504606846976/0x00f000000000000000 (0 => OK)
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58  INT64:   -18001204369948673/0x00ffc00bffffffffff (0 => OK)
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbfe  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xf7fe  (0x14 => OVERFLOW   INEXACT )
59  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
59   HALF: 0xb800  (0 => OK)
59   HALF: 0xb400  (0 => OK)
59   HALF: 0xac00  (0 => OK)
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
#### Enabling ARM Alternative Half Precision
### Rounding to nearest
Converting single-precision to half-precision
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00   HALF: 0000  (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01   HALF: 0000  (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02   HALF: 0000  (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03   HALF: 0000  (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04   HALF: 0000  (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05   HALF: 0000  (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06   HALF: 0000  (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07   HALF: 0000  (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08   HALF: 0000  (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09   HALF: 0000  (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10   HALF: 0000  (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11   HALF: 0000  (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12   HALF: 0000  (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13   HALF: 0000  (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14   HALF: 0000  (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15   HALF: 0x3c00  (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16   HALF: 0x3c00  (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17   HALF: 0x4000  (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18   HALF: 0x4000  (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19   HALF: 0x4200  (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20   HALF: 0x7bff  (0x10 =>    INEXACT )
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21   HALF: 0x7bff  (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22   HALF: 0x7bff  (0x10 =>    INEXACT )
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23   HALF: 0x7bfe  (0x10 =>    INEXACT )
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24   HALF: 0x7bfe  (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25   HALF: 0x7bfe  (0x10 =>    INEXACT )
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26   HALF: 0x7c00  (0x10 =>    INEXACT )
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27   HALF: 0x7c00  (0x10 =>    INEXACT )
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28   HALF: 0x7c00  (0x10 =>    INEXACT )
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29   HALF: 0000  (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30   HALF: 0000  (0 => OK)
Converting single-precision to double-precision
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19 DOUBLE: 3.00000000000000000000e+00 / 0x004008000000000000 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23 DOUBLE: 6.54710000000000000000e+04 / 0x0040eff7e000000000 (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24 DOUBLE: 6.54720000000000000000e+04 / 0x0040eff80000000000 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25 DOUBLE: 6.54730000000000000000e+04 / 0x0040eff82000000000 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
Converting single-precision to fixed point 32 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      2/       0x2 (0 => OK)
15  INT32:      4/       0x4 (0 => OK)
15  INT32:     16/      0x10 (0 => OK)
15  INT32:    256/     0x100 (0 => OK)
15  INT32:  65536/   0x10000 (0 => OK)
15  INT32:  65536/   0x10000 (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      2/       0x2 (0 => OK)
16  INT32:      4/       0x4 (0 => OK)
16  INT32:     16/      0x10 (0 => OK)
16  INT32:    256/     0x100 (0 => OK)
16  INT32:  65536/   0x10000 (0 => OK)
16  INT32:  65536/   0x10000 (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      4/       0x4 (0 => OK)
17  INT32:      8/       0x8 (0 => OK)
17  INT32:     32/      0x20 (0 => OK)
17  INT32:    512/     0x200 (0 => OK)
17  INT32: 131072/   0x20000 (0 => OK)
17  INT32: 131072/   0x20000 (0 => OK)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      4/       0x4 (0 => OK)
18  INT32:      8/       0x8 (0 => OK)
18  INT32:     32/      0x20 (0 => OK)
18  INT32:    512/     0x200 (0 => OK)
18  INT32: 131072/   0x20000 (0 => OK)
18  INT32: 131072/   0x20000 (0 => OK)
18  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      6/       0x6 (0 => OK)
19  INT32:     12/       0xc (0 => OK)
19  INT32:     48/      0x30 (0 => OK)
19  INT32:    768/     0x300 (0 => OK)
19  INT32: 196608/   0x30000 (0 => OK)
19  INT32: 196608/   0x30000 (0 => OK)
19  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32: 131006/   0x1ffbe (0 => OK)
20  INT32: 262012/   0x3ff7c (0 => OK)
20  INT32: 1048048/   0xffdf0 (0 => OK)
20  INT32: 16768768/  0xffdf00 (0 => OK)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32: 131008/   0x1ffc0 (0 => OK)
21  INT32: 262016/   0x3ff80 (0 => OK)
21  INT32: 1048064/   0xffe00 (0 => OK)
21  INT32: 16769024/  0xffe000 (0 => OK)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32: 131010/   0x1ffc2 (0 => OK)
22  INT32: 262020/   0x3ff84 (0 => OK)
22  INT32: 1048080/   0xffe10 (0 => OK)
22  INT32: 16769280/  0xffe100 (0 => OK)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32: 130942/   0x1ff7e (0 => OK)
23  INT32: 261884/   0x3fefc (0 => OK)
23  INT32: 1047536/   0xffbf0 (0 => OK)
23  INT32: 16760576/  0xffbf00 (0 => OK)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32: 130944/   0x1ff80 (0 => OK)
24  INT32: 261888/   0x3ff00 (0 => OK)
24  INT32: 1047552/   0xffc00 (0 => OK)
24  INT32: 16760832/  0xffc000 (0 => OK)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32: 130946/   0x1ff82 (0 => OK)
25  INT32: 261892/   0x3ff04 (0 => OK)
25  INT32: 1047568/   0xffc10 (0 => OK)
25  INT32: 16761088/  0xffc100 (0 => OK)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32: 131070/   0x1fffe (0 => OK)
26  INT32: 262140/   0x3fffc (0 => OK)
26  INT32: 1048560/   0xffff0 (0 => OK)
26  INT32: 16776960/  0xffff00 (0 => OK)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32: 131070/   0x1fffe (0 => OK)
27  INT32: 262140/   0x3fffc (0 => OK)
27  INT32: 1048560/   0xffff0 (0 => OK)
27  INT32: 16776960/  0xffff00 (0 => OK)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32: 131070/   0x1fffe (0 => OK)
28  INT32: 262140/   0x3fffc (0 => OK)
28  INT32: 1048560/   0xffff0 (0 => OK)
28  INT32: 16776960/  0xffff00 (0 => OK)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting single-precision to fixed point 64 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT64:                    2/0x000000000000000002 (0 => OK)
15  INT64:                    4/0x000000000000000004 (0 => OK)
15  INT64:                   16/0x000000000000000010 (0 => OK)
15  INT64:                  256/0x000000000000000100 (0 => OK)
15  INT64:                65536/0x000000000000010000 (0 => OK)
15  INT64:           4294967296/0x000000000100000000 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT64:                    2/0x000000000000000002 (0 => OK)
16  INT64:                    4/0x000000000000000004 (0 => OK)
16  INT64:                   16/0x000000000000000010 (0 => OK)
16  INT64:                  256/0x000000000000000100 (0 => OK)
16  INT64:                65536/0x000000000000010000 (0 => OK)
16  INT64:           4294967296/0x000000000100000000 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT64:                    4/0x000000000000000004 (0 => OK)
17  INT64:                    8/0x000000000000000008 (0 => OK)
17  INT64:                   32/0x000000000000000020 (0 => OK)
17  INT64:                  512/0x000000000000000200 (0 => OK)
17  INT64:               131072/0x000000000000020000 (0 => OK)
17  INT64:           8589934592/0x000000000200000000 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT64:                    4/0x000000000000000004 (0 => OK)
18  INT64:                    8/0x000000000000000008 (0 => OK)
18  INT64:                   32/0x000000000000000020 (0 => OK)
18  INT64:                  512/0x000000000000000200 (0 => OK)
18  INT64:               131072/0x000000000000020000 (0 => OK)
18  INT64:           8589934592/0x000000000200000000 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT64:                    6/0x000000000000000006 (0 => OK)
19  INT64:                   12/0x00000000000000000c (0 => OK)
19  INT64:                   48/0x000000000000000030 (0 => OK)
19  INT64:                  768/0x000000000000000300 (0 => OK)
19  INT64:               196608/0x000000000000030000 (0 => OK)
19  INT64:          12884901888/0x000000000300000000 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT64:               131006/0x00000000000001ffbe (0 => OK)
20  INT64:               262012/0x00000000000003ff7c (0 => OK)
20  INT64:              1048048/0x0000000000000ffdf0 (0 => OK)
20  INT64:             16768768/0x000000000000ffdf00 (0 => OK)
20  INT64:           4292804608/0x0000000000ffdf0000 (0 => OK)
20  INT64:      281333242789888/0x000000ffdf00000000 (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT64:               131008/0x00000000000001ffc0 (0 => OK)
21  INT64:               262016/0x00000000000003ff80 (0 => OK)
21  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
21  INT64:             16769024/0x000000000000ffe000 (0 => OK)
21  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
21  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT64:               131010/0x00000000000001ffc2 (0 => OK)
22  INT64:               262020/0x00000000000003ff84 (0 => OK)
22  INT64:              1048080/0x0000000000000ffe10 (0 => OK)
22  INT64:             16769280/0x000000000000ffe100 (0 => OK)
22  INT64:           4292935680/0x0000000000ffe10000 (0 => OK)
22  INT64:      281341832724480/0x000000ffe100000000 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT64:               130942/0x00000000000001ff7e (0 => OK)
23  INT64:               261884/0x00000000000003fefc (0 => OK)
23  INT64:              1047536/0x0000000000000ffbf0 (0 => OK)
23  INT64:             16760576/0x000000000000ffbf00 (0 => OK)
23  INT64:           4290707456/0x0000000000ffbf0000 (0 => OK)
23  INT64:      281195803836416/0x000000ffbf00000000 (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT64:               130944/0x00000000000001ff80 (0 => OK)
24  INT64:               261888/0x00000000000003ff00 (0 => OK)
24  INT64:              1047552/0x0000000000000ffc00 (0 => OK)
24  INT64:             16760832/0x000000000000ffc000 (0 => OK)
24  INT64:           4290772992/0x0000000000ffc00000 (0 => OK)
24  INT64:      281200098803712/0x000000ffc000000000 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT64:               130946/0x00000000000001ff82 (0 => OK)
25  INT64:               261892/0x00000000000003ff04 (0 => OK)
25  INT64:              1047568/0x0000000000000ffc10 (0 => OK)
25  INT64:             16761088/0x000000000000ffc100 (0 => OK)
25  INT64:           4290838528/0x0000000000ffc10000 (0 => OK)
25  INT64:      281204393771008/0x000000ffc100000000 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT64:               131070/0x00000000000001fffe (0 => OK)
26  INT64:               262140/0x00000000000003fffc (0 => OK)
26  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
26  INT64:             16776960/0x000000000000ffff00 (0 => OK)
26  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
26  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT64:               131070/0x00000000000001fffe (0 => OK)
27  INT64:               262140/0x00000000000003fffc (0 => OK)
27  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
27  INT64:             16776960/0x000000000000ffff00 (0 => OK)
27  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
27  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT64:               131070/0x00000000000001fffe (0 => OK)
28  INT64:               262140/0x00000000000003fffc (0 => OK)
28  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
28  INT64:             16776960/0x000000000000ffff00 (0 => OK)
28  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
28  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
Converting single-precision to 32 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      1/       0x1 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      1/       0x1 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      2/       0x2 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      2/       0x2 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      3/       0x3 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32:  65503/    0xffdf (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32:  65504/    0xffe0 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32:  65505/    0xffe1 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32:  65471/    0xffbf (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32:  65472/    0xffc0 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32:  65473/    0xffc1 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32:  65535/    0xffff (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32:  65535/    0xffff (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32:  65535/    0xffff (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting single-precision to 64 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      1/       0x1 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      1/       0x1 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      2/       0x2 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      2/       0x2 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      3/       0x3 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32:  65503/    0xffdf (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32:  65504/    0xffe0 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32:  65505/    0xffe1 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32:  65471/    0xffbf (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32:  65472/    0xffc0 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32:  65473/    0xffc1 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32:  65535/    0xffff (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32:  65535/    0xffff (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32:  65535/    0xffff (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting double-precision to half-precision
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00   HALF: 0000  (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01   HALF: 0x8000  (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02   HALF: 0xffff  (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03   HALF: 0xffff  (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04   HALF: 0xffff  (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05   HALF: 0xffff  (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06   HALF: 0xffff  (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07   HALF: 0xffff  (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08   HALF: 0xffff  (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09   HALF: 0xc000  (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10   HALF: 0xbc00  (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13   HALF: 0000  (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17   HALF: 0x3ff  (0x18 =>  UNDERFLOW  INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18   HALF: 0x400  (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19   HALF: 0x3c00  (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20   HALF: 0x3c01  (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24   HALF: 0x3c00  (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25   HALF: 0x4000  (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26   HALF: 0x4170  (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27   HALF: 0x4248  (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28   HALF: 0x7bff  (0x10 =>    INEXACT )
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29   HALF: 0x7bff  (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30   HALF: 0x7bff  (0x10 =>    INEXACT )
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31   HALF: 0x7fff  (0x10 =>    INEXACT )
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32   HALF: 0x7fff  (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33   HALF: 0x7fff  (0x10 =>    INEXACT )
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34   HALF: 0x7fff  (0x1 =>     INVALID)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35   HALF: 0x7fff  (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36   HALF: 0x7fff  (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38   HALF: 0x7fff  (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39   HALF: 0x7fff  (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40   HALF: 0000  (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41   HALF: 0000  (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42   HALF: 0000  (0x1 =>     INVALID)
Converting double-precision to single-precision
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00 SINGLE: nan / 0x7fe00000  (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01 SINGLE: -nan / 0xffc00000  (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02 SINGLE: -inf / 0xff800000  (0 => OK)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03 SINGLE: -inf / 0xff800000  (0x14 => OVERFLOW   INEXACT )
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04 SINGLE: -inf / 0xff800000  (0x14 => OVERFLOW   INEXACT )
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05 SINGLE: -3.40282346638528859812e+38 / 0xff7fffff  (0 => OK)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06 SINGLE: -3.40282346638528859812e+38 / 0xff7fffff  (0 => OK)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07 SINGLE: -1.11100004769645909791e+31 / 0xf30c3a59  (0x10 =>    INEXACT )
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08 SINGLE: -1.11100003258488635273e+30 / 0xf1605d5b  (0x10 =>    INEXACT )
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09 SINGLE: -2.00000000000000000000e+00 / 0xc0000000  (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10 SINGLE: -1.00000000000000000000e+00 / 0xbf800000  (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11 SINGLE: -0.00000000000000000000e+00 / 0x80000000  (0x18 =>  UNDERFLOW  INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12 SINGLE: -1.17549435082228750797e-38 / 0x80800000  (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14 SINGLE: 1.17549435082228750797e-38 / 0x00800000  (0 => OK)
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15 SINGLE: 2.98023223876953125000e-08 / 0x33000000  (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16 SINGLE: 5.96045985901128005935e-08 / 0x337ffff3  (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17 SINGLE: 6.09755988989491015673e-05 / 0x387fc00d  (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18 SINGLE: 6.10351999057456851006e-05 / 0x38800006  (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20 SINGLE: 1.00097656250000000000e+00 / 0x3f802000  (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26 SINGLE: 2.71828174591064453125e+00 / 0x402df854  (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27 SINGLE: 3.14159274101257324219e+00 / 0x40490fdb  (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31 SINGLE: 1.31007000000000000000e+05 / 0x47ffdf80  (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32 SINGLE: 1.31008000000000000000e+05 / 0x47ffe000  (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33 SINGLE: 1.31009000000000000000e+05 / 0x47ffe080  (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34 SINGLE: 2.14748364800000000000e+09 / 0x4f000000  (0x10 =>    INEXACT )
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35 SINGLE: 3.40282346638528859812e+38 / 0x7f7fffff  (0 => OK)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36 SINGLE: 3.40282346638528859812e+38 / 0x7f7fffff  (0 => OK)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38 SINGLE: inf / 0x7f800000  (0x14 => OVERFLOW   INEXACT )
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39 SINGLE: inf / 0x7f800000  (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40 SINGLE: nan / 0x7fc00000  (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41 SINGLE: nan / 0x7fc00000  (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42 SINGLE: nan / 0x7fe00000  (0x1 =>     INVALID)
Converting double-precision to fixed point 32 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT32:     -7/0xfffffff9 (0x10 =>    INEXACT )
18  INT32:    -14/0xfffffff2 (0x10 =>    INEXACT )
18  INT32:    -58/0xffffffc6 (0x10 =>    INEXACT )
18  INT32:   -936/0xfffffc58 (0x10 =>    INEXACT )
18  INT32: -239739/0xfffc5785 (0x10 =>    INEXACT )
18  INT32: -239739/0xfffc5785 (0x10 =>    INEXACT )
18  INT32: -2147483648/0x80000000 (0x11 =>    INEXACT INVALID)
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:    -66/0xffffffbe (0x10 =>    INEXACT )
23  INT32:    -66/0xffffffbe (0x10 =>    INEXACT )
23  INT32: -4331784/0xffbde6f8 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
Converting double-precision to fixed point 64 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
09  INT64:                   -8/0x00fffffffffffffff8 (0 => OK)
09  INT64:                  -32/0x00ffffffffffffffe0 (0 => OK)
09  INT64:                 -512/0x00fffffffffffffe00 (0 => OK)
09  INT64:              -131072/0x00fffffffffffe0000 (0 => OK)
09  INT64:          -8589934592/0x00fffffffe00000000 (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
10  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
10  INT64:                  -16/0x00fffffffffffffff0 (0 => OK)
10  INT64:                 -256/0x00ffffffffffffff00 (0 => OK)
10  INT64:               -65536/0x00ffffffffffff0000 (0 => OK)
10  INT64:          -4294967296/0x00ffffffff00000000 (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                  128/0x000000000000000080 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                  255/0x0000000000000000ff (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    3/0x000000000000000003 (0x10 =>    INEXACT )
17  INT64:               261888/0x00000000000003ff00 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    4/0x000000000000000004 (0x10 =>    INEXACT )
18  INT64:               262144/0x000000000000040000 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT64:                    2/0x000000000000000002 (0 => OK)
19  INT64:                    4/0x000000000000000004 (0 => OK)
19  INT64:                   16/0x000000000000000010 (0 => OK)
19  INT64:                  256/0x000000000000000100 (0 => OK)
19  INT64:                65536/0x000000000000010000 (0 => OK)
19  INT64:           4294967296/0x000000000100000000 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT64:                    2/0x000000000000000002 (0x10 =>    INEXACT )
20  INT64:                    4/0x000000000000000004 (0x10 =>    INEXACT )
20  INT64:                   16/0x000000000000000010 (0x10 =>    INEXACT )
20  INT64:                  256/0x000000000000000100 (0x10 =>    INEXACT )
20  INT64:                65600/0x000000000000010040 (0x10 =>    INEXACT )
20  INT64:           4299161600/0x000000000100400000 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT64:                    2/0x000000000000000002 (0 => OK)
24  INT64:                    4/0x000000000000000004 (0 => OK)
24  INT64:                   16/0x000000000000000010 (0 => OK)
24  INT64:                  256/0x000000000000000100 (0 => OK)
24  INT64:                65536/0x000000000000010000 (0 => OK)
24  INT64:           4294967296/0x000000000100000000 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT64:                    4/0x000000000000000004 (0 => OK)
25  INT64:                    8/0x000000000000000008 (0 => OK)
25  INT64:                   32/0x000000000000000020 (0 => OK)
25  INT64:                  512/0x000000000000000200 (0 => OK)
25  INT64:               131072/0x000000000000020000 (0 => OK)
25  INT64:           8589934592/0x000000000200000000 (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT64:                    5/0x000000000000000005 (0x10 =>    INEXACT )
26  INT64:                   10/0x00000000000000000a (0x10 =>    INEXACT )
26  INT64:                   43/0x00000000000000002b (0x10 =>    INEXACT )
26  INT64:                  695/0x0000000000000002b7 (0x10 =>    INEXACT )
26  INT64:               178145/0x00000000000002b7e1 (0x10 =>    INEXACT )
26  INT64:          11674931554/0x0000000002b7e15162 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT64:                    6/0x000000000000000006 (0x10 =>    INEXACT )
27  INT64:                   12/0x00000000000000000c (0x10 =>    INEXACT )
27  INT64:                   50/0x000000000000000032 (0x10 =>    INEXACT )
27  INT64:                  804/0x000000000000000324 (0x10 =>    INEXACT )
27  INT64:               205887/0x00000000000003243f (0x10 =>    INEXACT )
27  INT64:          13493037704/0x0000000003243f6a88 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT64:               131006/0x00000000000001ffbe (0 => OK)
28  INT64:               262012/0x00000000000003ff7c (0 => OK)
28  INT64:              1048048/0x0000000000000ffdf0 (0 => OK)
28  INT64:             16768768/0x000000000000ffdf00 (0 => OK)
28  INT64:           4292804608/0x0000000000ffdf0000 (0 => OK)
28  INT64:      281333242789888/0x000000ffdf00000000 (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT64:               131008/0x00000000000001ffc0 (0 => OK)
29  INT64:               262016/0x00000000000003ff80 (0 => OK)
29  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
29  INT64:             16769024/0x000000000000ffe000 (0 => OK)
29  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
29  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT64:               131010/0x00000000000001ffc2 (0 => OK)
30  INT64:               262020/0x00000000000003ff84 (0 => OK)
30  INT64:              1048080/0x0000000000000ffe10 (0 => OK)
30  INT64:             16769280/0x000000000000ffe100 (0 => OK)
30  INT64:           4292935680/0x0000000000ffe10000 (0 => OK)
30  INT64:      281341832724480/0x000000ffe100000000 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT64:               262014/0x00000000000003ff7e (0 => OK)
31  INT64:               524028/0x00000000000007fefc (0 => OK)
31  INT64:              2096112/0x0000000000001ffbf0 (0 => OK)
31  INT64:             33537792/0x000000000001ffbf00 (0 => OK)
31  INT64:           8585674752/0x0000000001ffbf0000 (0 => OK)
31  INT64:      562670780547072/0x000001ffbf00000000 (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT64:               262016/0x00000000000003ff80 (0 => OK)
32  INT64:               524032/0x00000000000007ff00 (0 => OK)
32  INT64:              2096128/0x0000000000001ffc00 (0 => OK)
32  INT64:             33538048/0x000000000001ffc000 (0 => OK)
32  INT64:           8585740288/0x0000000001ffc00000 (0 => OK)
32  INT64:      562675075514368/0x000001ffc000000000 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT64:               262018/0x00000000000003ff82 (0 => OK)
33  INT64:               524036/0x00000000000007ff04 (0 => OK)
33  INT64:              2096144/0x0000000000001ffc10 (0 => OK)
33  INT64:             33538304/0x000000000001ffc100 (0 => OK)
33  INT64:           8585805824/0x0000000001ffc10000 (0 => OK)
33  INT64:      562679370481664/0x000001ffc100000000 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT64:           4294967294/0x0000000000fffffffe (0 => OK)
34  INT64:           8589934588/0x0000000001fffffffc (0 => OK)
34  INT64:          34359738352/0x0000000007fffffff0 (0 => OK)
34  INT64:         549755813632/0x000000007fffffff00 (0 => OK)
34  INT64:      140737488289792/0x0000007fffffff0000 (0 => OK)
34  INT64:  9223372032559808512/0x007fffffff00000000 (0 => OK)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting double-precision to 32 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT32:     -2/0xfffffffe (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT32:     -1/0xffffffff (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12  INT32:      0/         0 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14  INT32:      0/         0 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT32:      0/         0 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT32:      0/         0 (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT32:      0/         0 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT32:      0/         0 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT32:      1/       0x1 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT32:      1/       0x1 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT32:      0/         0 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT32:      0/         0 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT32:      0/         0 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT32:      1/       0x1 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT32:      2/       0x2 (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT32:      2/       0x2 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT32:      3/       0x3 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT32:  65503/    0xffdf (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT32:  65504/    0xffe0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT32:  65505/    0xffe1 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT32: 131007/   0x1ffbf (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT32: 131008/   0x1ffc0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT32: 131009/   0x1ffc1 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT32: 2147483647/0x7fffffff (0 => OK)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37  INT32:      0/         0 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT32:      0/         0 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT32:      0/         0 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT32:      0/         0 (0x1 =>     INVALID)
Converting double-precision to 64 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT64:                    1/0x000000000000000001 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT64:                    1/0x000000000000000001 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT64:                    1/0x000000000000000001 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT64:                    2/0x000000000000000002 (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT64:                    2/0x000000000000000002 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT64:                    3/0x000000000000000003 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT64:                65503/0x00000000000000ffdf (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT64:                65504/0x00000000000000ffe0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT64:                65505/0x00000000000000ffe1 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT64:               131007/0x00000000000001ffbf (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT64:               131008/0x00000000000001ffc0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT64:               131009/0x00000000000001ffc1 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT64:           2147483647/0x00000000007fffffff (0 => OK)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to double-precision
00   HALF: 0xffff  (0 => OK)
00 DOUBLE: -1.31008000000000000000e+05 / 0x00c0fffc0000000000 (0 => OK)
01   HALF: 0xfcff  (0 => OK)
01 DOUBLE: -8.18560000000000000000e+04 / 0x00c0f3fc0000000000 (0 => OK)
02   HALF: 0xfc01  (0 => OK)
02 DOUBLE: -6.56000000000000000000e+04 / 0x00c0f0040000000000 (0 => OK)
03   HALF: 0xfc00  (0 => OK)
03 DOUBLE: -6.55360000000000000000e+04 / 0x00c0f0000000000000 (0 => OK)
04   HALF: 0xfbff  (0 => OK)
04 DOUBLE: -6.55040000000000000000e+04 / 0x00c0effc0000000000 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05 DOUBLE: -6.54720000000000000000e+04 / 0x00c0eff80000000000 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
08   HALF: 0x8001  (0 => OK)
08 DOUBLE: -5.96046447753906250000e-08 / 0x00be70000000000000 (0 => OK)
09   HALF: 0x8000  (0 => OK)
09 DOUBLE: -0.00000000000000000000e+00 / 0x008000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11 DOUBLE: 5.96046447753906250000e-08 / 0x003e70000000000000 (0 => OK)
12   HALF: 0x3c00  (0 => OK)
12 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13 DOUBLE: 6.54720000000000000000e+04 / 0x0040eff80000000000 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15 DOUBLE: 6.55360000000000000000e+04 / 0x0040f0000000000000 (0 => OK)
16   HALF: 0x7c01  (0 => OK)
16 DOUBLE: 6.56000000000000000000e+04 / 0x0040f0040000000000 (0 => OK)
17   HALF: 0x7cff  (0 => OK)
17 DOUBLE: 8.18560000000000000000e+04 / 0x0040f3fc0000000000 (0 => OK)
18   HALF: 0x7fff  (0 => OK)
18 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
Converting half-precision to single-precision
00   HALF: 0xffff  (0 => OK)
00 SINGLE: -1.31008000000000000000e+05 / 0xc7ffe000  (0 => OK)
01   HALF: 0xfcff  (0 => OK)
01 SINGLE: -8.18560000000000000000e+04 / 0xc79fe000  (0 => OK)
02   HALF: 0xfc01  (0 => OK)
02 SINGLE: -6.56000000000000000000e+04 / 0xc7802000  (0 => OK)
03   HALF: 0xfc00  (0 => OK)
03 SINGLE: -6.55360000000000000000e+04 / 0xc7800000  (0 => OK)
04   HALF: 0xfbff  (0 => OK)
04 SINGLE: -6.55040000000000000000e+04 / 0xc77fe000  (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05 SINGLE: -6.54720000000000000000e+04 / 0xc77fc000  (0 => OK)
06   HALF: 0xc000  (0 => OK)
06 SINGLE: -2.00000000000000000000e+00 / 0xc0000000  (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07 SINGLE: -1.00000000000000000000e+00 / 0xbf800000  (0 => OK)
08   HALF: 0x8001  (0 => OK)
08 SINGLE: -5.96046447753906250000e-08 / 0xb3800000  (0 => OK)
09   HALF: 0x8000  (0 => OK)
09 SINGLE: -0.00000000000000000000e+00 / 0x80000000  (0 => OK)
10   HALF: 0000  (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11   HALF: 0x01  (0 => OK)
11 SINGLE: 5.96046447753906250000e-08 / 0x33800000  (0 => OK)
12   HALF: 0x3c00  (0 => OK)
12 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15 SINGLE: 6.55360000000000000000e+04 / 0x47800000  (0 => OK)
16   HALF: 0x7c01  (0 => OK)
16 SINGLE: 6.56000000000000000000e+04 / 0x47802000  (0 => OK)
17   HALF: 0x7cff  (0 => OK)
17 SINGLE: 8.18560000000000000000e+04 / 0x479fe000  (0 => OK)
18   HALF: 0x7fff  (0 => OK)
18 SINGLE: 1.31008000000000000000e+05 / 0x47ffe000  (0 => OK)
Converting half-precision to fixed point 64 bit int
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:              -131008/0x00fffffffffffe0040 (0 => OK)
04  INT64:              -262016/0x00fffffffffffc0080 (0 => OK)
04  INT64:             -1048064/0x00fffffffffff00200 (0 => OK)
04  INT64:            -16769024/0x00ffffffffff002000 (0 => OK)
04  INT64:          -4292870144/0x00ffffffff00200000 (0 => OK)
04  INT64:     -281337537757184/0x00ffff002000000000 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:              -130944/0x00fffffffffffe0080 (0 => OK)
05  INT64:              -261888/0x00fffffffffffc0100 (0 => OK)
05  INT64:             -1047552/0x00fffffffffff00400 (0 => OK)
05  INT64:            -16760832/0x00ffffffffff004000 (0 => OK)
05  INT64:          -4290772992/0x00ffffffff00400000 (0 => OK)
05  INT64:     -281200098803712/0x00ffff004000000000 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
06  INT64:                   -8/0x00fffffffffffffff8 (0 => OK)
06  INT64:                  -32/0x00ffffffffffffffe0 (0 => OK)
06  INT64:                 -512/0x00fffffffffffffe00 (0 => OK)
06  INT64:              -131072/0x00fffffffffffe0000 (0 => OK)
06  INT64:          -8589934592/0x00fffffffe00000000 (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
07  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
07  INT64:                  -16/0x00fffffffffffffff0 (0 => OK)
07  INT64:                 -256/0x00ffffffffffffff00 (0 => OK)
07  INT64:               -65536/0x00ffffffffffff0000 (0 => OK)
07  INT64:          -4294967296/0x00ffffffff00000000 (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                 -256/0x00ffffffffffffff00 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                  256/0x000000000000000100 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    2/0x000000000000000002 (0 => OK)
12  INT64:                    4/0x000000000000000004 (0 => OK)
12  INT64:                   16/0x000000000000000010 (0 => OK)
12  INT64:                  256/0x000000000000000100 (0 => OK)
12  INT64:                65536/0x000000000000010000 (0 => OK)
12  INT64:           4294967296/0x000000000100000000 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:               130944/0x00000000000001ff80 (0 => OK)
13  INT64:               261888/0x00000000000003ff00 (0 => OK)
13  INT64:              1047552/0x0000000000000ffc00 (0 => OK)
13  INT64:             16760832/0x000000000000ffc000 (0 => OK)
13  INT64:           4290772992/0x0000000000ffc00000 (0 => OK)
13  INT64:      281200098803712/0x000000ffc000000000 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:               131008/0x00000000000001ffc0 (0 => OK)
14  INT64:               262016/0x00000000000003ff80 (0 => OK)
14  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
14  INT64:             16769024/0x000000000000ffe000 (0 => OK)
14  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
14  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to fixed point 32 bit int
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT32:     -4/0xfffffffc (0x10 =>    INEXACT )
06  INT32:     -8/0xfffffff8 (0x10 =>    INEXACT )
06  INT32:    -32/0xffffffe0 (0x10 =>    INEXACT )
06  INT32:   -515/0xfffffdfd (0x10 =>    INEXACT )
06  INT32: -131840/0xfffdfd00 (0x10 =>    INEXACT )
06  INT32: -131840/0xfffdfd00 (0x10 =>    INEXACT )
06  INT32: -2147483648/0x80000000 (0x11 =>    INEXACT INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:     -2/0xfffffffe (0x10 =>    INEXACT )
07  INT32:   -514/0xfffffdfe (0x10 =>    INEXACT )
07  INT32:   -514/0xfffffdfe (0x10 =>    INEXACT )
07  INT32: -33746944/0xfdfd1000 (0x10 =>    INEXACT )
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      2/       0x2 (0x10 =>    INEXACT )
12  INT32:    512/     0x200 (0x10 =>    INEXACT )
12  INT32:    512/     0x200 (0x10 =>    INEXACT )
12  INT32: 33615872/ 0x200f000 (0x10 =>    INEXACT )
13   HALF: 0x7bfe  (0 => OK)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14   HALF: 0x7bff  (0 => OK)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15   HALF: 0x7c00  (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 64 bit int
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:               -65504/0x00ffffffffffff0020 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:               -65472/0x00ffffffffffff0040 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    1/0x000000000000000001 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:                65472/0x00000000000000ffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:                65504/0x00000000000000ffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to 32 bit int
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32:      0/         0 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32: -65504/0xffff0020 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT32: -65472/0xffff0040 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT32:     -2/0xfffffffe (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT32:     -1/0xffffffff (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      1/       0x1 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT32:  65472/    0xffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT32:  65504/    0xffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32:      0/         0 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32:      0/         0 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 64 bit uint
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    1/0x000000000000000001 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:                65472/0x00000000000000ffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:                65504/0x00000000000000ffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:                   -1/0x00ffffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to 32 bit uint
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32:      0/         0 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32:      0/         0 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32:      0/         0 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT32:      0/         0 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT32:      0/         0 (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT32:      0/         0 (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      1/       0x1 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT32:  65472/    0xffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT32:  65504/    0xffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT32:     -1/0xffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32:      0/         0 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32:      0/         0 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 16 bit uint
00   HALF: 0xffff  (0 => OK)
00   HALF: 0000  (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01   HALF: 0000  (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02   HALF: 0000  (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03   HALF: 0000  (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04   HALF: 0000  (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05   HALF: 0000  (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06   HALF: 0000  (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07   HALF: 0000  (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08   HALF: 0000  (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09   HALF: 0000  (0 => OK)
10   HALF: 0000  (0 => OK)
10   HALF: 0000  (0 => OK)
11   HALF: 0x01  (0 => OK)
11   HALF: 0000  (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12   HALF: 0x01  (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13   HALF: 0xffc0  (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14   HALF: 0xffe0  (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15   HALF: 0xffff  (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16   HALF: 0000  (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17   HALF: 0000  (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18   HALF: 0000  (0x1 =>     INVALID)
Converting signed int32 to half-precision
00  INT32:      0/         0 (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT32:      1/       0x1 (0 => OK)
01   HALF: 0x3c00  (0 => OK)
02  INT32:     16/      0x10 (0 => OK)
02   HALF: 0x4c00  (0 => OK)
03  INT32:    256/     0x100 (0 => OK)
03   HALF: 0x5c00  (0 => OK)
04  INT32:   4096/    0x1000 (0 => OK)
04   HALF: 0x6c00  (0 => OK)
05  INT32:  65503/    0xffdf (0 => OK)
05   HALF: 0x7bff  (0x10 =>    INEXACT )
06  INT32:  65504/    0xffe0 (0 => OK)
06   HALF: 0x7bff  (0 => OK)
07  INT32:  65505/    0xffe1 (0 => OK)
07   HALF: 0x7bff  (0x10 =>    INEXACT )
08  INT32:  65535/    0xffff (0 => OK)
08   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
09  INT32:  65536/   0x10000 (0 => OK)
09   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10  INT32: 1048576/  0x100000 (0 => OK)
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11  INT32: 16777215/  0xffffff (0 => OK)
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12  INT32: 16777216/ 0x1000000 (0 => OK)
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13  INT32: 16777217/ 0x1000001 (0 => OK)
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14  INT32: 268435456/0x10000000 (0 => OK)
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15  INT32: 536870912/0x20000000 (0 => OK)
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16  INT32: 1073741824/0x40000000 (0 => OK)
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
17  INT32: -2147483648/0x80000000 (0 => OK)
17   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
18  INT32: -2147483647/0x80000001 (0 => OK)
18   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
19  INT32: -2147483617/0x8000001f (0 => OK)
19   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
20  INT32: -2147483585/0x8000003f (0 => OK)
20   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
21  INT32: -2147483521/0x8000007f (0 => OK)
21   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
22  INT32: -2147483393/0x800000ff (0 => OK)
22   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
23  INT32: -2147483137/0x800001ff (0 => OK)
23   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
24  INT32: -2147482849/0x8000031f (0 => OK)
24   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25  INT32: -2147481601/0x800007ff (0 => OK)
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26  INT32: -2147479553/0x80000fff (0 => OK)
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27  INT32: -2147418113/0x8000ffff (0 => OK)
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28  INT32: -2146435073/0x800fffff (0 => OK)
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29  INT32: -2130706433/0x80ffffff (0 => OK)
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30  INT32: -1879048193/0x8fffffff (0 => OK)
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31  INT32: -1610612737/0x9fffffff (0 => OK)
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32  INT32: -1342177281/0xafffffff (0 => OK)
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33  INT32: -1073741825/0xbfffffff (0 => OK)
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34  INT32: -805306369/0xcfffffff (0 => OK)
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35  INT32: -536870913/0xdfffffff (0 => OK)
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36  INT32: -268435457/0xefffffff (0 => OK)
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37  INT32:     -1/0xffffffff (0 => OK)
37   HALF: 0xbc00  (0 => OK)
38  INT32:     -2/0xfffffffe (0 => OK)
38   HALF: 0xc000  (0 => OK)
39  INT32:     -3/0xfffffffd (0 => OK)
39   HALF: 0xc200  (0 => OK)
40  INT32:     -4/0xfffffffc (0 => OK)
40   HALF: 0xc400  (0 => OK)
41  INT32:     -8/0xfffffff8 (0 => OK)
41   HALF: 0xc800  (0 => OK)
42  INT32:    -16/0xfffffff0 (0 => OK)
42   HALF: 0xcc00  (0 => OK)
43  INT32:    -32/0xffffffe0 (0 => OK)
43   HALF: 0xd000  (0 => OK)
44  INT32:    -48/0xffffffd0 (0 => OK)
44   HALF: 0xd200  (0 => OK)
45  INT32:    -64/0xffffffc0 (0 => OK)
45   HALF: 0xd400  (0 => OK)
46  INT32:   -128/0xffffff80 (0 => OK)
46   HALF: 0xd800  (0 => OK)
47  INT32:   -512/0xfffffe00 (0 => OK)
47   HALF: 0xe000  (0 => OK)
48  INT32:   -768/0xfffffd00 (0 => OK)
48   HALF: 0xe200  (0 => OK)
49  INT32:  -1024/0xfffffc00 (0 => OK)
49   HALF: 0xe400  (0 => OK)
50  INT32:  -2048/0xfffff800 (0 => OK)
50   HALF: 0xe800  (0 => OK)
51  INT32:  -4096/0xfffff000 (0 => OK)
51   HALF: 0xec00  (0 => OK)
52  INT32:  -8192/0xffffe000 (0 => OK)
52   HALF: 0xf000  (0 => OK)
53  INT32: -12288/0xffffd000 (0 => OK)
53   HALF: 0xf200  (0 => OK)
54  INT32: -16384/0xffffc000 (0 => OK)
54   HALF: 0xf400  (0 => OK)
55  INT32: -32768/0xffff8000 (0 => OK)
55   HALF: 0xf800  (0 => OK)
56  INT32: -524288/0xfff80000 (0 => OK)
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57  INT32: -8388608/0xff800000 (0 => OK)
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58  INT32: -16777216/0xff000000 (0 => OK)
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
59  INT32: -33554432/0xfe000000 (0 => OK)
59   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
60  INT32: -50331648/0xfd000000 (0 => OK)
60   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
61  INT32: -67108864/0xfc000000 (0 => OK)
61   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
62  INT32: -134217728/0xf8000000 (0 => OK)
62   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
63  INT32: -268435456/0xf0000000 (0 => OK)
63   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
64  INT32: -536870912/0xe0000000 (0 => OK)
64   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
65  INT32: -805306368/0xd0000000 (0 => OK)
65   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
66  INT32: -1073741824/0xc0000000 (0 => OK)
66   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
67  INT32: -2147483648/0x80000000 (0 => OK)
67   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
Converting fixed point int32 to half-precision
00  INT32:      0/         0 (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT32:      1/       0x1 (0 => OK)
01   HALF: 0x3800  (0 => OK)
01   HALF: 0x3400  (0 => OK)
01   HALF: 0x2c00  (0 => OK)
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02  INT32:     16/      0x10 (0 => OK)
02   HALF: 0x4800  (0 => OK)
02   HALF: 0x4400  (0 => OK)
02   HALF: 0x3c00  (0 => OK)
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03  INT32:    256/     0x100 (0 => OK)
03   HALF: 0x5800  (0 => OK)
03   HALF: 0x5400  (0 => OK)
03   HALF: 0x4c00  (0 => OK)
03   HALF: 0x01  (0 => OK)
04  INT32:   4096/    0x1000 (0 => OK)
04   HALF: 0x6800  (0 => OK)
04   HALF: 0x6400  (0 => OK)
04   HALF: 0x5c00  (0 => OK)
04   HALF: 0x10  (0 => OK)
05  INT32:  65503/    0xffdf (0 => OK)
05   HALF: 0x77ff  (0x10 =>    INEXACT )
05   HALF: 0x73ff  (0x10 =>    INEXACT )
05   HALF: 0x6bff  (0x10 =>    INEXACT )
05   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
06  INT32:  65504/    0xffe0 (0 => OK)
06   HALF: 0x77ff  (0 => OK)
06   HALF: 0x73ff  (0 => OK)
06   HALF: 0x6bff  (0 => OK)
06   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
07  INT32:  65505/    0xffe1 (0 => OK)
07   HALF: 0x77ff  (0x10 =>    INEXACT )
07   HALF: 0x73ff  (0x10 =>    INEXACT )
07   HALF: 0x6bff  (0x10 =>    INEXACT )
07   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
08  INT32:  65535/    0xffff (0 => OK)
08   HALF: 0x7800  (0x10 =>    INEXACT )
08   HALF: 0x7400  (0x10 =>    INEXACT )
08   HALF: 0x6c00  (0x10 =>    INEXACT )
08   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
09  INT32:  65536/   0x10000 (0 => OK)
09   HALF: 0x7800  (0 => OK)
09   HALF: 0x7400  (0 => OK)
09   HALF: 0x6c00  (0 => OK)
09   HALF: 0x100  (0 => OK)
10  INT32: 1048576/  0x100000 (0 => OK)
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0xc00  (0x14 => OVERFLOW   INEXACT )
11  INT32: 16777215/  0xffffff (0 => OK)
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
12  INT32: 16777216/ 0x1000000 (0 => OK)
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
13  INT32: 16777217/ 0x1000001 (0 => OK)
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
14  INT32: 268435456/0x10000000 (0 => OK)
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
15  INT32: 536870912/0x20000000 (0 => OK)
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
16  INT32: 1073741824/0x40000000 (0 => OK)
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
17  INT32: -2147483648/0x80000000 (0 => OK)
17   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
18  INT32: -2147483647/0x80000001 (0 => OK)
18   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
19  INT32: -2147483617/0x8000001f (0 => OK)
19   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
20  INT32: -2147483585/0x8000003f (0 => OK)
20   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
21  INT32: -2147483521/0x8000007f (0 => OK)
21   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
22  INT32: -2147483393/0x800000ff (0 => OK)
22   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
23  INT32: -2147483137/0x800001ff (0 => OK)
23   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
24  INT32: -2147482849/0x8000031f (0 => OK)
24   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
25  INT32: -2147481601/0x800007ff (0 => OK)
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
26  INT32: -2147479553/0x80000fff (0 => OK)
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
27  INT32: -2147418113/0x8000ffff (0 => OK)
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
28  INT32: -2146435073/0x800fffff (0 => OK)
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
29  INT32: -2130706433/0x80ffffff (0 => OK)
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xb7f0  (0x14 => OVERFLOW   INEXACT )
30  INT32: -1879048193/0x8fffffff (0 => OK)
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xb700  (0x14 => OVERFLOW   INEXACT )
31  INT32: -1610612737/0x9fffffff (0 => OK)
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xb600  (0x14 => OVERFLOW   INEXACT )
32  INT32: -1342177281/0xafffffff (0 => OK)
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xb500  (0x14 => OVERFLOW   INEXACT )
33  INT32: -1073741825/0xbfffffff (0 => OK)
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xb400  (0x14 => OVERFLOW   INEXACT )
34  INT32: -805306369/0xcfffffff (0 => OK)
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xb200  (0x14 => OVERFLOW   INEXACT )
35  INT32: -536870913/0xdfffffff (0 => OK)
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xb000  (0x14 => OVERFLOW   INEXACT )
36  INT32: -268435457/0xefffffff (0 => OK)
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xac00  (0x14 => OVERFLOW   INEXACT )
37  INT32:     -1/0xffffffff (0 => OK)
37   HALF: 0xb800  (0 => OK)
37   HALF: 0xb400  (0 => OK)
37   HALF: 0xac00  (0 => OK)
37   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
38  INT32:     -2/0xfffffffe (0 => OK)
38   HALF: 0xbc00  (0 => OK)
38   HALF: 0xb800  (0 => OK)
38   HALF: 0xb000  (0 => OK)
38   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
39  INT32:     -3/0xfffffffd (0 => OK)
39   HALF: 0xbe00  (0 => OK)
39   HALF: 0xba00  (0 => OK)
39   HALF: 0xb200  (0 => OK)
39   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
40  INT32:     -4/0xfffffffc (0 => OK)
40   HALF: 0xc000  (0 => OK)
40   HALF: 0xbc00  (0 => OK)
40   HALF: 0xb400  (0 => OK)
40   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
41  INT32:     -8/0xfffffff8 (0 => OK)
41   HALF: 0xc400  (0 => OK)
41   HALF: 0xc000  (0 => OK)
41   HALF: 0xb800  (0 => OK)
41   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
42  INT32:    -16/0xfffffff0 (0 => OK)
42   HALF: 0xc800  (0 => OK)
42   HALF: 0xc400  (0 => OK)
42   HALF: 0xbc00  (0 => OK)
42   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
43  INT32:    -32/0xffffffe0 (0 => OK)
43   HALF: 0xcc00  (0 => OK)
43   HALF: 0xc800  (0 => OK)
43   HALF: 0xc000  (0 => OK)
43   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
44  INT32:    -48/0xffffffd0 (0 => OK)
44   HALF: 0xce00  (0 => OK)
44   HALF: 0xca00  (0 => OK)
44   HALF: 0xc200  (0 => OK)
44   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
45  INT32:    -64/0xffffffc0 (0 => OK)
45   HALF: 0xd000  (0 => OK)
45   HALF: 0xcc00  (0 => OK)
45   HALF: 0xc400  (0 => OK)
45   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
46  INT32:   -128/0xffffff80 (0 => OK)
46   HALF: 0xd400  (0 => OK)
46   HALF: 0xd000  (0 => OK)
46   HALF: 0xc800  (0 => OK)
46   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
47  INT32:   -512/0xfffffe00 (0 => OK)
47   HALF: 0xdc00  (0 => OK)
47   HALF: 0xd800  (0 => OK)
47   HALF: 0xd000  (0 => OK)
47   HALF: 0x8002  (0 => OK)
48  INT32:   -768/0xfffffd00 (0 => OK)
48   HALF: 0xde00  (0 => OK)
48   HALF: 0xda00  (0 => OK)
48   HALF: 0xd200  (0 => OK)
48   HALF: 0x8003  (0 => OK)
49  INT32:  -1024/0xfffffc00 (0 => OK)
49   HALF: 0xe000  (0 => OK)
49   HALF: 0xdc00  (0 => OK)
49   HALF: 0xd400  (0 => OK)
49   HALF: 0x8004  (0 => OK)
50  INT32:  -2048/0xfffff800 (0 => OK)
50   HALF: 0xe400  (0 => OK)
50   HALF: 0xe000  (0 => OK)
50   HALF: 0xd800  (0 => OK)
50   HALF: 0x8008  (0 => OK)
51  INT32:  -4096/0xfffff000 (0 => OK)
51   HALF: 0xe800  (0 => OK)
51   HALF: 0xe400  (0 => OK)
51   HALF: 0xdc00  (0 => OK)
51   HALF: 0x8010  (0 => OK)
52  INT32:  -8192/0xffffe000 (0 => OK)
52   HALF: 0xec00  (0 => OK)
52   HALF: 0xe800  (0 => OK)
52   HALF: 0xe000  (0 => OK)
52   HALF: 0x8020  (0 => OK)
53  INT32: -12288/0xffffd000 (0 => OK)
53   HALF: 0xee00  (0 => OK)
53   HALF: 0xea00  (0 => OK)
53   HALF: 0xe200  (0 => OK)
53   HALF: 0x8030  (0 => OK)
54  INT32: -16384/0xffffc000 (0 => OK)
54   HALF: 0xf000  (0 => OK)
54   HALF: 0xec00  (0 => OK)
54   HALF: 0xe400  (0 => OK)
54   HALF: 0x8040  (0 => OK)
55  INT32: -32768/0xffff8000 (0 => OK)
55   HALF: 0xf400  (0 => OK)
55   HALF: 0xf000  (0 => OK)
55   HALF: 0xe800  (0 => OK)
55   HALF: 0x8080  (0 => OK)
56  INT32: -524288/0xfff80000 (0 => OK)
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xf800  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0x8800  (0x14 => OVERFLOW   INEXACT )
57  INT32: -8388608/0xff800000 (0 => OK)
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0x9800  (0x14 => OVERFLOW   INEXACT )
58  INT32: -16777216/0xff000000 (0 => OK)
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0x9c00  (0x14 => OVERFLOW   INEXACT )
59  INT32: -33554432/0xfe000000 (0 => OK)
59   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xa000  (0x14 => OVERFLOW   INEXACT )
60  INT32: -50331648/0xfd000000 (0 => OK)
60   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xa200  (0x14 => OVERFLOW   INEXACT )
61  INT32: -67108864/0xfc000000 (0 => OK)
61   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xa400  (0x14 => OVERFLOW   INEXACT )
62  INT32: -134217728/0xf8000000 (0 => OK)
62   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xa800  (0x14 => OVERFLOW   INEXACT )
63  INT32: -268435456/0xf0000000 (0 => OK)
63   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xac00  (0x14 => OVERFLOW   INEXACT )
64  INT32: -536870912/0xe0000000 (0 => OK)
64   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xb000  (0x14 => OVERFLOW   INEXACT )
65  INT32: -805306368/0xd0000000 (0 => OK)
65   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xb200  (0x14 => OVERFLOW   INEXACT )
66  INT32: -1073741824/0xc0000000 (0 => OK)
66   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xb400  (0x14 => OVERFLOW   INEXACT )
67  INT32: -2147483648/0x80000000 (0 => OK)
67   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
Converting fixed point int64 to half-precision
00  INT64:                    0/00000000000000000000 (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT64:                    1/0x000000000000000001 (0 => OK)
01   HALF: 0x3800  (0 => OK)
01   HALF: 0x3400  (0 => OK)
01   HALF: 0x2c00  (0 => OK)
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02  INT64:                   16/0x000000000000000010 (0 => OK)
02   HALF: 0x4800  (0 => OK)
02   HALF: 0x4400  (0 => OK)
02   HALF: 0x3c00  (0 => OK)
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03  INT64:                  256/0x000000000000000100 (0 => OK)
03   HALF: 0x5800  (0 => OK)
03   HALF: 0x5400  (0 => OK)
03   HALF: 0x4c00  (0 => OK)
03   HALF: 0x01  (0 => OK)
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04  INT64:                 4096/0x000000000000001000 (0 => OK)
04   HALF: 0x6800  (0 => OK)
04   HALF: 0x6400  (0 => OK)
04   HALF: 0x5c00  (0 => OK)
04   HALF: 0x10  (0 => OK)
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
05  INT64:                65503/0x00000000000000ffdf (0 => OK)
05   HALF: 0x77ff  (0x10 =>    INEXACT )
05   HALF: 0x73ff  (0x10 =>    INEXACT )
05   HALF: 0x6bff  (0x10 =>    INEXACT )
05   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x08  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x04  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x02  (0x18 =>  UNDERFLOW  INEXACT )
06  INT64:                65504/0x00000000000000ffe0 (0 => OK)
06   HALF: 0x77ff  (0 => OK)
06   HALF: 0x73ff  (0 => OK)
06   HALF: 0x6bff  (0 => OK)
06   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x08  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x04  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x02  (0x18 =>  UNDERFLOW  INEXACT )
07  INT64:                65505/0x00000000000000ffe1 (0 => OK)
07   HALF: 0x77ff  (0x10 =>    INEXACT )
07   HALF: 0x73ff  (0x10 =>    INEXACT )
07   HALF: 0x6bff  (0x10 =>    INEXACT )
07   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x08  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x04  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x02  (0x18 =>  UNDERFLOW  INEXACT )
08  INT64:                65535/0x00000000000000ffff (0 => OK)
08   HALF: 0x7800  (0x10 =>    INEXACT )
08   HALF: 0x7400  (0x10 =>    INEXACT )
08   HALF: 0x6c00  (0x10 =>    INEXACT )
08   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x08  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x04  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x02  (0x18 =>  UNDERFLOW  INEXACT )
09  INT64:                65536/0x000000000000010000 (0 => OK)
09   HALF: 0x7800  (0 => OK)
09   HALF: 0x7400  (0 => OK)
09   HALF: 0x6c00  (0 => OK)
09   HALF: 0x100  (0 => OK)
09   HALF: 0x08  (0 => OK)
09   HALF: 0x04  (0 => OK)
09   HALF: 0x02  (0 => OK)
10  INT64:              1048576/0x000000000000100000 (0 => OK)
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0xc00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x80  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x40  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x20  (0x14 => OVERFLOW   INEXACT )
11  INT64:             16777215/0x000000000000ffffff (0 => OK)
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x400  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
11   HALF: 0x200  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
12  INT64:             16777216/0x000000000001000000 (0 => OK)
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x400  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x200  (0x14 => OVERFLOW   INEXACT )
13  INT64:             16777217/0x000000000001000001 (0 => OK)
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x400  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x200  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
14  INT64:            268435456/0x000000000010000000 (0 => OK)
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1400  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1000  (0x14 => OVERFLOW   INEXACT )
15  INT64:            536870912/0x000000000020000000 (0 => OK)
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1400  (0x14 => OVERFLOW   INEXACT )
16  INT64:           1073741824/0x000000000040000000 (0 => OK)
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x2000  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
17  INT64:           2147483648/0x000000000080000000 (0 => OK)
17   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x3800  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x2400  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x2000  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
18  INT64:          34359738368/0x000000000800000000 (0 => OK)
18   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x4800  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
19  INT64:         549755813888/0x000000008000000000 (0 => OK)
19   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x5800  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x4400  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x4000  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x3c00  (0x14 => OVERFLOW   INEXACT )
20  INT64:        8796093022208/0x000000080000000000 (0 => OK)
20   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x6800  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x5400  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x5000  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x4c00  (0x14 => OVERFLOW   INEXACT )
21  INT64:      140737488355328/0x000000800000000000 (0 => OK)
21   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7800  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x6400  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x6000  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x5c00  (0x14 => OVERFLOW   INEXACT )
22  INT64:     2251799813685248/0x000008000000000000 (0 => OK)
22   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7400  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7000  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x6c00  (0x14 => OVERFLOW   INEXACT )
23  INT64:    36028797018963968/0x000080000000000000 (0 => OK)
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24  INT64:   576460752303423488/0x000800000000000000 (0 => OK)
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
25  INT64: -9223372036854775808/0x008000000000000000 (0 => OK)
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26  INT64: -9223372036854775807/0x008000000000000001 (0 => OK)
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27  INT64: -9223372036854775777/0x00800000000000001f (0 => OK)
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28  INT64: -9223372036854775745/0x00800000000000003f (0 => OK)
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29  INT64: -9223372036854775681/0x00800000000000007f (0 => OK)
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30  INT64: -9223372036854775553/0x0080000000000000ff (0 => OK)
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31  INT64: -9223372036854775297/0x0080000000000001ff (0 => OK)
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32  INT64: -9223372036854775009/0x00800000000000031f (0 => OK)
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33  INT64: -9223372036854773761/0x0080000000000007ff (0 => OK)
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34  INT64: -9223372036854771713/0x008000000000000fff (0 => OK)
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35  INT64: -9223372036854710273/0x00800000000000ffff (0 => OK)
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36  INT64: -9223372036853727233/0x0080000000000fffff (0 => OK)
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37  INT64: -9223372036837998593/0x008000000000ffffff (0 => OK)
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38  INT64: -9223372036586340353/0x00800000000fffffff (0 => OK)
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39  INT64: -9223372032559808513/0x0080000000ffffffff (0 => OK)
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40  INT64: -9223371968135299073/0x008000000fffffffff (0 => OK)
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41  INT64: -9223370937343148033/0x00800000ffffffffff (0 => OK)
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42  INT64: -9223354444668731393/0x0080000fffffffffff (0 => OK)
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43  INT64: -9223090561878065153/0x008000ffffffffffff (0 => OK)
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44  INT64: -9218868437227405313/0x00800fffffffffffff (0 => OK)
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45  INT64: -9218868437227405313/0x00800fffffffffffff (0 => OK)
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46  INT64: -9151314442816847873/0x0080ffffffffffffff (0 => OK)
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47  INT64: -9079256848778919937/0x0081ffffffffffffff (0 => OK)
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48  INT64: -8935141660703064065/0x0083ffffffffffffff (0 => OK)
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49  INT64: -8646911284551352321/0x0087ffffffffffffff (0 => OK)
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50  INT64: -8070450532247928833/0x008fffffffffffffff (0 => OK)
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51  INT64: -6917529027641081857/0x009fffffffffffffff (0 => OK)
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52  INT64: -5764607523034234881/0x00afffffffffffffff (0 => OK)
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53  INT64: -4611686018427387905/0x00bfffffffffffffff (0 => OK)
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54  INT64: -3458764513820540929/0x00cfffffffffffffff (0 => OK)
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55  INT64: -2305843009213693953/0x00dfffffffffffffff (0 => OK)
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56  INT64: -1152921504606846977/0x00efffffffffffffff (0 => OK)
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57  INT64: -1152921504606846976/0x00f000000000000000 (0 => OK)
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58  INT64:   -18001204369948673/0x00ffc00bffffffffff (0 => OK)
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xf7ff  (0x14 => OVERFLOW   INEXACT )
59  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
59   HALF: 0xb800  (0 => OK)
59   HALF: 0xb400  (0 => OK)
59   HALF: 0xac00  (0 => OK)
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
### Rounding upwards
Converting single-precision to half-precision
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00   HALF: 0000  (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01   HALF: 0000  (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02   HALF: 0000  (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03   HALF: 0000  (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04   HALF: 0000  (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05   HALF: 0000  (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06   HALF: 0000  (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07   HALF: 0000  (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08   HALF: 0000  (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09   HALF: 0000  (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10   HALF: 0000  (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11   HALF: 0000  (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12   HALF: 0000  (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13   HALF: 0000  (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14   HALF: 0000  (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15   HALF: 0x3c00  (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16   HALF: 0x3c00  (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17   HALF: 0x4000  (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18   HALF: 0x4000  (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19   HALF: 0x4200  (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20   HALF: 0x7bff  (0x10 =>    INEXACT )
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21   HALF: 0x7bff  (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22   HALF: 0x7c00  (0x10 =>    INEXACT )
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23   HALF: 0x7bfe  (0x10 =>    INEXACT )
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24   HALF: 0x7bfe  (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25   HALF: 0x7bff  (0x10 =>    INEXACT )
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26   HALF: 0x7c00  (0x10 =>    INEXACT )
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27   HALF: 0x7c00  (0x10 =>    INEXACT )
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28   HALF: 0x7c00  (0x10 =>    INEXACT )
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29   HALF: 0000  (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30   HALF: 0000  (0 => OK)
Converting single-precision to double-precision
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19 DOUBLE: 3.00000000000000000000e+00 / 0x004008000000000000 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23 DOUBLE: 6.54710000000000000000e+04 / 0x0040eff7e000000000 (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24 DOUBLE: 6.54720000000000000000e+04 / 0x0040eff80000000000 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25 DOUBLE: 6.54730000000000000000e+04 / 0x0040eff82000000000 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
Converting single-precision to fixed point 32 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      2/       0x2 (0 => OK)
15  INT32:      4/       0x4 (0 => OK)
15  INT32:     16/      0x10 (0 => OK)
15  INT32:    256/     0x100 (0 => OK)
15  INT32:  65536/   0x10000 (0 => OK)
15  INT32:  65536/   0x10000 (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      2/       0x2 (0 => OK)
16  INT32:      4/       0x4 (0 => OK)
16  INT32:     16/      0x10 (0 => OK)
16  INT32:    256/     0x100 (0 => OK)
16  INT32:  65536/   0x10000 (0 => OK)
16  INT32:  65536/   0x10000 (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      4/       0x4 (0 => OK)
17  INT32:      8/       0x8 (0 => OK)
17  INT32:     32/      0x20 (0 => OK)
17  INT32:    512/     0x200 (0 => OK)
17  INT32: 131072/   0x20000 (0 => OK)
17  INT32: 131072/   0x20000 (0 => OK)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      4/       0x4 (0 => OK)
18  INT32:      8/       0x8 (0 => OK)
18  INT32:     32/      0x20 (0 => OK)
18  INT32:    512/     0x200 (0 => OK)
18  INT32: 131072/   0x20000 (0 => OK)
18  INT32: 131072/   0x20000 (0 => OK)
18  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      6/       0x6 (0 => OK)
19  INT32:     12/       0xc (0 => OK)
19  INT32:     48/      0x30 (0 => OK)
19  INT32:    768/     0x300 (0 => OK)
19  INT32: 196608/   0x30000 (0 => OK)
19  INT32: 196608/   0x30000 (0 => OK)
19  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32: 131006/   0x1ffbe (0 => OK)
20  INT32: 262012/   0x3ff7c (0 => OK)
20  INT32: 1048048/   0xffdf0 (0 => OK)
20  INT32: 16768768/  0xffdf00 (0 => OK)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32: 131008/   0x1ffc0 (0 => OK)
21  INT32: 262016/   0x3ff80 (0 => OK)
21  INT32: 1048064/   0xffe00 (0 => OK)
21  INT32: 16769024/  0xffe000 (0 => OK)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32: 131010/   0x1ffc2 (0 => OK)
22  INT32: 262020/   0x3ff84 (0 => OK)
22  INT32: 1048080/   0xffe10 (0 => OK)
22  INT32: 16769280/  0xffe100 (0 => OK)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32: 130942/   0x1ff7e (0 => OK)
23  INT32: 261884/   0x3fefc (0 => OK)
23  INT32: 1047536/   0xffbf0 (0 => OK)
23  INT32: 16760576/  0xffbf00 (0 => OK)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32: 130944/   0x1ff80 (0 => OK)
24  INT32: 261888/   0x3ff00 (0 => OK)
24  INT32: 1047552/   0xffc00 (0 => OK)
24  INT32: 16760832/  0xffc000 (0 => OK)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32: 130946/   0x1ff82 (0 => OK)
25  INT32: 261892/   0x3ff04 (0 => OK)
25  INT32: 1047568/   0xffc10 (0 => OK)
25  INT32: 16761088/  0xffc100 (0 => OK)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32: 131070/   0x1fffe (0 => OK)
26  INT32: 262140/   0x3fffc (0 => OK)
26  INT32: 1048560/   0xffff0 (0 => OK)
26  INT32: 16776960/  0xffff00 (0 => OK)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32: 131070/   0x1fffe (0 => OK)
27  INT32: 262140/   0x3fffc (0 => OK)
27  INT32: 1048560/   0xffff0 (0 => OK)
27  INT32: 16776960/  0xffff00 (0 => OK)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32: 131070/   0x1fffe (0 => OK)
28  INT32: 262140/   0x3fffc (0 => OK)
28  INT32: 1048560/   0xffff0 (0 => OK)
28  INT32: 16776960/  0xffff00 (0 => OK)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting single-precision to fixed point 64 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT64:                    2/0x000000000000000002 (0 => OK)
15  INT64:                    4/0x000000000000000004 (0 => OK)
15  INT64:                   16/0x000000000000000010 (0 => OK)
15  INT64:                  256/0x000000000000000100 (0 => OK)
15  INT64:                65536/0x000000000000010000 (0 => OK)
15  INT64:           4294967296/0x000000000100000000 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT64:                    2/0x000000000000000002 (0 => OK)
16  INT64:                    4/0x000000000000000004 (0 => OK)
16  INT64:                   16/0x000000000000000010 (0 => OK)
16  INT64:                  256/0x000000000000000100 (0 => OK)
16  INT64:                65536/0x000000000000010000 (0 => OK)
16  INT64:           4294967296/0x000000000100000000 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT64:                    4/0x000000000000000004 (0 => OK)
17  INT64:                    8/0x000000000000000008 (0 => OK)
17  INT64:                   32/0x000000000000000020 (0 => OK)
17  INT64:                  512/0x000000000000000200 (0 => OK)
17  INT64:               131072/0x000000000000020000 (0 => OK)
17  INT64:           8589934592/0x000000000200000000 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT64:                    4/0x000000000000000004 (0 => OK)
18  INT64:                    8/0x000000000000000008 (0 => OK)
18  INT64:                   32/0x000000000000000020 (0 => OK)
18  INT64:                  512/0x000000000000000200 (0 => OK)
18  INT64:               131072/0x000000000000020000 (0 => OK)
18  INT64:           8589934592/0x000000000200000000 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT64:                    6/0x000000000000000006 (0 => OK)
19  INT64:                   12/0x00000000000000000c (0 => OK)
19  INT64:                   48/0x000000000000000030 (0 => OK)
19  INT64:                  768/0x000000000000000300 (0 => OK)
19  INT64:               196608/0x000000000000030000 (0 => OK)
19  INT64:          12884901888/0x000000000300000000 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT64:               131006/0x00000000000001ffbe (0 => OK)
20  INT64:               262012/0x00000000000003ff7c (0 => OK)
20  INT64:              1048048/0x0000000000000ffdf0 (0 => OK)
20  INT64:             16768768/0x000000000000ffdf00 (0 => OK)
20  INT64:           4292804608/0x0000000000ffdf0000 (0 => OK)
20  INT64:      281333242789888/0x000000ffdf00000000 (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT64:               131008/0x00000000000001ffc0 (0 => OK)
21  INT64:               262016/0x00000000000003ff80 (0 => OK)
21  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
21  INT64:             16769024/0x000000000000ffe000 (0 => OK)
21  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
21  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT64:               131010/0x00000000000001ffc2 (0 => OK)
22  INT64:               262020/0x00000000000003ff84 (0 => OK)
22  INT64:              1048080/0x0000000000000ffe10 (0 => OK)
22  INT64:             16769280/0x000000000000ffe100 (0 => OK)
22  INT64:           4292935680/0x0000000000ffe10000 (0 => OK)
22  INT64:      281341832724480/0x000000ffe100000000 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT64:               130942/0x00000000000001ff7e (0 => OK)
23  INT64:               261884/0x00000000000003fefc (0 => OK)
23  INT64:              1047536/0x0000000000000ffbf0 (0 => OK)
23  INT64:             16760576/0x000000000000ffbf00 (0 => OK)
23  INT64:           4290707456/0x0000000000ffbf0000 (0 => OK)
23  INT64:      281195803836416/0x000000ffbf00000000 (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT64:               130944/0x00000000000001ff80 (0 => OK)
24  INT64:               261888/0x00000000000003ff00 (0 => OK)
24  INT64:              1047552/0x0000000000000ffc00 (0 => OK)
24  INT64:             16760832/0x000000000000ffc000 (0 => OK)
24  INT64:           4290772992/0x0000000000ffc00000 (0 => OK)
24  INT64:      281200098803712/0x000000ffc000000000 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT64:               130946/0x00000000000001ff82 (0 => OK)
25  INT64:               261892/0x00000000000003ff04 (0 => OK)
25  INT64:              1047568/0x0000000000000ffc10 (0 => OK)
25  INT64:             16761088/0x000000000000ffc100 (0 => OK)
25  INT64:           4290838528/0x0000000000ffc10000 (0 => OK)
25  INT64:      281204393771008/0x000000ffc100000000 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT64:               131070/0x00000000000001fffe (0 => OK)
26  INT64:               262140/0x00000000000003fffc (0 => OK)
26  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
26  INT64:             16776960/0x000000000000ffff00 (0 => OK)
26  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
26  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT64:               131070/0x00000000000001fffe (0 => OK)
27  INT64:               262140/0x00000000000003fffc (0 => OK)
27  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
27  INT64:             16776960/0x000000000000ffff00 (0 => OK)
27  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
27  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT64:               131070/0x00000000000001fffe (0 => OK)
28  INT64:               262140/0x00000000000003fffc (0 => OK)
28  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
28  INT64:             16776960/0x000000000000ffff00 (0 => OK)
28  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
28  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
Converting single-precision to 32 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      1/       0x1 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      1/       0x1 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      2/       0x2 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      2/       0x2 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      3/       0x3 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32:  65503/    0xffdf (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32:  65504/    0xffe0 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32:  65505/    0xffe1 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32:  65471/    0xffbf (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32:  65472/    0xffc0 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32:  65473/    0xffc1 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32:  65535/    0xffff (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32:  65535/    0xffff (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32:  65535/    0xffff (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting single-precision to 64 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      1/       0x1 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      1/       0x1 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      2/       0x2 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      2/       0x2 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      3/       0x3 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32:  65503/    0xffdf (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32:  65504/    0xffe0 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32:  65505/    0xffe1 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32:  65471/    0xffbf (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32:  65472/    0xffc0 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32:  65473/    0xffc1 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32:  65535/    0xffff (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32:  65535/    0xffff (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32:  65535/    0xffff (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting double-precision to half-precision
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00   HALF: 0000  (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01   HALF: 0x8000  (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02   HALF: 0xffff  (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03   HALF: 0xffff  (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04   HALF: 0xffff  (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05   HALF: 0xffff  (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06   HALF: 0xffff  (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07   HALF: 0xffff  (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08   HALF: 0xffff  (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09   HALF: 0xc000  (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10   HALF: 0xbc00  (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13   HALF: 0000  (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
16 DOUBLE: 5.96046000000000015662e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17   HALF: 0x400  (0x18 =>  UNDERFLOW  INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18   HALF: 0x401  (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19   HALF: 0x3c00  (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20   HALF: 0x3c01  (0 => OK)
21 DOUBLE: 2.22507385850720138310e-308 / 0x000010000000000000 (0 => OK)
21   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
22 DOUBLE: 1.37899728486072282844e-308 / 0x000009ea82a2287680 (0 => OK)
22   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
23 DOUBLE: 1.49147387366816238764e-308 / 0x00000ab98fba843210 (0 => OK)
23   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24   HALF: 0x3c00  (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25   HALF: 0x4000  (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26   HALF: 0x4170  (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27   HALF: 0x4249  (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28   HALF: 0x7bff  (0x10 =>    INEXACT )
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29   HALF: 0x7bff  (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30   HALF: 0x7c00  (0x10 =>    INEXACT )
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31   HALF: 0x7fff  (0x10 =>    INEXACT )
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32   HALF: 0x7fff  (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33   HALF: 0x7fff  (0x1 =>     INVALID)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34   HALF: 0x7fff  (0x1 =>     INVALID)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35   HALF: 0x7fff  (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36   HALF: 0x7fff  (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38   HALF: 0x7fff  (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39   HALF: 0x7fff  (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40   HALF: 0000  (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41   HALF: 0000  (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42   HALF: 0000  (0x1 =>     INVALID)
Converting double-precision to single-precision
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00 SINGLE: nan / 0x7fe00000  (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01 SINGLE: -nan / 0xffc00000  (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02 SINGLE: -inf / 0xff800000  (0 => OK)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03 SINGLE: -3.40282346638528859811e+38 / 0xff7fffff  (0x14 => OVERFLOW   INEXACT )
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04 SINGLE: -3.40282346638528859811e+38 / 0xff7fffff  (0x14 => OVERFLOW   INEXACT )
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05 SINGLE: -3.40282346638528859811e+38 / 0xff7fffff  (0 => OK)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06 SINGLE: -3.40282346638528859811e+38 / 0xff7fffff  (0 => OK)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07 SINGLE: -1.11099992680387713644e+31 / 0xf30c3a58  (0x10 =>    INEXACT )
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08 SINGLE: -1.11099995702702262681e+30 / 0xf1605d5a  (0x10 =>    INEXACT )
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09 SINGLE: -2.00000000000000000000e+00 / 0xc0000000  (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10 SINGLE: -1.00000000000000000000e+00 / 0xbf800000  (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11 SINGLE: -0.00000000000000000000e+00 / 0x80000000  (0x18 =>  UNDERFLOW  INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12 SINGLE: -1.17549435082228750796e-38 / 0x80800000  (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14 SINGLE: 1.17549435082228750797e-38 / 0x00800000  (0 => OK)
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15 SINGLE: 2.98023259404089913006e-08 / 0x33000001  (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015662e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16 SINGLE: 5.96046021428264793940e-08 / 0x337ffff4  (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17 SINGLE: 6.09756025369279086590e-05 / 0x387fc00e  (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18 SINGLE: 6.10352071817032992840e-05 / 0x38800007  (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20 SINGLE: 1.00097656250000000000e+00 / 0x3f802000  (0 => OK)
21 DOUBLE: 2.22507385850720138310e-308 / 0x000010000000000000 (0 => OK)
21 SINGLE: 1.40129846432481707093e-45 / 0x00000001  (0x18 =>  UNDERFLOW  INEXACT )
22 DOUBLE: 1.37899728486072282844e-308 / 0x000009ea82a2287680 (0 => OK)
22 SINGLE: 1.40129846432481707093e-45 / 0x00000001  (0x18 =>  UNDERFLOW  INEXACT )
23 DOUBLE: 1.49147387366816238764e-308 / 0x00000ab98fba843210 (0 => OK)
23 SINGLE: 1.40129846432481707093e-45 / 0x00000001  (0x18 =>  UNDERFLOW  INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26 SINGLE: 2.71828198432922363282e+00 / 0x402df855  (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27 SINGLE: 3.14159274101257324219e+00 / 0x40490fdb  (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31 SINGLE: 1.31007000000000000000e+05 / 0x47ffdf80  (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32 SINGLE: 1.31008000000000000000e+05 / 0x47ffe000  (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33 SINGLE: 1.31009000000000000000e+05 / 0x47ffe080  (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34 SINGLE: 2.14748364800000000000e+09 / 0x4f000000  (0x10 =>    INEXACT )
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35 SINGLE: 3.40282346638528859812e+38 / 0x7f7fffff  (0 => OK)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36 SINGLE: 3.40282346638528859812e+38 / 0x7f7fffff  (0 => OK)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37 SINGLE: 1.40129846432481707093e-45 / 0x00000001  (0x18 =>  UNDERFLOW  INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38 SINGLE: inf / 0x7f800000  (0x14 => OVERFLOW   INEXACT )
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39 SINGLE: inf / 0x7f800000  (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40 SINGLE: nan / 0x7fc00000  (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41 SINGLE: nan / 0x7fc00000  (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42 SINGLE: nan / 0x7fe00000  (0x1 =>     INVALID)
Converting double-precision to fixed point 32 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015662e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT32:     -7/0xfffffff9 (0x10 =>    INEXACT )
18  INT32:    -14/0xfffffff2 (0x10 =>    INEXACT )
18  INT32:    -58/0xffffffc6 (0x10 =>    INEXACT )
18  INT32:   -936/0xfffffc58 (0x10 =>    INEXACT )
18  INT32: -239739/0xfffc5785 (0x10 =>    INEXACT )
18  INT32: -239739/0xfffc5785 (0x10 =>    INEXACT )
18  INT32: -2147483648/0x80000000 (0x11 =>    INEXACT INVALID)
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
21 DOUBLE: 2.22507385850720138310e-308 / 0x000010000000000000 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
22 DOUBLE: 1.37899728486072282844e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238764e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:    -66/0xffffffbe (0x10 =>    INEXACT )
23  INT32:    -66/0xffffffbe (0x10 =>    INEXACT )
23  INT32: -4331784/0xffbde6f8 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
Converting double-precision to fixed point 64 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
09  INT64:                   -8/0x00fffffffffffffff8 (0 => OK)
09  INT64:                  -32/0x00ffffffffffffffe0 (0 => OK)
09  INT64:                 -512/0x00fffffffffffffe00 (0 => OK)
09  INT64:              -131072/0x00fffffffffffe0000 (0 => OK)
09  INT64:          -8589934592/0x00fffffffe00000000 (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
10  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
10  INT64:                  -16/0x00fffffffffffffff0 (0 => OK)
10  INT64:                 -256/0x00ffffffffffffff00 (0 => OK)
10  INT64:               -65536/0x00ffffffffffff0000 (0 => OK)
10  INT64:          -4294967296/0x00ffffffff00000000 (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                  128/0x000000000000000080 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015662e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                  255/0x0000000000000000ff (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    3/0x000000000000000003 (0x10 =>    INEXACT )
17  INT64:               261888/0x00000000000003ff00 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    4/0x000000000000000004 (0x10 =>    INEXACT )
18  INT64:               262144/0x000000000000040000 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT64:                    2/0x000000000000000002 (0 => OK)
19  INT64:                    4/0x000000000000000004 (0 => OK)
19  INT64:                   16/0x000000000000000010 (0 => OK)
19  INT64:                  256/0x000000000000000100 (0 => OK)
19  INT64:                65536/0x000000000000010000 (0 => OK)
19  INT64:           4294967296/0x000000000100000000 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT64:                    2/0x000000000000000002 (0x10 =>    INEXACT )
20  INT64:                    4/0x000000000000000004 (0x10 =>    INEXACT )
20  INT64:                   16/0x000000000000000010 (0x10 =>    INEXACT )
20  INT64:                  256/0x000000000000000100 (0x10 =>    INEXACT )
20  INT64:                65600/0x000000000000010040 (0x10 =>    INEXACT )
20  INT64:           4299161600/0x000000000100400000 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138310e-308 / 0x000010000000000000 (0 => OK)
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282844e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238764e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT64:                    2/0x000000000000000002 (0 => OK)
24  INT64:                    4/0x000000000000000004 (0 => OK)
24  INT64:                   16/0x000000000000000010 (0 => OK)
24  INT64:                  256/0x000000000000000100 (0 => OK)
24  INT64:                65536/0x000000000000010000 (0 => OK)
24  INT64:           4294967296/0x000000000100000000 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT64:                    4/0x000000000000000004 (0 => OK)
25  INT64:                    8/0x000000000000000008 (0 => OK)
25  INT64:                   32/0x000000000000000020 (0 => OK)
25  INT64:                  512/0x000000000000000200 (0 => OK)
25  INT64:               131072/0x000000000000020000 (0 => OK)
25  INT64:           8589934592/0x000000000200000000 (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT64:                    5/0x000000000000000005 (0x10 =>    INEXACT )
26  INT64:                   10/0x00000000000000000a (0x10 =>    INEXACT )
26  INT64:                   43/0x00000000000000002b (0x10 =>    INEXACT )
26  INT64:                  695/0x0000000000000002b7 (0x10 =>    INEXACT )
26  INT64:               178145/0x00000000000002b7e1 (0x10 =>    INEXACT )
26  INT64:          11674931554/0x0000000002b7e15162 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT64:                    6/0x000000000000000006 (0x10 =>    INEXACT )
27  INT64:                   12/0x00000000000000000c (0x10 =>    INEXACT )
27  INT64:                   50/0x000000000000000032 (0x10 =>    INEXACT )
27  INT64:                  804/0x000000000000000324 (0x10 =>    INEXACT )
27  INT64:               205887/0x00000000000003243f (0x10 =>    INEXACT )
27  INT64:          13493037704/0x0000000003243f6a88 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT64:               131006/0x00000000000001ffbe (0 => OK)
28  INT64:               262012/0x00000000000003ff7c (0 => OK)
28  INT64:              1048048/0x0000000000000ffdf0 (0 => OK)
28  INT64:             16768768/0x000000000000ffdf00 (0 => OK)
28  INT64:           4292804608/0x0000000000ffdf0000 (0 => OK)
28  INT64:      281333242789888/0x000000ffdf00000000 (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT64:               131008/0x00000000000001ffc0 (0 => OK)
29  INT64:               262016/0x00000000000003ff80 (0 => OK)
29  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
29  INT64:             16769024/0x000000000000ffe000 (0 => OK)
29  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
29  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT64:               131010/0x00000000000001ffc2 (0 => OK)
30  INT64:               262020/0x00000000000003ff84 (0 => OK)
30  INT64:              1048080/0x0000000000000ffe10 (0 => OK)
30  INT64:             16769280/0x000000000000ffe100 (0 => OK)
30  INT64:           4292935680/0x0000000000ffe10000 (0 => OK)
30  INT64:      281341832724480/0x000000ffe100000000 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT64:               262014/0x00000000000003ff7e (0 => OK)
31  INT64:               524028/0x00000000000007fefc (0 => OK)
31  INT64:              2096112/0x0000000000001ffbf0 (0 => OK)
31  INT64:             33537792/0x000000000001ffbf00 (0 => OK)
31  INT64:           8585674752/0x0000000001ffbf0000 (0 => OK)
31  INT64:      562670780547072/0x000001ffbf00000000 (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT64:               262016/0x00000000000003ff80 (0 => OK)
32  INT64:               524032/0x00000000000007ff00 (0 => OK)
32  INT64:              2096128/0x0000000000001ffc00 (0 => OK)
32  INT64:             33538048/0x000000000001ffc000 (0 => OK)
32  INT64:           8585740288/0x0000000001ffc00000 (0 => OK)
32  INT64:      562675075514368/0x000001ffc000000000 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT64:               262018/0x00000000000003ff82 (0 => OK)
33  INT64:               524036/0x00000000000007ff04 (0 => OK)
33  INT64:              2096144/0x0000000000001ffc10 (0 => OK)
33  INT64:             33538304/0x000000000001ffc100 (0 => OK)
33  INT64:           8585805824/0x0000000001ffc10000 (0 => OK)
33  INT64:      562679370481664/0x000001ffc100000000 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT64:           4294967294/0x0000000000fffffffe (0 => OK)
34  INT64:           8589934588/0x0000000001fffffffc (0 => OK)
34  INT64:          34359738352/0x0000000007fffffff0 (0 => OK)
34  INT64:         549755813632/0x000000007fffffff00 (0 => OK)
34  INT64:      140737488289792/0x0000007fffffff0000 (0 => OK)
34  INT64:  9223372032559808512/0x007fffffff00000000 (0 => OK)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting double-precision to 32 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT32:     -2/0xfffffffe (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT32:     -1/0xffffffff (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12  INT32:      0/         0 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14  INT32:      0/         0 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT32:      0/         0 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015662e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT32:      0/         0 (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT32:      0/         0 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT32:      0/         0 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT32:      1/       0x1 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT32:      1/       0x1 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138310e-308 / 0x000010000000000000 (0 => OK)
21  INT32:      0/         0 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282844e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT32:      0/         0 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238764e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT32:      0/         0 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT32:      1/       0x1 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT32:      2/       0x2 (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT32:      2/       0x2 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT32:      3/       0x3 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT32:  65503/    0xffdf (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT32:  65504/    0xffe0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT32:  65505/    0xffe1 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT32: 131007/   0x1ffbf (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT32: 131008/   0x1ffc0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT32: 131009/   0x1ffc1 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT32: 2147483647/0x7fffffff (0 => OK)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37  INT32:      0/         0 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT32:      0/         0 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT32:      0/         0 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT32:      0/         0 (0x1 =>     INVALID)
Converting double-precision to 64 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 DOUBLE: 1.17549435082228750797e-38 / 0x003810000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013061e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015662e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994299e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013665e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT64:                    1/0x000000000000000001 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT64:                    1/0x000000000000000001 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138310e-308 / 0x000010000000000000 (0 => OK)
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282844e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238764e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT64:                    1/0x000000000000000001 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT64:                    2/0x000000000000000002 (0 => OK)
26 DOUBLE: 2.71828182845904509080e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT64:                    2/0x000000000000000002 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311600e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT64:                    3/0x000000000000000003 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT64:                65503/0x00000000000000ffdf (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT64:                65504/0x00000000000000ffe0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT64:                65505/0x00000000000000ffe1 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT64:               131007/0x00000000000001ffbf (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT64:               131008/0x00000000000001ffc0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT64:               131009/0x00000000000001ffc1 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT64:           2147483647/0x00000000007fffffff (0 => OK)
35 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859812e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317748e-307 / 0x00003ff40000000001 (0 => OK)
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570815e+308 / 0x007fefffffffffffff (0 => OK)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to double-precision
00   HALF: 0xffff  (0 => OK)
00 DOUBLE: -1.31008000000000000000e+05 / 0x00c0fffc0000000000 (0 => OK)
01   HALF: 0xfcff  (0 => OK)
01 DOUBLE: -8.18560000000000000000e+04 / 0x00c0f3fc0000000000 (0 => OK)
02   HALF: 0xfc01  (0 => OK)
02 DOUBLE: -6.56000000000000000000e+04 / 0x00c0f0040000000000 (0 => OK)
03   HALF: 0xfc00  (0 => OK)
03 DOUBLE: -6.55360000000000000000e+04 / 0x00c0f0000000000000 (0 => OK)
04   HALF: 0xfbff  (0 => OK)
04 DOUBLE: -6.55040000000000000000e+04 / 0x00c0effc0000000000 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05 DOUBLE: -6.54720000000000000000e+04 / 0x00c0eff80000000000 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
08   HALF: 0x8001  (0 => OK)
08 DOUBLE: -5.96046447753906250000e-08 / 0x00be70000000000000 (0 => OK)
09   HALF: 0x8000  (0 => OK)
09 DOUBLE: -0.00000000000000000000e+00 / 0x008000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11 DOUBLE: 5.96046447753906250000e-08 / 0x003e70000000000000 (0 => OK)
12   HALF: 0x3c00  (0 => OK)
12 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13 DOUBLE: 6.54720000000000000000e+04 / 0x0040eff80000000000 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15 DOUBLE: 6.55360000000000000000e+04 / 0x0040f0000000000000 (0 => OK)
16   HALF: 0x7c01  (0 => OK)
16 DOUBLE: 6.56000000000000000000e+04 / 0x0040f0040000000000 (0 => OK)
17   HALF: 0x7cff  (0 => OK)
17 DOUBLE: 8.18560000000000000000e+04 / 0x0040f3fc0000000000 (0 => OK)
18   HALF: 0x7fff  (0 => OK)
18 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
Converting half-precision to single-precision
00   HALF: 0xffff  (0 => OK)
00 SINGLE: -1.31008000000000000000e+05 / 0xc7ffe000  (0 => OK)
01   HALF: 0xfcff  (0 => OK)
01 SINGLE: -8.18560000000000000000e+04 / 0xc79fe000  (0 => OK)
02   HALF: 0xfc01  (0 => OK)
02 SINGLE: -6.56000000000000000000e+04 / 0xc7802000  (0 => OK)
03   HALF: 0xfc00  (0 => OK)
03 SINGLE: -6.55360000000000000000e+04 / 0xc7800000  (0 => OK)
04   HALF: 0xfbff  (0 => OK)
04 SINGLE: -6.55040000000000000000e+04 / 0xc77fe000  (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05 SINGLE: -6.54720000000000000000e+04 / 0xc77fc000  (0 => OK)
06   HALF: 0xc000  (0 => OK)
06 SINGLE: -2.00000000000000000000e+00 / 0xc0000000  (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07 SINGLE: -1.00000000000000000000e+00 / 0xbf800000  (0 => OK)
08   HALF: 0x8001  (0 => OK)
08 SINGLE: -5.96046447753906250000e-08 / 0xb3800000  (0 => OK)
09   HALF: 0x8000  (0 => OK)
09 SINGLE: -0.00000000000000000000e+00 / 0x80000000  (0 => OK)
10   HALF: 0000  (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11   HALF: 0x01  (0 => OK)
11 SINGLE: 5.96046447753906250000e-08 / 0x33800000  (0 => OK)
12   HALF: 0x3c00  (0 => OK)
12 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15 SINGLE: 6.55360000000000000000e+04 / 0x47800000  (0 => OK)
16   HALF: 0x7c01  (0 => OK)
16 SINGLE: 6.56000000000000000000e+04 / 0x47802000  (0 => OK)
17   HALF: 0x7cff  (0 => OK)
17 SINGLE: 8.18560000000000000000e+04 / 0x479fe000  (0 => OK)
18   HALF: 0x7fff  (0 => OK)
18 SINGLE: 1.31008000000000000000e+05 / 0x47ffe000  (0 => OK)
Converting half-precision to fixed point 64 bit int
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:              -131008/0x00fffffffffffe0040 (0 => OK)
04  INT64:              -262016/0x00fffffffffffc0080 (0 => OK)
04  INT64:             -1048064/0x00fffffffffff00200 (0 => OK)
04  INT64:            -16769024/0x00ffffffffff002000 (0 => OK)
04  INT64:          -4292870144/0x00ffffffff00200000 (0 => OK)
04  INT64:     -281337537757184/0x00ffff002000000000 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:              -130944/0x00fffffffffffe0080 (0 => OK)
05  INT64:              -261888/0x00fffffffffffc0100 (0 => OK)
05  INT64:             -1047552/0x00fffffffffff00400 (0 => OK)
05  INT64:            -16760832/0x00ffffffffff004000 (0 => OK)
05  INT64:          -4290772992/0x00ffffffff00400000 (0 => OK)
05  INT64:     -281200098803712/0x00ffff004000000000 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
06  INT64:                   -8/0x00fffffffffffffff8 (0 => OK)
06  INT64:                  -32/0x00ffffffffffffffe0 (0 => OK)
06  INT64:                 -512/0x00fffffffffffffe00 (0 => OK)
06  INT64:              -131072/0x00fffffffffffe0000 (0 => OK)
06  INT64:          -8589934592/0x00fffffffe00000000 (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
07  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
07  INT64:                  -16/0x00fffffffffffffff0 (0 => OK)
07  INT64:                 -256/0x00ffffffffffffff00 (0 => OK)
07  INT64:               -65536/0x00ffffffffffff0000 (0 => OK)
07  INT64:          -4294967296/0x00ffffffff00000000 (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                 -256/0x00ffffffffffffff00 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                  256/0x000000000000000100 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    2/0x000000000000000002 (0 => OK)
12  INT64:                    4/0x000000000000000004 (0 => OK)
12  INT64:                   16/0x000000000000000010 (0 => OK)
12  INT64:                  256/0x000000000000000100 (0 => OK)
12  INT64:                65536/0x000000000000010000 (0 => OK)
12  INT64:           4294967296/0x000000000100000000 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:               130944/0x00000000000001ff80 (0 => OK)
13  INT64:               261888/0x00000000000003ff00 (0 => OK)
13  INT64:              1047552/0x0000000000000ffc00 (0 => OK)
13  INT64:             16760832/0x000000000000ffc000 (0 => OK)
13  INT64:           4290772992/0x0000000000ffc00000 (0 => OK)
13  INT64:      281200098803712/0x000000ffc000000000 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:               131008/0x00000000000001ffc0 (0 => OK)
14  INT64:               262016/0x00000000000003ff80 (0 => OK)
14  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
14  INT64:             16769024/0x000000000000ffe000 (0 => OK)
14  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
14  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to fixed point 32 bit int
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT32:     -4/0xfffffffc (0x10 =>    INEXACT )
06  INT32:     -8/0xfffffff8 (0x10 =>    INEXACT )
06  INT32:    -32/0xffffffe0 (0x10 =>    INEXACT )
06  INT32:   -515/0xfffffdfd (0x10 =>    INEXACT )
06  INT32: -131840/0xfffdfd00 (0x10 =>    INEXACT )
06  INT32: -131840/0xfffdfd00 (0x10 =>    INEXACT )
06  INT32: -2147483648/0x80000000 (0x11 =>    INEXACT INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:     -2/0xfffffffe (0x10 =>    INEXACT )
07  INT32:   -514/0xfffffdfe (0x10 =>    INEXACT )
07  INT32:   -514/0xfffffdfe (0x10 =>    INEXACT )
07  INT32: -33746944/0xfdfd1000 (0x10 =>    INEXACT )
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      2/       0x2 (0x10 =>    INEXACT )
12  INT32:    512/     0x200 (0x10 =>    INEXACT )
12  INT32:    512/     0x200 (0x10 =>    INEXACT )
12  INT32: 33615872/ 0x200f000 (0x10 =>    INEXACT )
13   HALF: 0x7bfe  (0 => OK)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14   HALF: 0x7bff  (0 => OK)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15   HALF: 0x7c00  (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 64 bit int
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:               -65504/0x00ffffffffffff0020 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:               -65472/0x00ffffffffffff0040 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    1/0x000000000000000001 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:                65472/0x00000000000000ffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:                65504/0x00000000000000ffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to 32 bit int
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32:      0/         0 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32: -65504/0xffff0020 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT32: -65472/0xffff0040 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT32:     -2/0xfffffffe (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT32:     -1/0xffffffff (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      1/       0x1 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT32:  65472/    0xffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT32:  65504/    0xffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32:      0/         0 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32:      0/         0 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 64 bit uint
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    1/0x000000000000000001 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:                65472/0x00000000000000ffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:                65504/0x00000000000000ffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:                   -1/0x00ffffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to 32 bit uint
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32:      0/         0 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32:      0/         0 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32:      0/         0 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT32:      0/         0 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT32:      0/         0 (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT32:      0/         0 (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      1/       0x1 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT32:  65472/    0xffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT32:  65504/    0xffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT32:     -1/0xffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32:      0/         0 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32:      0/         0 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 16 bit uint
00   HALF: 0xffff  (0 => OK)
00   HALF: 0000  (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01   HALF: 0000  (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02   HALF: 0000  (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03   HALF: 0000  (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04   HALF: 0000  (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05   HALF: 0000  (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06   HALF: 0000  (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07   HALF: 0000  (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08   HALF: 0000  (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09   HALF: 0000  (0 => OK)
10   HALF: 0000  (0 => OK)
10   HALF: 0000  (0 => OK)
11   HALF: 0x01  (0 => OK)
11   HALF: 0000  (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12   HALF: 0x01  (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13   HALF: 0xffc0  (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14   HALF: 0xffe0  (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15   HALF: 0xffff  (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16   HALF: 0000  (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17   HALF: 0000  (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18   HALF: 0000  (0x1 =>     INVALID)
Converting signed int32 to half-precision
00  INT32:      0/         0 (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT32:      1/       0x1 (0 => OK)
01   HALF: 0x3c00  (0 => OK)
02  INT32:     16/      0x10 (0 => OK)
02   HALF: 0x4c00  (0 => OK)
03  INT32:    256/     0x100 (0 => OK)
03   HALF: 0x5c00  (0 => OK)
04  INT32:   4096/    0x1000 (0 => OK)
04   HALF: 0x6c00  (0 => OK)
05  INT32:  65503/    0xffdf (0 => OK)
05   HALF: 0x7bff  (0x10 =>    INEXACT )
06  INT32:  65504/    0xffe0 (0 => OK)
06   HALF: 0x7bff  (0 => OK)
07  INT32:  65505/    0xffe1 (0 => OK)
07   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
08  INT32:  65535/    0xffff (0 => OK)
08   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
09  INT32:  65536/   0x10000 (0 => OK)
09   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10  INT32: 1048576/  0x100000 (0 => OK)
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11  INT32: 16777215/  0xffffff (0 => OK)
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12  INT32: 16777216/ 0x1000000 (0 => OK)
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13  INT32: 16777217/ 0x1000001 (0 => OK)
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14  INT32: 268435456/0x10000000 (0 => OK)
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15  INT32: 536870912/0x20000000 (0 => OK)
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16  INT32: 1073741824/0x40000000 (0 => OK)
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
17  INT32: -2147483648/0x80000000 (0 => OK)
17   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
18  INT32: -2147483647/0x80000001 (0 => OK)
18   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
19  INT32: -2147483617/0x8000001f (0 => OK)
19   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
20  INT32: -2147483585/0x8000003f (0 => OK)
20   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
21  INT32: -2147483521/0x8000007f (0 => OK)
21   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
22  INT32: -2147483393/0x800000ff (0 => OK)
22   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
23  INT32: -2147483137/0x800001ff (0 => OK)
23   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
24  INT32: -2147482849/0x8000031f (0 => OK)
24   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25  INT32: -2147481601/0x800007ff (0 => OK)
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26  INT32: -2147479553/0x80000fff (0 => OK)
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27  INT32: -2147418113/0x8000ffff (0 => OK)
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28  INT32: -2146435073/0x800fffff (0 => OK)
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29  INT32: -2130706433/0x80ffffff (0 => OK)
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30  INT32: -1879048193/0x8fffffff (0 => OK)
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31  INT32: -1610612737/0x9fffffff (0 => OK)
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32  INT32: -1342177281/0xafffffff (0 => OK)
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33  INT32: -1073741825/0xbfffffff (0 => OK)
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34  INT32: -805306369/0xcfffffff (0 => OK)
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35  INT32: -536870913/0xdfffffff (0 => OK)
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36  INT32: -268435457/0xefffffff (0 => OK)
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37  INT32:     -1/0xffffffff (0 => OK)
37   HALF: 0xbc00  (0 => OK)
38  INT32:     -2/0xfffffffe (0 => OK)
38   HALF: 0xc000  (0 => OK)
39  INT32:     -3/0xfffffffd (0 => OK)
39   HALF: 0xc200  (0 => OK)
40  INT32:     -4/0xfffffffc (0 => OK)
40   HALF: 0xc400  (0 => OK)
41  INT32:     -8/0xfffffff8 (0 => OK)
41   HALF: 0xc800  (0 => OK)
42  INT32:    -16/0xfffffff0 (0 => OK)
42   HALF: 0xcc00  (0 => OK)
43  INT32:    -32/0xffffffe0 (0 => OK)
43   HALF: 0xd000  (0 => OK)
44  INT32:    -48/0xffffffd0 (0 => OK)
44   HALF: 0xd200  (0 => OK)
45  INT32:    -64/0xffffffc0 (0 => OK)
45   HALF: 0xd400  (0 => OK)
46  INT32:   -128/0xffffff80 (0 => OK)
46   HALF: 0xd800  (0 => OK)
47  INT32:   -512/0xfffffe00 (0 => OK)
47   HALF: 0xe000  (0 => OK)
48  INT32:   -768/0xfffffd00 (0 => OK)
48   HALF: 0xe200  (0 => OK)
49  INT32:  -1024/0xfffffc00 (0 => OK)
49   HALF: 0xe400  (0 => OK)
50  INT32:  -2048/0xfffff800 (0 => OK)
50   HALF: 0xe800  (0 => OK)
51  INT32:  -4096/0xfffff000 (0 => OK)
51   HALF: 0xec00  (0 => OK)
52  INT32:  -8192/0xffffe000 (0 => OK)
52   HALF: 0xf000  (0 => OK)
53  INT32: -12288/0xffffd000 (0 => OK)
53   HALF: 0xf200  (0 => OK)
54  INT32: -16384/0xffffc000 (0 => OK)
54   HALF: 0xf400  (0 => OK)
55  INT32: -32768/0xffff8000 (0 => OK)
55   HALF: 0xf800  (0 => OK)
56  INT32: -524288/0xfff80000 (0 => OK)
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57  INT32: -8388608/0xff800000 (0 => OK)
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58  INT32: -16777216/0xff000000 (0 => OK)
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
59  INT32: -33554432/0xfe000000 (0 => OK)
59   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
60  INT32: -50331648/0xfd000000 (0 => OK)
60   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
61  INT32: -67108864/0xfc000000 (0 => OK)
61   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
62  INT32: -134217728/0xf8000000 (0 => OK)
62   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
63  INT32: -268435456/0xf0000000 (0 => OK)
63   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
64  INT32: -536870912/0xe0000000 (0 => OK)
64   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
65  INT32: -805306368/0xd0000000 (0 => OK)
65   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
66  INT32: -1073741824/0xc0000000 (0 => OK)
66   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
67  INT32: -2147483648/0x80000000 (0 => OK)
67   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
Converting fixed point int32 to half-precision
00  INT32:      0/         0 (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT32:      1/       0x1 (0 => OK)
01   HALF: 0x3800  (0 => OK)
01   HALF: 0x3400  (0 => OK)
01   HALF: 0x2c00  (0 => OK)
01   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
02  INT32:     16/      0x10 (0 => OK)
02   HALF: 0x4800  (0 => OK)
02   HALF: 0x4400  (0 => OK)
02   HALF: 0x3c00  (0 => OK)
02   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
03  INT32:    256/     0x100 (0 => OK)
03   HALF: 0x5800  (0 => OK)
03   HALF: 0x5400  (0 => OK)
03   HALF: 0x4c00  (0 => OK)
03   HALF: 0x01  (0 => OK)
04  INT32:   4096/    0x1000 (0 => OK)
04   HALF: 0x6800  (0 => OK)
04   HALF: 0x6400  (0 => OK)
04   HALF: 0x5c00  (0 => OK)
04   HALF: 0x10  (0 => OK)
05  INT32:  65503/    0xffdf (0 => OK)
05   HALF: 0x77ff  (0x10 =>    INEXACT )
05   HALF: 0x73ff  (0x10 =>    INEXACT )
05   HALF: 0x6bff  (0x10 =>    INEXACT )
05   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
06  INT32:  65504/    0xffe0 (0 => OK)
06   HALF: 0x77ff  (0 => OK)
06   HALF: 0x73ff  (0 => OK)
06   HALF: 0x6bff  (0 => OK)
06   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
07  INT32:  65505/    0xffe1 (0 => OK)
07   HALF: 0x7800  (0x10 =>    INEXACT )
07   HALF: 0x7400  (0x10 =>    INEXACT )
07   HALF: 0x6c00  (0x10 =>    INEXACT )
07   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
08  INT32:  65535/    0xffff (0 => OK)
08   HALF: 0x7800  (0x10 =>    INEXACT )
08   HALF: 0x7400  (0x10 =>    INEXACT )
08   HALF: 0x6c00  (0x10 =>    INEXACT )
08   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
09  INT32:  65536/   0x10000 (0 => OK)
09   HALF: 0x7800  (0 => OK)
09   HALF: 0x7400  (0 => OK)
09   HALF: 0x6c00  (0 => OK)
09   HALF: 0x100  (0 => OK)
10  INT32: 1048576/  0x100000 (0 => OK)
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0xc00  (0x14 => OVERFLOW   INEXACT )
11  INT32: 16777215/  0xffffff (0 => OK)
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
12  INT32: 16777216/ 0x1000000 (0 => OK)
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
13  INT32: 16777217/ 0x1000001 (0 => OK)
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x1c01  (0x14 => OVERFLOW   INEXACT )
14  INT32: 268435456/0x10000000 (0 => OK)
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
15  INT32: 536870912/0x20000000 (0 => OK)
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
16  INT32: 1073741824/0x40000000 (0 => OK)
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
17  INT32: -2147483648/0x80000000 (0 => OK)
17   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
18  INT32: -2147483647/0x80000001 (0 => OK)
18   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
19  INT32: -2147483617/0x8000001f (0 => OK)
19   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
20  INT32: -2147483585/0x8000003f (0 => OK)
20   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
21  INT32: -2147483521/0x8000007f (0 => OK)
21   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
22  INT32: -2147483393/0x800000ff (0 => OK)
22   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
23  INT32: -2147483137/0x800001ff (0 => OK)
23   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
24  INT32: -2147482849/0x8000031f (0 => OK)
24   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
25  INT32: -2147481601/0x800007ff (0 => OK)
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
26  INT32: -2147479553/0x80000fff (0 => OK)
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
27  INT32: -2147418113/0x8000ffff (0 => OK)
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
28  INT32: -2146435073/0x800fffff (0 => OK)
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
29  INT32: -2130706433/0x80ffffff (0 => OK)
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xb7f0  (0x14 => OVERFLOW   INEXACT )
30  INT32: -1879048193/0x8fffffff (0 => OK)
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xb700  (0x14 => OVERFLOW   INEXACT )
31  INT32: -1610612737/0x9fffffff (0 => OK)
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xb600  (0x14 => OVERFLOW   INEXACT )
32  INT32: -1342177281/0xafffffff (0 => OK)
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xb500  (0x14 => OVERFLOW   INEXACT )
33  INT32: -1073741825/0xbfffffff (0 => OK)
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xb400  (0x14 => OVERFLOW   INEXACT )
34  INT32: -805306369/0xcfffffff (0 => OK)
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xb200  (0x14 => OVERFLOW   INEXACT )
35  INT32: -536870913/0xdfffffff (0 => OK)
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xb000  (0x14 => OVERFLOW   INEXACT )
36  INT32: -268435457/0xefffffff (0 => OK)
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xac00  (0x14 => OVERFLOW   INEXACT )
37  INT32:     -1/0xffffffff (0 => OK)
37   HALF: 0xb800  (0 => OK)
37   HALF: 0xb400  (0 => OK)
37   HALF: 0xac00  (0 => OK)
37   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
38  INT32:     -2/0xfffffffe (0 => OK)
38   HALF: 0xbc00  (0 => OK)
38   HALF: 0xb800  (0 => OK)
38   HALF: 0xb000  (0 => OK)
38   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
39  INT32:     -3/0xfffffffd (0 => OK)
39   HALF: 0xbe00  (0 => OK)
39   HALF: 0xba00  (0 => OK)
39   HALF: 0xb200  (0 => OK)
39   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
40  INT32:     -4/0xfffffffc (0 => OK)
40   HALF: 0xc000  (0 => OK)
40   HALF: 0xbc00  (0 => OK)
40   HALF: 0xb400  (0 => OK)
40   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
41  INT32:     -8/0xfffffff8 (0 => OK)
41   HALF: 0xc400  (0 => OK)
41   HALF: 0xc000  (0 => OK)
41   HALF: 0xb800  (0 => OK)
41   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
42  INT32:    -16/0xfffffff0 (0 => OK)
42   HALF: 0xc800  (0 => OK)
42   HALF: 0xc400  (0 => OK)
42   HALF: 0xbc00  (0 => OK)
42   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
43  INT32:    -32/0xffffffe0 (0 => OK)
43   HALF: 0xcc00  (0 => OK)
43   HALF: 0xc800  (0 => OK)
43   HALF: 0xc000  (0 => OK)
43   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
44  INT32:    -48/0xffffffd0 (0 => OK)
44   HALF: 0xce00  (0 => OK)
44   HALF: 0xca00  (0 => OK)
44   HALF: 0xc200  (0 => OK)
44   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
45  INT32:    -64/0xffffffc0 (0 => OK)
45   HALF: 0xd000  (0 => OK)
45   HALF: 0xcc00  (0 => OK)
45   HALF: 0xc400  (0 => OK)
45   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
46  INT32:   -128/0xffffff80 (0 => OK)
46   HALF: 0xd400  (0 => OK)
46   HALF: 0xd000  (0 => OK)
46   HALF: 0xc800  (0 => OK)
46   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
47  INT32:   -512/0xfffffe00 (0 => OK)
47   HALF: 0xdc00  (0 => OK)
47   HALF: 0xd800  (0 => OK)
47   HALF: 0xd000  (0 => OK)
47   HALF: 0x8002  (0 => OK)
48  INT32:   -768/0xfffffd00 (0 => OK)
48   HALF: 0xde00  (0 => OK)
48   HALF: 0xda00  (0 => OK)
48   HALF: 0xd200  (0 => OK)
48   HALF: 0x8003  (0 => OK)
49  INT32:  -1024/0xfffffc00 (0 => OK)
49   HALF: 0xe000  (0 => OK)
49   HALF: 0xdc00  (0 => OK)
49   HALF: 0xd400  (0 => OK)
49   HALF: 0x8004  (0 => OK)
50  INT32:  -2048/0xfffff800 (0 => OK)
50   HALF: 0xe400  (0 => OK)
50   HALF: 0xe000  (0 => OK)
50   HALF: 0xd800  (0 => OK)
50   HALF: 0x8008  (0 => OK)
51  INT32:  -4096/0xfffff000 (0 => OK)
51   HALF: 0xe800  (0 => OK)
51   HALF: 0xe400  (0 => OK)
51   HALF: 0xdc00  (0 => OK)
51   HALF: 0x8010  (0 => OK)
52  INT32:  -8192/0xffffe000 (0 => OK)
52   HALF: 0xec00  (0 => OK)
52   HALF: 0xe800  (0 => OK)
52   HALF: 0xe000  (0 => OK)
52   HALF: 0x8020  (0 => OK)
53  INT32: -12288/0xffffd000 (0 => OK)
53   HALF: 0xee00  (0 => OK)
53   HALF: 0xea00  (0 => OK)
53   HALF: 0xe200  (0 => OK)
53   HALF: 0x8030  (0 => OK)
54  INT32: -16384/0xffffc000 (0 => OK)
54   HALF: 0xf000  (0 => OK)
54   HALF: 0xec00  (0 => OK)
54   HALF: 0xe400  (0 => OK)
54   HALF: 0x8040  (0 => OK)
55  INT32: -32768/0xffff8000 (0 => OK)
55   HALF: 0xf400  (0 => OK)
55   HALF: 0xf000  (0 => OK)
55   HALF: 0xe800  (0 => OK)
55   HALF: 0x8080  (0 => OK)
56  INT32: -524288/0xfff80000 (0 => OK)
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xf800  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0x8800  (0x14 => OVERFLOW   INEXACT )
57  INT32: -8388608/0xff800000 (0 => OK)
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0x9800  (0x14 => OVERFLOW   INEXACT )
58  INT32: -16777216/0xff000000 (0 => OK)
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0x9c00  (0x14 => OVERFLOW   INEXACT )
59  INT32: -33554432/0xfe000000 (0 => OK)
59   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xa000  (0x14 => OVERFLOW   INEXACT )
60  INT32: -50331648/0xfd000000 (0 => OK)
60   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xa200  (0x14 => OVERFLOW   INEXACT )
61  INT32: -67108864/0xfc000000 (0 => OK)
61   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xa400  (0x14 => OVERFLOW   INEXACT )
62  INT32: -134217728/0xf8000000 (0 => OK)
62   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xa800  (0x14 => OVERFLOW   INEXACT )
63  INT32: -268435456/0xf0000000 (0 => OK)
63   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xac00  (0x14 => OVERFLOW   INEXACT )
64  INT32: -536870912/0xe0000000 (0 => OK)
64   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xb000  (0x14 => OVERFLOW   INEXACT )
65  INT32: -805306368/0xd0000000 (0 => OK)
65   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xb200  (0x14 => OVERFLOW   INEXACT )
66  INT32: -1073741824/0xc0000000 (0 => OK)
66   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xb400  (0x14 => OVERFLOW   INEXACT )
67  INT32: -2147483648/0x80000000 (0 => OK)
67   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
Converting fixed point int64 to half-precision
00  INT64:                    0/00000000000000000000 (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT64:                    1/0x000000000000000001 (0 => OK)
01   HALF: 0x3800  (0 => OK)
01   HALF: 0x3400  (0 => OK)
01   HALF: 0x2c00  (0 => OK)
01   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
02  INT64:                   16/0x000000000000000010 (0 => OK)
02   HALF: 0x4800  (0 => OK)
02   HALF: 0x4400  (0 => OK)
02   HALF: 0x3c00  (0 => OK)
02   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
03  INT64:                  256/0x000000000000000100 (0 => OK)
03   HALF: 0x5800  (0 => OK)
03   HALF: 0x5400  (0 => OK)
03   HALF: 0x4c00  (0 => OK)
03   HALF: 0x01  (0 => OK)
03   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
03   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
03   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
04  INT64:                 4096/0x000000000000001000 (0 => OK)
04   HALF: 0x6800  (0 => OK)
04   HALF: 0x6400  (0 => OK)
04   HALF: 0x5c00  (0 => OK)
04   HALF: 0x10  (0 => OK)
04   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
04   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
04   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
05  INT64:                65503/0x00000000000000ffdf (0 => OK)
05   HALF: 0x77ff  (0x10 =>    INEXACT )
05   HALF: 0x73ff  (0x10 =>    INEXACT )
05   HALF: 0x6bff  (0x10 =>    INEXACT )
05   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x08  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x04  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x02  (0x18 =>  UNDERFLOW  INEXACT )
06  INT64:                65504/0x00000000000000ffe0 (0 => OK)
06   HALF: 0x77ff  (0 => OK)
06   HALF: 0x73ff  (0 => OK)
06   HALF: 0x6bff  (0 => OK)
06   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x08  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x04  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x02  (0x18 =>  UNDERFLOW  INEXACT )
07  INT64:                65505/0x00000000000000ffe1 (0 => OK)
07   HALF: 0x7800  (0x10 =>    INEXACT )
07   HALF: 0x7400  (0x10 =>    INEXACT )
07   HALF: 0x6c00  (0x10 =>    INEXACT )
07   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x08  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x04  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x02  (0x18 =>  UNDERFLOW  INEXACT )
08  INT64:                65535/0x00000000000000ffff (0 => OK)
08   HALF: 0x7800  (0x10 =>    INEXACT )
08   HALF: 0x7400  (0x10 =>    INEXACT )
08   HALF: 0x6c00  (0x10 =>    INEXACT )
08   HALF: 0x100  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x08  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x04  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x02  (0x18 =>  UNDERFLOW  INEXACT )
09  INT64:                65536/0x000000000000010000 (0 => OK)
09   HALF: 0x7800  (0 => OK)
09   HALF: 0x7400  (0 => OK)
09   HALF: 0x6c00  (0 => OK)
09   HALF: 0x100  (0 => OK)
09   HALF: 0x08  (0 => OK)
09   HALF: 0x04  (0 => OK)
09   HALF: 0x02  (0 => OK)
10  INT64:              1048576/0x000000000000100000 (0 => OK)
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0xc00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x80  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x40  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x20  (0x14 => OVERFLOW   INEXACT )
11  INT64:             16777215/0x000000000000ffffff (0 => OK)
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x400  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
11   HALF: 0x200  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
12  INT64:             16777216/0x000000000001000000 (0 => OK)
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x400  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x200  (0x14 => OVERFLOW   INEXACT )
13  INT64:             16777217/0x000000000001000001 (0 => OK)
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x1c01  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x801  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x401  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x201  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
14  INT64:            268435456/0x000000000010000000 (0 => OK)
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1400  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1000  (0x14 => OVERFLOW   INEXACT )
15  INT64:            536870912/0x000000000020000000 (0 => OK)
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1400  (0x14 => OVERFLOW   INEXACT )
16  INT64:           1073741824/0x000000000040000000 (0 => OK)
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x2000  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
17  INT64:           2147483648/0x000000000080000000 (0 => OK)
17   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x3800  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x2400  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x2000  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
18  INT64:          34359738368/0x000000000800000000 (0 => OK)
18   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x4800  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
19  INT64:         549755813888/0x000000008000000000 (0 => OK)
19   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x5800  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x4400  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x4000  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x3c00  (0x14 => OVERFLOW   INEXACT )
20  INT64:        8796093022208/0x000000080000000000 (0 => OK)
20   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x6800  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x5400  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x5000  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x4c00  (0x14 => OVERFLOW   INEXACT )
21  INT64:      140737488355328/0x000000800000000000 (0 => OK)
21   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7800  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x6400  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x6000  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x5c00  (0x14 => OVERFLOW   INEXACT )
22  INT64:     2251799813685248/0x000008000000000000 (0 => OK)
22   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7400  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7000  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x6c00  (0x14 => OVERFLOW   INEXACT )
23  INT64:    36028797018963968/0x000080000000000000 (0 => OK)
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24  INT64:   576460752303423488/0x000800000000000000 (0 => OK)
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7c00  (0x14 => OVERFLOW   INEXACT )
25  INT64: -9223372036854775808/0x008000000000000000 (0 => OK)
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26  INT64: -9223372036854775807/0x008000000000000001 (0 => OK)
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27  INT64: -9223372036854775777/0x00800000000000001f (0 => OK)
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28  INT64: -9223372036854775745/0x00800000000000003f (0 => OK)
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29  INT64: -9223372036854775681/0x00800000000000007f (0 => OK)
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30  INT64: -9223372036854775553/0x0080000000000000ff (0 => OK)
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31  INT64: -9223372036854775297/0x0080000000000001ff (0 => OK)
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32  INT64: -9223372036854775009/0x00800000000000031f (0 => OK)
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33  INT64: -9223372036854773761/0x0080000000000007ff (0 => OK)
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34  INT64: -9223372036854771713/0x008000000000000fff (0 => OK)
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35  INT64: -9223372036854710273/0x00800000000000ffff (0 => OK)
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36  INT64: -9223372036853727233/0x0080000000000fffff (0 => OK)
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37  INT64: -9223372036837998593/0x008000000000ffffff (0 => OK)
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38  INT64: -9223372036586340353/0x00800000000fffffff (0 => OK)
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39  INT64: -9223372032559808513/0x0080000000ffffffff (0 => OK)
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40  INT64: -9223371968135299073/0x008000000fffffffff (0 => OK)
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41  INT64: -9223370937343148033/0x00800000ffffffffff (0 => OK)
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42  INT64: -9223354444668731393/0x0080000fffffffffff (0 => OK)
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43  INT64: -9223090561878065153/0x008000ffffffffffff (0 => OK)
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44  INT64: -9218868437227405313/0x00800fffffffffffff (0 => OK)
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45  INT64: -9218868437227405313/0x00800fffffffffffff (0 => OK)
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46  INT64: -9151314442816847873/0x0080ffffffffffffff (0 => OK)
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47  INT64: -9079256848778919937/0x0081ffffffffffffff (0 => OK)
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48  INT64: -8935141660703064065/0x0083ffffffffffffff (0 => OK)
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49  INT64: -8646911284551352321/0x0087ffffffffffffff (0 => OK)
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50  INT64: -8070450532247928833/0x008fffffffffffffff (0 => OK)
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51  INT64: -6917529027641081857/0x009fffffffffffffff (0 => OK)
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52  INT64: -5764607523034234881/0x00afffffffffffffff (0 => OK)
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53  INT64: -4611686018427387905/0x00bfffffffffffffff (0 => OK)
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54  INT64: -3458764513820540929/0x00cfffffffffffffff (0 => OK)
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55  INT64: -2305843009213693953/0x00dfffffffffffffff (0 => OK)
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56  INT64: -1152921504606846977/0x00efffffffffffffff (0 => OK)
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57  INT64: -1152921504606846976/0x00f000000000000000 (0 => OK)
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58  INT64:   -18001204369948673/0x00ffc00bffffffffff (0 => OK)
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbfe  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xf7fe  (0x14 => OVERFLOW   INEXACT )
59  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
59   HALF: 0xb800  (0 => OK)
59   HALF: 0xb400  (0 => OK)
59   HALF: 0xac00  (0 => OK)
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
### Rounding downwards
Converting single-precision to half-precision
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00   HALF: 0000  (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01   HALF: 0000  (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02   HALF: 0000  (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03   HALF: 0000  (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04   HALF: 0000  (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05   HALF: 0000  (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06   HALF: 0000  (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07   HALF: 0000  (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08   HALF: 0000  (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09   HALF: 0000  (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10   HALF: 0000  (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11   HALF: 0000  (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12   HALF: 0000  (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13   HALF: 0000  (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14   HALF: 0000  (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15   HALF: 0x3c00  (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16   HALF: 0x3c00  (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17   HALF: 0x4000  (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18   HALF: 0x4000  (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19   HALF: 0x4200  (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20   HALF: 0x7bfe  (0x10 =>    INEXACT )
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21   HALF: 0x7bff  (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22   HALF: 0x7bff  (0x10 =>    INEXACT )
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23   HALF: 0x7bfd  (0x10 =>    INEXACT )
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24   HALF: 0x7bfe  (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25   HALF: 0x7bfe  (0x10 =>    INEXACT )
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26   HALF: 0x7bff  (0x10 =>    INEXACT )
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27   HALF: 0x7bff  (0x10 =>    INEXACT )
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28   HALF: 0x7bff  (0x10 =>    INEXACT )
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29   HALF: 0000  (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30   HALF: 0000  (0 => OK)
Converting single-precision to double-precision
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19 DOUBLE: 3.00000000000000000000e+00 / 0x004008000000000000 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23 DOUBLE: 6.54710000000000000000e+04 / 0x0040eff7e000000000 (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24 DOUBLE: 6.54720000000000000000e+04 / 0x0040eff80000000000 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25 DOUBLE: 6.54730000000000000000e+04 / 0x0040eff82000000000 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
Converting single-precision to fixed point 32 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      2/       0x2 (0 => OK)
15  INT32:      4/       0x4 (0 => OK)
15  INT32:     16/      0x10 (0 => OK)
15  INT32:    256/     0x100 (0 => OK)
15  INT32:  65536/   0x10000 (0 => OK)
15  INT32:  65536/   0x10000 (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      2/       0x2 (0 => OK)
16  INT32:      4/       0x4 (0 => OK)
16  INT32:     16/      0x10 (0 => OK)
16  INT32:    256/     0x100 (0 => OK)
16  INT32:  65536/   0x10000 (0 => OK)
16  INT32:  65536/   0x10000 (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      4/       0x4 (0 => OK)
17  INT32:      8/       0x8 (0 => OK)
17  INT32:     32/      0x20 (0 => OK)
17  INT32:    512/     0x200 (0 => OK)
17  INT32: 131072/   0x20000 (0 => OK)
17  INT32: 131072/   0x20000 (0 => OK)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      4/       0x4 (0 => OK)
18  INT32:      8/       0x8 (0 => OK)
18  INT32:     32/      0x20 (0 => OK)
18  INT32:    512/     0x200 (0 => OK)
18  INT32: 131072/   0x20000 (0 => OK)
18  INT32: 131072/   0x20000 (0 => OK)
18  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      6/       0x6 (0 => OK)
19  INT32:     12/       0xc (0 => OK)
19  INT32:     48/      0x30 (0 => OK)
19  INT32:    768/     0x300 (0 => OK)
19  INT32: 196608/   0x30000 (0 => OK)
19  INT32: 196608/   0x30000 (0 => OK)
19  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32: 131006/   0x1ffbe (0 => OK)
20  INT32: 262012/   0x3ff7c (0 => OK)
20  INT32: 1048048/   0xffdf0 (0 => OK)
20  INT32: 16768768/  0xffdf00 (0 => OK)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32: 131008/   0x1ffc0 (0 => OK)
21  INT32: 262016/   0x3ff80 (0 => OK)
21  INT32: 1048064/   0xffe00 (0 => OK)
21  INT32: 16769024/  0xffe000 (0 => OK)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32: 131010/   0x1ffc2 (0 => OK)
22  INT32: 262020/   0x3ff84 (0 => OK)
22  INT32: 1048080/   0xffe10 (0 => OK)
22  INT32: 16769280/  0xffe100 (0 => OK)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32: 130942/   0x1ff7e (0 => OK)
23  INT32: 261884/   0x3fefc (0 => OK)
23  INT32: 1047536/   0xffbf0 (0 => OK)
23  INT32: 16760576/  0xffbf00 (0 => OK)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32: 130944/   0x1ff80 (0 => OK)
24  INT32: 261888/   0x3ff00 (0 => OK)
24  INT32: 1047552/   0xffc00 (0 => OK)
24  INT32: 16760832/  0xffc000 (0 => OK)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32: 130946/   0x1ff82 (0 => OK)
25  INT32: 261892/   0x3ff04 (0 => OK)
25  INT32: 1047568/   0xffc10 (0 => OK)
25  INT32: 16761088/  0xffc100 (0 => OK)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32: 131070/   0x1fffe (0 => OK)
26  INT32: 262140/   0x3fffc (0 => OK)
26  INT32: 1048560/   0xffff0 (0 => OK)
26  INT32: 16776960/  0xffff00 (0 => OK)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32: 131070/   0x1fffe (0 => OK)
27  INT32: 262140/   0x3fffc (0 => OK)
27  INT32: 1048560/   0xffff0 (0 => OK)
27  INT32: 16776960/  0xffff00 (0 => OK)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32: 131070/   0x1fffe (0 => OK)
28  INT32: 262140/   0x3fffc (0 => OK)
28  INT32: 1048560/   0xffff0 (0 => OK)
28  INT32: 16776960/  0xffff00 (0 => OK)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting single-precision to fixed point 64 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT64:                    2/0x000000000000000002 (0 => OK)
15  INT64:                    4/0x000000000000000004 (0 => OK)
15  INT64:                   16/0x000000000000000010 (0 => OK)
15  INT64:                  256/0x000000000000000100 (0 => OK)
15  INT64:                65536/0x000000000000010000 (0 => OK)
15  INT64:           4294967296/0x000000000100000000 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT64:                    2/0x000000000000000002 (0 => OK)
16  INT64:                    4/0x000000000000000004 (0 => OK)
16  INT64:                   16/0x000000000000000010 (0 => OK)
16  INT64:                  256/0x000000000000000100 (0 => OK)
16  INT64:                65536/0x000000000000010000 (0 => OK)
16  INT64:           4294967296/0x000000000100000000 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT64:                    4/0x000000000000000004 (0 => OK)
17  INT64:                    8/0x000000000000000008 (0 => OK)
17  INT64:                   32/0x000000000000000020 (0 => OK)
17  INT64:                  512/0x000000000000000200 (0 => OK)
17  INT64:               131072/0x000000000000020000 (0 => OK)
17  INT64:           8589934592/0x000000000200000000 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT64:                    4/0x000000000000000004 (0 => OK)
18  INT64:                    8/0x000000000000000008 (0 => OK)
18  INT64:                   32/0x000000000000000020 (0 => OK)
18  INT64:                  512/0x000000000000000200 (0 => OK)
18  INT64:               131072/0x000000000000020000 (0 => OK)
18  INT64:           8589934592/0x000000000200000000 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT64:                    6/0x000000000000000006 (0 => OK)
19  INT64:                   12/0x00000000000000000c (0 => OK)
19  INT64:                   48/0x000000000000000030 (0 => OK)
19  INT64:                  768/0x000000000000000300 (0 => OK)
19  INT64:               196608/0x000000000000030000 (0 => OK)
19  INT64:          12884901888/0x000000000300000000 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT64:               131006/0x00000000000001ffbe (0 => OK)
20  INT64:               262012/0x00000000000003ff7c (0 => OK)
20  INT64:              1048048/0x0000000000000ffdf0 (0 => OK)
20  INT64:             16768768/0x000000000000ffdf00 (0 => OK)
20  INT64:           4292804608/0x0000000000ffdf0000 (0 => OK)
20  INT64:      281333242789888/0x000000ffdf00000000 (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT64:               131008/0x00000000000001ffc0 (0 => OK)
21  INT64:               262016/0x00000000000003ff80 (0 => OK)
21  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
21  INT64:             16769024/0x000000000000ffe000 (0 => OK)
21  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
21  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT64:               131010/0x00000000000001ffc2 (0 => OK)
22  INT64:               262020/0x00000000000003ff84 (0 => OK)
22  INT64:              1048080/0x0000000000000ffe10 (0 => OK)
22  INT64:             16769280/0x000000000000ffe100 (0 => OK)
22  INT64:           4292935680/0x0000000000ffe10000 (0 => OK)
22  INT64:      281341832724480/0x000000ffe100000000 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT64:               130942/0x00000000000001ff7e (0 => OK)
23  INT64:               261884/0x00000000000003fefc (0 => OK)
23  INT64:              1047536/0x0000000000000ffbf0 (0 => OK)
23  INT64:             16760576/0x000000000000ffbf00 (0 => OK)
23  INT64:           4290707456/0x0000000000ffbf0000 (0 => OK)
23  INT64:      281195803836416/0x000000ffbf00000000 (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT64:               130944/0x00000000000001ff80 (0 => OK)
24  INT64:               261888/0x00000000000003ff00 (0 => OK)
24  INT64:              1047552/0x0000000000000ffc00 (0 => OK)
24  INT64:             16760832/0x000000000000ffc000 (0 => OK)
24  INT64:           4290772992/0x0000000000ffc00000 (0 => OK)
24  INT64:      281200098803712/0x000000ffc000000000 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT64:               130946/0x00000000000001ff82 (0 => OK)
25  INT64:               261892/0x00000000000003ff04 (0 => OK)
25  INT64:              1047568/0x0000000000000ffc10 (0 => OK)
25  INT64:             16761088/0x000000000000ffc100 (0 => OK)
25  INT64:           4290838528/0x0000000000ffc10000 (0 => OK)
25  INT64:      281204393771008/0x000000ffc100000000 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT64:               131070/0x00000000000001fffe (0 => OK)
26  INT64:               262140/0x00000000000003fffc (0 => OK)
26  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
26  INT64:             16776960/0x000000000000ffff00 (0 => OK)
26  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
26  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT64:               131070/0x00000000000001fffe (0 => OK)
27  INT64:               262140/0x00000000000003fffc (0 => OK)
27  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
27  INT64:             16776960/0x000000000000ffff00 (0 => OK)
27  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
27  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT64:               131070/0x00000000000001fffe (0 => OK)
28  INT64:               262140/0x00000000000003fffc (0 => OK)
28  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
28  INT64:             16776960/0x000000000000ffff00 (0 => OK)
28  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
28  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
Converting single-precision to 32 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      1/       0x1 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      1/       0x1 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      2/       0x2 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      2/       0x2 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      3/       0x3 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32:  65503/    0xffdf (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32:  65504/    0xffe0 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32:  65505/    0xffe1 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32:  65471/    0xffbf (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32:  65472/    0xffc0 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32:  65473/    0xffc1 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32:  65535/    0xffff (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32:  65535/    0xffff (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32:  65535/    0xffff (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting single-precision to 64 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      1/       0x1 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      1/       0x1 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      2/       0x2 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      2/       0x2 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      3/       0x3 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32:  65503/    0xffdf (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32:  65504/    0xffe0 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32:  65505/    0xffe1 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32:  65471/    0xffbf (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32:  65472/    0xffc0 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32:  65473/    0xffc1 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32:  65535/    0xffff (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32:  65535/    0xffff (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32:  65535/    0xffff (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting double-precision to half-precision
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00   HALF: 0000  (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01   HALF: 0x8000  (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02   HALF: 0xffff  (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03   HALF: 0xffff  (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681213e+307 / 0x00ffc00bffffffffff (0 => OK)
04   HALF: 0xffff  (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05   HALF: 0xffff  (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06   HALF: 0xffff  (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007530e+31 / 0x00c661874b135ff654 (0 => OK)
07   HALF: 0xffff  (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08   HALF: 0xffff  (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09   HALF: 0xc000  (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10   HALF: 0xbc00  (0 => OK)
11 DOUBLE: -2.22507385850720138310e-308 / 0x008010000000000000 (0 => OK)
11   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13   HALF: 0000  (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17   HALF: 0x3ff  (0x18 =>  UNDERFLOW  INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18   HALF: 0x400  (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19   HALF: 0x3c00  (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20   HALF: 0x3c01  (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24   HALF: 0x3c00  (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25   HALF: 0x4000  (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26   HALF: 0x416f  (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27   HALF: 0x4248  (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28   HALF: 0x7bfe  (0x10 =>    INEXACT )
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29   HALF: 0x7bff  (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30   HALF: 0x7bff  (0x10 =>    INEXACT )
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31   HALF: 0x7ffe  (0x10 =>    INEXACT )
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32   HALF: 0x7fff  (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33   HALF: 0x7fff  (0x10 =>    INEXACT )
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34   HALF: 0x7fff  (0x1 =>     INVALID)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35   HALF: 0x7fff  (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36   HALF: 0x7fff  (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38   HALF: 0x7fff  (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39   HALF: 0x7fff  (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40   HALF: 0000  (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41   HALF: 0000  (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42   HALF: 0000  (0x1 =>     INVALID)
Converting double-precision to single-precision
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00 SINGLE: nan / 0x7fe00000  (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01 SINGLE: -nan / 0xffc00000  (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02 SINGLE: -inf / 0xff800000  (0 => OK)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03 SINGLE: -inf / 0xff800000  (0x14 => OVERFLOW   INEXACT )
04 DOUBLE: -2.25369976746044681213e+307 / 0x00ffc00bffffffffff (0 => OK)
04 SINGLE: -inf / 0xff800000  (0x14 => OVERFLOW   INEXACT )
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05 SINGLE: -3.40282346638528859812e+38 / 0xff7fffff  (0 => OK)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06 SINGLE: -3.40282346638528859812e+38 / 0xff7fffff  (0 => OK)
07 DOUBLE: -1.11100000000000007530e+31 / 0x00c661874b135ff654 (0 => OK)
07 SINGLE: -1.11100004769645909791e+31 / 0xf30c3a59  (0x10 =>    INEXACT )
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08 SINGLE: -1.11100003258488635273e+30 / 0xf1605d5b  (0x10 =>    INEXACT )
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09 SINGLE: -2.00000000000000000000e+00 / 0xc0000000  (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10 SINGLE: -1.00000000000000000000e+00 / 0xbf800000  (0 => OK)
11 DOUBLE: -2.22507385850720138310e-308 / 0x008010000000000000 (0 => OK)
11 SINGLE: -1.40129846432481707093e-45 / 0x80000001  (0x18 =>  UNDERFLOW  INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12 SINGLE: -1.17549435082228750797e-38 / 0x80800000  (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14 SINGLE: 1.17549435082228750796e-38 / 0x00800000  (0 => OK)
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15 SINGLE: 2.98023223876953125000e-08 / 0x33000000  (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16 SINGLE: 5.96045985901128005934e-08 / 0x337ffff3  (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17 SINGLE: 6.09755988989491015672e-05 / 0x387fc00d  (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18 SINGLE: 6.10351999057456851005e-05 / 0x38800006  (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20 SINGLE: 1.00097656250000000000e+00 / 0x3f802000  (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26 SINGLE: 2.71828174591064453125e+00 / 0x402df854  (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27 SINGLE: 3.14159250259399414062e+00 / 0x40490fda  (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31 SINGLE: 1.31007000000000000000e+05 / 0x47ffdf80  (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32 SINGLE: 1.31008000000000000000e+05 / 0x47ffe000  (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33 SINGLE: 1.31009000000000000000e+05 / 0x47ffe080  (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34 SINGLE: 2.14748352000000000000e+09 / 0x4effffff  (0x10 =>    INEXACT )
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35 SINGLE: 3.40282346638528859811e+38 / 0x7f7fffff  (0 => OK)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36 SINGLE: 3.40282346638528859811e+38 / 0x7f7fffff  (0 => OK)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38 SINGLE: 3.40282346638528859811e+38 / 0x7f7fffff  (0x14 => OVERFLOW   INEXACT )
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39 SINGLE: inf / 0x7f800000  (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40 SINGLE: nan / 0x7fc00000  (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41 SINGLE: nan / 0x7fc00000  (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42 SINGLE: nan / 0x7fe00000  (0x1 =>     INVALID)
Converting double-precision to fixed point 32 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681213e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007530e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 DOUBLE: -2.22507385850720138310e-308 / 0x008010000000000000 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT32:     -7/0xfffffff9 (0x10 =>    INEXACT )
18  INT32:    -14/0xfffffff2 (0x10 =>    INEXACT )
18  INT32:    -58/0xffffffc6 (0x10 =>    INEXACT )
18  INT32:   -936/0xfffffc58 (0x10 =>    INEXACT )
18  INT32: -239739/0xfffc5785 (0x10 =>    INEXACT )
18  INT32: -239739/0xfffc5785 (0x10 =>    INEXACT )
18  INT32: -2147483648/0x80000000 (0x11 =>    INEXACT INVALID)
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:    -66/0xffffffbe (0x10 =>    INEXACT )
23  INT32:    -66/0xffffffbe (0x10 =>    INEXACT )
23  INT32: -4331784/0xffbde6f8 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
Converting double-precision to fixed point 64 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681213e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007530e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
09  INT64:                   -8/0x00fffffffffffffff8 (0 => OK)
09  INT64:                  -32/0x00ffffffffffffffe0 (0 => OK)
09  INT64:                 -512/0x00fffffffffffffe00 (0 => OK)
09  INT64:              -131072/0x00fffffffffffe0000 (0 => OK)
09  INT64:          -8589934592/0x00fffffffe00000000 (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
10  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
10  INT64:                  -16/0x00fffffffffffffff0 (0 => OK)
10  INT64:                 -256/0x00ffffffffffffff00 (0 => OK)
10  INT64:               -65536/0x00ffffffffffff0000 (0 => OK)
10  INT64:          -4294967296/0x00ffffffff00000000 (0 => OK)
11 DOUBLE: -2.22507385850720138310e-308 / 0x008010000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                  128/0x000000000000000080 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                  255/0x0000000000000000ff (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    3/0x000000000000000003 (0x10 =>    INEXACT )
17  INT64:               261888/0x00000000000003ff00 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    4/0x000000000000000004 (0x10 =>    INEXACT )
18  INT64:               262144/0x000000000000040000 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT64:                    2/0x000000000000000002 (0 => OK)
19  INT64:                    4/0x000000000000000004 (0 => OK)
19  INT64:                   16/0x000000000000000010 (0 => OK)
19  INT64:                  256/0x000000000000000100 (0 => OK)
19  INT64:                65536/0x000000000000010000 (0 => OK)
19  INT64:           4294967296/0x000000000100000000 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT64:                    2/0x000000000000000002 (0x10 =>    INEXACT )
20  INT64:                    4/0x000000000000000004 (0x10 =>    INEXACT )
20  INT64:                   16/0x000000000000000010 (0x10 =>    INEXACT )
20  INT64:                  256/0x000000000000000100 (0x10 =>    INEXACT )
20  INT64:                65600/0x000000000000010040 (0x10 =>    INEXACT )
20  INT64:           4299161600/0x000000000100400000 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT64:                    2/0x000000000000000002 (0 => OK)
24  INT64:                    4/0x000000000000000004 (0 => OK)
24  INT64:                   16/0x000000000000000010 (0 => OK)
24  INT64:                  256/0x000000000000000100 (0 => OK)
24  INT64:                65536/0x000000000000010000 (0 => OK)
24  INT64:           4294967296/0x000000000100000000 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT64:                    4/0x000000000000000004 (0 => OK)
25  INT64:                    8/0x000000000000000008 (0 => OK)
25  INT64:                   32/0x000000000000000020 (0 => OK)
25  INT64:                  512/0x000000000000000200 (0 => OK)
25  INT64:               131072/0x000000000000020000 (0 => OK)
25  INT64:           8589934592/0x000000000200000000 (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT64:                    5/0x000000000000000005 (0x10 =>    INEXACT )
26  INT64:                   10/0x00000000000000000a (0x10 =>    INEXACT )
26  INT64:                   43/0x00000000000000002b (0x10 =>    INEXACT )
26  INT64:                  695/0x0000000000000002b7 (0x10 =>    INEXACT )
26  INT64:               178145/0x00000000000002b7e1 (0x10 =>    INEXACT )
26  INT64:          11674931554/0x0000000002b7e15162 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT64:                    6/0x000000000000000006 (0x10 =>    INEXACT )
27  INT64:                   12/0x00000000000000000c (0x10 =>    INEXACT )
27  INT64:                   50/0x000000000000000032 (0x10 =>    INEXACT )
27  INT64:                  804/0x000000000000000324 (0x10 =>    INEXACT )
27  INT64:               205887/0x00000000000003243f (0x10 =>    INEXACT )
27  INT64:          13493037704/0x0000000003243f6a88 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT64:               131006/0x00000000000001ffbe (0 => OK)
28  INT64:               262012/0x00000000000003ff7c (0 => OK)
28  INT64:              1048048/0x0000000000000ffdf0 (0 => OK)
28  INT64:             16768768/0x000000000000ffdf00 (0 => OK)
28  INT64:           4292804608/0x0000000000ffdf0000 (0 => OK)
28  INT64:      281333242789888/0x000000ffdf00000000 (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT64:               131008/0x00000000000001ffc0 (0 => OK)
29  INT64:               262016/0x00000000000003ff80 (0 => OK)
29  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
29  INT64:             16769024/0x000000000000ffe000 (0 => OK)
29  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
29  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT64:               131010/0x00000000000001ffc2 (0 => OK)
30  INT64:               262020/0x00000000000003ff84 (0 => OK)
30  INT64:              1048080/0x0000000000000ffe10 (0 => OK)
30  INT64:             16769280/0x000000000000ffe100 (0 => OK)
30  INT64:           4292935680/0x0000000000ffe10000 (0 => OK)
30  INT64:      281341832724480/0x000000ffe100000000 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT64:               262014/0x00000000000003ff7e (0 => OK)
31  INT64:               524028/0x00000000000007fefc (0 => OK)
31  INT64:              2096112/0x0000000000001ffbf0 (0 => OK)
31  INT64:             33537792/0x000000000001ffbf00 (0 => OK)
31  INT64:           8585674752/0x0000000001ffbf0000 (0 => OK)
31  INT64:      562670780547072/0x000001ffbf00000000 (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT64:               262016/0x00000000000003ff80 (0 => OK)
32  INT64:               524032/0x00000000000007ff00 (0 => OK)
32  INT64:              2096128/0x0000000000001ffc00 (0 => OK)
32  INT64:             33538048/0x000000000001ffc000 (0 => OK)
32  INT64:           8585740288/0x0000000001ffc00000 (0 => OK)
32  INT64:      562675075514368/0x000001ffc000000000 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT64:               262018/0x00000000000003ff82 (0 => OK)
33  INT64:               524036/0x00000000000007ff04 (0 => OK)
33  INT64:              2096144/0x0000000000001ffc10 (0 => OK)
33  INT64:             33538304/0x000000000001ffc100 (0 => OK)
33  INT64:           8585805824/0x0000000001ffc10000 (0 => OK)
33  INT64:      562679370481664/0x000001ffc100000000 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT64:           4294967294/0x0000000000fffffffe (0 => OK)
34  INT64:           8589934588/0x0000000001fffffffc (0 => OK)
34  INT64:          34359738352/0x0000000007fffffff0 (0 => OK)
34  INT64:         549755813632/0x000000007fffffff00 (0 => OK)
34  INT64:      140737488289792/0x0000007fffffff0000 (0 => OK)
34  INT64:  9223372032559808512/0x007fffffff00000000 (0 => OK)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting double-precision to 32 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681213e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007530e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT32:     -2/0xfffffffe (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT32:     -1/0xffffffff (0 => OK)
11 DOUBLE: -2.22507385850720138310e-308 / 0x008010000000000000 (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12  INT32:      0/         0 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14  INT32:      0/         0 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT32:      0/         0 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT32:      0/         0 (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT32:      0/         0 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT32:      0/         0 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT32:      1/       0x1 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT32:      1/       0x1 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT32:      0/         0 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT32:      0/         0 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT32:      0/         0 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT32:      1/       0x1 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT32:      2/       0x2 (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT32:      2/       0x2 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT32:      3/       0x3 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT32:  65503/    0xffdf (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT32:  65504/    0xffe0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT32:  65505/    0xffe1 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT32: 131007/   0x1ffbf (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT32: 131008/   0x1ffc0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT32: 131009/   0x1ffc1 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT32: 2147483647/0x7fffffff (0 => OK)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37  INT32:      0/         0 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT32:      0/         0 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT32:      0/         0 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT32:      0/         0 (0x1 =>     INVALID)
Converting double-precision to 64 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570815e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681213e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859812e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007530e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999085e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
11 DOUBLE: -2.22507385850720138310e-308 / 0x008010000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750797e-38 / 0x00b810000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT64:                    1/0x000000000000000001 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT64:                    1/0x000000000000000001 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT64:                    1/0x000000000000000001 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT64:                    2/0x000000000000000002 (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT64:                    2/0x000000000000000002 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT64:                    3/0x000000000000000003 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT64:                65503/0x00000000000000ffdf (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT64:                65504/0x00000000000000ffe0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT64:                65505/0x00000000000000ffe1 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT64:               131007/0x00000000000001ffbf (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT64:               131008/0x00000000000001ffc0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT64:               131009/0x00000000000001ffc1 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT64:           2147483647/0x00000000007fffffff (0 => OK)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to double-precision
00   HALF: 0xffff  (0 => OK)
00 DOUBLE: -1.31008000000000000000e+05 / 0x00c0fffc0000000000 (0 => OK)
01   HALF: 0xfcff  (0 => OK)
01 DOUBLE: -8.18560000000000000000e+04 / 0x00c0f3fc0000000000 (0 => OK)
02   HALF: 0xfc01  (0 => OK)
02 DOUBLE: -6.56000000000000000000e+04 / 0x00c0f0040000000000 (0 => OK)
03   HALF: 0xfc00  (0 => OK)
03 DOUBLE: -6.55360000000000000000e+04 / 0x00c0f0000000000000 (0 => OK)
04   HALF: 0xfbff  (0 => OK)
04 DOUBLE: -6.55040000000000000000e+04 / 0x00c0effc0000000000 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05 DOUBLE: -6.54720000000000000000e+04 / 0x00c0eff80000000000 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
08   HALF: 0x8001  (0 => OK)
08 DOUBLE: -5.96046447753906250000e-08 / 0x00be70000000000000 (0 => OK)
09   HALF: 0x8000  (0 => OK)
09 DOUBLE: -0.00000000000000000000e+00 / 0x008000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11 DOUBLE: 5.96046447753906250000e-08 / 0x003e70000000000000 (0 => OK)
12   HALF: 0x3c00  (0 => OK)
12 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13 DOUBLE: 6.54720000000000000000e+04 / 0x0040eff80000000000 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15 DOUBLE: 6.55360000000000000000e+04 / 0x0040f0000000000000 (0 => OK)
16   HALF: 0x7c01  (0 => OK)
16 DOUBLE: 6.56000000000000000000e+04 / 0x0040f0040000000000 (0 => OK)
17   HALF: 0x7cff  (0 => OK)
17 DOUBLE: 8.18560000000000000000e+04 / 0x0040f3fc0000000000 (0 => OK)
18   HALF: 0x7fff  (0 => OK)
18 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
Converting half-precision to single-precision
00   HALF: 0xffff  (0 => OK)
00 SINGLE: -1.31008000000000000000e+05 / 0xc7ffe000  (0 => OK)
01   HALF: 0xfcff  (0 => OK)
01 SINGLE: -8.18560000000000000000e+04 / 0xc79fe000  (0 => OK)
02   HALF: 0xfc01  (0 => OK)
02 SINGLE: -6.56000000000000000000e+04 / 0xc7802000  (0 => OK)
03   HALF: 0xfc00  (0 => OK)
03 SINGLE: -6.55360000000000000000e+04 / 0xc7800000  (0 => OK)
04   HALF: 0xfbff  (0 => OK)
04 SINGLE: -6.55040000000000000000e+04 / 0xc77fe000  (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05 SINGLE: -6.54720000000000000000e+04 / 0xc77fc000  (0 => OK)
06   HALF: 0xc000  (0 => OK)
06 SINGLE: -2.00000000000000000000e+00 / 0xc0000000  (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07 SINGLE: -1.00000000000000000000e+00 / 0xbf800000  (0 => OK)
08   HALF: 0x8001  (0 => OK)
08 SINGLE: -5.96046447753906250000e-08 / 0xb3800000  (0 => OK)
09   HALF: 0x8000  (0 => OK)
09 SINGLE: -0.00000000000000000000e+00 / 0x80000000  (0 => OK)
10   HALF: 0000  (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11   HALF: 0x01  (0 => OK)
11 SINGLE: 5.96046447753906250000e-08 / 0x33800000  (0 => OK)
12   HALF: 0x3c00  (0 => OK)
12 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15 SINGLE: 6.55360000000000000000e+04 / 0x47800000  (0 => OK)
16   HALF: 0x7c01  (0 => OK)
16 SINGLE: 6.56000000000000000000e+04 / 0x47802000  (0 => OK)
17   HALF: 0x7cff  (0 => OK)
17 SINGLE: 8.18560000000000000000e+04 / 0x479fe000  (0 => OK)
18   HALF: 0x7fff  (0 => OK)
18 SINGLE: 1.31008000000000000000e+05 / 0x47ffe000  (0 => OK)
Converting half-precision to fixed point 64 bit int
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:              -131008/0x00fffffffffffe0040 (0 => OK)
04  INT64:              -262016/0x00fffffffffffc0080 (0 => OK)
04  INT64:             -1048064/0x00fffffffffff00200 (0 => OK)
04  INT64:            -16769024/0x00ffffffffff002000 (0 => OK)
04  INT64:          -4292870144/0x00ffffffff00200000 (0 => OK)
04  INT64:     -281337537757184/0x00ffff002000000000 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:              -130944/0x00fffffffffffe0080 (0 => OK)
05  INT64:              -261888/0x00fffffffffffc0100 (0 => OK)
05  INT64:             -1047552/0x00fffffffffff00400 (0 => OK)
05  INT64:            -16760832/0x00ffffffffff004000 (0 => OK)
05  INT64:          -4290772992/0x00ffffffff00400000 (0 => OK)
05  INT64:     -281200098803712/0x00ffff004000000000 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
06  INT64:                   -8/0x00fffffffffffffff8 (0 => OK)
06  INT64:                  -32/0x00ffffffffffffffe0 (0 => OK)
06  INT64:                 -512/0x00fffffffffffffe00 (0 => OK)
06  INT64:              -131072/0x00fffffffffffe0000 (0 => OK)
06  INT64:          -8589934592/0x00fffffffe00000000 (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
07  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
07  INT64:                  -16/0x00fffffffffffffff0 (0 => OK)
07  INT64:                 -256/0x00ffffffffffffff00 (0 => OK)
07  INT64:               -65536/0x00ffffffffffff0000 (0 => OK)
07  INT64:          -4294967296/0x00ffffffff00000000 (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                 -256/0x00ffffffffffffff00 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                  256/0x000000000000000100 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    2/0x000000000000000002 (0 => OK)
12  INT64:                    4/0x000000000000000004 (0 => OK)
12  INT64:                   16/0x000000000000000010 (0 => OK)
12  INT64:                  256/0x000000000000000100 (0 => OK)
12  INT64:                65536/0x000000000000010000 (0 => OK)
12  INT64:           4294967296/0x000000000100000000 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:               130944/0x00000000000001ff80 (0 => OK)
13  INT64:               261888/0x00000000000003ff00 (0 => OK)
13  INT64:              1047552/0x0000000000000ffc00 (0 => OK)
13  INT64:             16760832/0x000000000000ffc000 (0 => OK)
13  INT64:           4290772992/0x0000000000ffc00000 (0 => OK)
13  INT64:      281200098803712/0x000000ffc000000000 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:               131008/0x00000000000001ffc0 (0 => OK)
14  INT64:               262016/0x00000000000003ff80 (0 => OK)
14  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
14  INT64:             16769024/0x000000000000ffe000 (0 => OK)
14  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
14  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to fixed point 32 bit int
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT32:     -4/0xfffffffc (0x10 =>    INEXACT )
06  INT32:     -8/0xfffffff8 (0x10 =>    INEXACT )
06  INT32:    -32/0xffffffe0 (0x10 =>    INEXACT )
06  INT32:   -515/0xfffffdfd (0x10 =>    INEXACT )
06  INT32: -131840/0xfffdfd00 (0x10 =>    INEXACT )
06  INT32: -131840/0xfffdfd00 (0x10 =>    INEXACT )
06  INT32: -2147483648/0x80000000 (0x11 =>    INEXACT INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:     -2/0xfffffffe (0x10 =>    INEXACT )
07  INT32:   -514/0xfffffdfe (0x10 =>    INEXACT )
07  INT32:   -514/0xfffffdfe (0x10 =>    INEXACT )
07  INT32: -33746944/0xfdfd1000 (0x10 =>    INEXACT )
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      2/       0x2 (0x10 =>    INEXACT )
12  INT32:    512/     0x200 (0x10 =>    INEXACT )
12  INT32:    512/     0x200 (0x10 =>    INEXACT )
12  INT32: 33615872/ 0x200f000 (0x10 =>    INEXACT )
13   HALF: 0x7bfe  (0 => OK)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14   HALF: 0x7bff  (0 => OK)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15   HALF: 0x7c00  (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 64 bit int
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:               -65504/0x00ffffffffffff0020 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:               -65472/0x00ffffffffffff0040 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    1/0x000000000000000001 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:                65472/0x00000000000000ffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:                65504/0x00000000000000ffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to 32 bit int
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32:      0/         0 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32: -65504/0xffff0020 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT32: -65472/0xffff0040 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT32:     -2/0xfffffffe (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT32:     -1/0xffffffff (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      1/       0x1 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT32:  65472/    0xffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT32:  65504/    0xffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32:      0/         0 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32:      0/         0 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 64 bit uint
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    1/0x000000000000000001 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:                65472/0x00000000000000ffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:                65504/0x00000000000000ffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:                   -1/0x00ffffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to 32 bit uint
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32:      0/         0 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32:      0/         0 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32:      0/         0 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT32:      0/         0 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT32:      0/         0 (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT32:      0/         0 (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      1/       0x1 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT32:  65472/    0xffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT32:  65504/    0xffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT32:     -1/0xffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32:      0/         0 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32:      0/         0 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 16 bit uint
00   HALF: 0xffff  (0 => OK)
00   HALF: 0000  (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01   HALF: 0000  (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02   HALF: 0000  (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03   HALF: 0000  (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04   HALF: 0000  (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05   HALF: 0000  (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06   HALF: 0000  (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07   HALF: 0000  (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08   HALF: 0000  (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09   HALF: 0000  (0 => OK)
10   HALF: 0000  (0 => OK)
10   HALF: 0000  (0 => OK)
11   HALF: 0x01  (0 => OK)
11   HALF: 0000  (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12   HALF: 0x01  (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13   HALF: 0xffc0  (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14   HALF: 0xffe0  (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15   HALF: 0xffff  (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16   HALF: 0000  (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17   HALF: 0000  (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18   HALF: 0000  (0x1 =>     INVALID)
Converting signed int32 to half-precision
00  INT32:      0/         0 (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT32:      1/       0x1 (0 => OK)
01   HALF: 0x3c00  (0 => OK)
02  INT32:     16/      0x10 (0 => OK)
02   HALF: 0x4c00  (0 => OK)
03  INT32:    256/     0x100 (0 => OK)
03   HALF: 0x5c00  (0 => OK)
04  INT32:   4096/    0x1000 (0 => OK)
04   HALF: 0x6c00  (0 => OK)
05  INT32:  65503/    0xffdf (0 => OK)
05   HALF: 0x7bfe  (0x10 =>    INEXACT )
06  INT32:  65504/    0xffe0 (0 => OK)
06   HALF: 0x7bff  (0 => OK)
07  INT32:  65505/    0xffe1 (0 => OK)
07   HALF: 0x7bff  (0x10 =>    INEXACT )
08  INT32:  65535/    0xffff (0 => OK)
08   HALF: 0x7bff  (0x10 =>    INEXACT )
09  INT32:  65536/   0x10000 (0 => OK)
09   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10  INT32: 1048576/  0x100000 (0 => OK)
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11  INT32: 16777215/  0xffffff (0 => OK)
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12  INT32: 16777216/ 0x1000000 (0 => OK)
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13  INT32: 16777217/ 0x1000001 (0 => OK)
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14  INT32: 268435456/0x10000000 (0 => OK)
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15  INT32: 536870912/0x20000000 (0 => OK)
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16  INT32: 1073741824/0x40000000 (0 => OK)
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
17  INT32: -2147483648/0x80000000 (0 => OK)
17   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
18  INT32: -2147483647/0x80000001 (0 => OK)
18   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
19  INT32: -2147483617/0x8000001f (0 => OK)
19   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
20  INT32: -2147483585/0x8000003f (0 => OK)
20   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
21  INT32: -2147483521/0x8000007f (0 => OK)
21   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
22  INT32: -2147483393/0x800000ff (0 => OK)
22   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
23  INT32: -2147483137/0x800001ff (0 => OK)
23   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
24  INT32: -2147482849/0x8000031f (0 => OK)
24   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25  INT32: -2147481601/0x800007ff (0 => OK)
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26  INT32: -2147479553/0x80000fff (0 => OK)
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27  INT32: -2147418113/0x8000ffff (0 => OK)
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28  INT32: -2146435073/0x800fffff (0 => OK)
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29  INT32: -2130706433/0x80ffffff (0 => OK)
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30  INT32: -1879048193/0x8fffffff (0 => OK)
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31  INT32: -1610612737/0x9fffffff (0 => OK)
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32  INT32: -1342177281/0xafffffff (0 => OK)
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33  INT32: -1073741825/0xbfffffff (0 => OK)
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34  INT32: -805306369/0xcfffffff (0 => OK)
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35  INT32: -536870913/0xdfffffff (0 => OK)
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36  INT32: -268435457/0xefffffff (0 => OK)
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37  INT32:     -1/0xffffffff (0 => OK)
37   HALF: 0xbc00  (0 => OK)
38  INT32:     -2/0xfffffffe (0 => OK)
38   HALF: 0xc000  (0 => OK)
39  INT32:     -3/0xfffffffd (0 => OK)
39   HALF: 0xc200  (0 => OK)
40  INT32:     -4/0xfffffffc (0 => OK)
40   HALF: 0xc400  (0 => OK)
41  INT32:     -8/0xfffffff8 (0 => OK)
41   HALF: 0xc800  (0 => OK)
42  INT32:    -16/0xfffffff0 (0 => OK)
42   HALF: 0xcc00  (0 => OK)
43  INT32:    -32/0xffffffe0 (0 => OK)
43   HALF: 0xd000  (0 => OK)
44  INT32:    -48/0xffffffd0 (0 => OK)
44   HALF: 0xd200  (0 => OK)
45  INT32:    -64/0xffffffc0 (0 => OK)
45   HALF: 0xd400  (0 => OK)
46  INT32:   -128/0xffffff80 (0 => OK)
46   HALF: 0xd800  (0 => OK)
47  INT32:   -512/0xfffffe00 (0 => OK)
47   HALF: 0xe000  (0 => OK)
48  INT32:   -768/0xfffffd00 (0 => OK)
48   HALF: 0xe200  (0 => OK)
49  INT32:  -1024/0xfffffc00 (0 => OK)
49   HALF: 0xe400  (0 => OK)
50  INT32:  -2048/0xfffff800 (0 => OK)
50   HALF: 0xe800  (0 => OK)
51  INT32:  -4096/0xfffff000 (0 => OK)
51   HALF: 0xec00  (0 => OK)
52  INT32:  -8192/0xffffe000 (0 => OK)
52   HALF: 0xf000  (0 => OK)
53  INT32: -12288/0xffffd000 (0 => OK)
53   HALF: 0xf200  (0 => OK)
54  INT32: -16384/0xffffc000 (0 => OK)
54   HALF: 0xf400  (0 => OK)
55  INT32: -32768/0xffff8000 (0 => OK)
55   HALF: 0xf800  (0 => OK)
56  INT32: -524288/0xfff80000 (0 => OK)
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57  INT32: -8388608/0xff800000 (0 => OK)
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58  INT32: -16777216/0xff000000 (0 => OK)
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
59  INT32: -33554432/0xfe000000 (0 => OK)
59   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
60  INT32: -50331648/0xfd000000 (0 => OK)
60   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
61  INT32: -67108864/0xfc000000 (0 => OK)
61   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
62  INT32: -134217728/0xf8000000 (0 => OK)
62   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
63  INT32: -268435456/0xf0000000 (0 => OK)
63   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
64  INT32: -536870912/0xe0000000 (0 => OK)
64   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
65  INT32: -805306368/0xd0000000 (0 => OK)
65   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
66  INT32: -1073741824/0xc0000000 (0 => OK)
66   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
67  INT32: -2147483648/0x80000000 (0 => OK)
67   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
Converting fixed point int32 to half-precision
00  INT32:      0/         0 (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT32:      1/       0x1 (0 => OK)
01   HALF: 0x3800  (0 => OK)
01   HALF: 0x3400  (0 => OK)
01   HALF: 0x2c00  (0 => OK)
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02  INT32:     16/      0x10 (0 => OK)
02   HALF: 0x4800  (0 => OK)
02   HALF: 0x4400  (0 => OK)
02   HALF: 0x3c00  (0 => OK)
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03  INT32:    256/     0x100 (0 => OK)
03   HALF: 0x5800  (0 => OK)
03   HALF: 0x5400  (0 => OK)
03   HALF: 0x4c00  (0 => OK)
03   HALF: 0x01  (0 => OK)
04  INT32:   4096/    0x1000 (0 => OK)
04   HALF: 0x6800  (0 => OK)
04   HALF: 0x6400  (0 => OK)
04   HALF: 0x5c00  (0 => OK)
04   HALF: 0x10  (0 => OK)
05  INT32:  65503/    0xffdf (0 => OK)
05   HALF: 0x77fe  (0x10 =>    INEXACT )
05   HALF: 0x73fe  (0x10 =>    INEXACT )
05   HALF: 0x6bfe  (0x10 =>    INEXACT )
05   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
06  INT32:  65504/    0xffe0 (0 => OK)
06   HALF: 0x77ff  (0 => OK)
06   HALF: 0x73ff  (0 => OK)
06   HALF: 0x6bff  (0 => OK)
06   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
07  INT32:  65505/    0xffe1 (0 => OK)
07   HALF: 0x77ff  (0x10 =>    INEXACT )
07   HALF: 0x73ff  (0x10 =>    INEXACT )
07   HALF: 0x6bff  (0x10 =>    INEXACT )
07   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
08  INT32:  65535/    0xffff (0 => OK)
08   HALF: 0x77ff  (0x10 =>    INEXACT )
08   HALF: 0x73ff  (0x10 =>    INEXACT )
08   HALF: 0x6bff  (0x10 =>    INEXACT )
08   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
09  INT32:  65536/   0x10000 (0 => OK)
09   HALF: 0x7800  (0 => OK)
09   HALF: 0x7400  (0 => OK)
09   HALF: 0x6c00  (0 => OK)
09   HALF: 0x100  (0 => OK)
10  INT32: 1048576/  0x100000 (0 => OK)
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0xc00  (0x14 => OVERFLOW   INEXACT )
11  INT32: 16777215/  0xffffff (0 => OK)
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x1bff  (0x14 => OVERFLOW   INEXACT )
12  INT32: 16777216/ 0x1000000 (0 => OK)
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
13  INT32: 16777217/ 0x1000001 (0 => OK)
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
14  INT32: 268435456/0x10000000 (0 => OK)
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
15  INT32: 536870912/0x20000000 (0 => OK)
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
16  INT32: 1073741824/0x40000000 (0 => OK)
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
17  INT32: -2147483648/0x80000000 (0 => OK)
17   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
18  INT32: -2147483647/0x80000001 (0 => OK)
18   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
19  INT32: -2147483617/0x8000001f (0 => OK)
19   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
20  INT32: -2147483585/0x8000003f (0 => OK)
20   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
21  INT32: -2147483521/0x8000007f (0 => OK)
21   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
22  INT32: -2147483393/0x800000ff (0 => OK)
22   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
23  INT32: -2147483137/0x800001ff (0 => OK)
23   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
24  INT32: -2147482849/0x8000031f (0 => OK)
24   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
25  INT32: -2147481601/0x800007ff (0 => OK)
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
26  INT32: -2147479553/0x80000fff (0 => OK)
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
27  INT32: -2147418113/0x8000ffff (0 => OK)
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
28  INT32: -2146435073/0x800fffff (0 => OK)
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
29  INT32: -2130706433/0x80ffffff (0 => OK)
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xb7f1  (0x14 => OVERFLOW   INEXACT )
30  INT32: -1879048193/0x8fffffff (0 => OK)
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xb701  (0x14 => OVERFLOW   INEXACT )
31  INT32: -1610612737/0x9fffffff (0 => OK)
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xb601  (0x14 => OVERFLOW   INEXACT )
32  INT32: -1342177281/0xafffffff (0 => OK)
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xb501  (0x14 => OVERFLOW   INEXACT )
33  INT32: -1073741825/0xbfffffff (0 => OK)
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xb401  (0x14 => OVERFLOW   INEXACT )
34  INT32: -805306369/0xcfffffff (0 => OK)
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xb201  (0x14 => OVERFLOW   INEXACT )
35  INT32: -536870913/0xdfffffff (0 => OK)
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xb001  (0x14 => OVERFLOW   INEXACT )
36  INT32: -268435457/0xefffffff (0 => OK)
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xac01  (0x14 => OVERFLOW   INEXACT )
37  INT32:     -1/0xffffffff (0 => OK)
37   HALF: 0xb800  (0 => OK)
37   HALF: 0xb400  (0 => OK)
37   HALF: 0xac00  (0 => OK)
37   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
38  INT32:     -2/0xfffffffe (0 => OK)
38   HALF: 0xbc00  (0 => OK)
38   HALF: 0xb800  (0 => OK)
38   HALF: 0xb000  (0 => OK)
38   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
39  INT32:     -3/0xfffffffd (0 => OK)
39   HALF: 0xbe00  (0 => OK)
39   HALF: 0xba00  (0 => OK)
39   HALF: 0xb200  (0 => OK)
39   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
40  INT32:     -4/0xfffffffc (0 => OK)
40   HALF: 0xc000  (0 => OK)
40   HALF: 0xbc00  (0 => OK)
40   HALF: 0xb400  (0 => OK)
40   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
41  INT32:     -8/0xfffffff8 (0 => OK)
41   HALF: 0xc400  (0 => OK)
41   HALF: 0xc000  (0 => OK)
41   HALF: 0xb800  (0 => OK)
41   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
42  INT32:    -16/0xfffffff0 (0 => OK)
42   HALF: 0xc800  (0 => OK)
42   HALF: 0xc400  (0 => OK)
42   HALF: 0xbc00  (0 => OK)
42   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
43  INT32:    -32/0xffffffe0 (0 => OK)
43   HALF: 0xcc00  (0 => OK)
43   HALF: 0xc800  (0 => OK)
43   HALF: 0xc000  (0 => OK)
43   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
44  INT32:    -48/0xffffffd0 (0 => OK)
44   HALF: 0xce00  (0 => OK)
44   HALF: 0xca00  (0 => OK)
44   HALF: 0xc200  (0 => OK)
44   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
45  INT32:    -64/0xffffffc0 (0 => OK)
45   HALF: 0xd000  (0 => OK)
45   HALF: 0xcc00  (0 => OK)
45   HALF: 0xc400  (0 => OK)
45   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
46  INT32:   -128/0xffffff80 (0 => OK)
46   HALF: 0xd400  (0 => OK)
46   HALF: 0xd000  (0 => OK)
46   HALF: 0xc800  (0 => OK)
46   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
47  INT32:   -512/0xfffffe00 (0 => OK)
47   HALF: 0xdc00  (0 => OK)
47   HALF: 0xd800  (0 => OK)
47   HALF: 0xd000  (0 => OK)
47   HALF: 0x8002  (0 => OK)
48  INT32:   -768/0xfffffd00 (0 => OK)
48   HALF: 0xde00  (0 => OK)
48   HALF: 0xda00  (0 => OK)
48   HALF: 0xd200  (0 => OK)
48   HALF: 0x8003  (0 => OK)
49  INT32:  -1024/0xfffffc00 (0 => OK)
49   HALF: 0xe000  (0 => OK)
49   HALF: 0xdc00  (0 => OK)
49   HALF: 0xd400  (0 => OK)
49   HALF: 0x8004  (0 => OK)
50  INT32:  -2048/0xfffff800 (0 => OK)
50   HALF: 0xe400  (0 => OK)
50   HALF: 0xe000  (0 => OK)
50   HALF: 0xd800  (0 => OK)
50   HALF: 0x8008  (0 => OK)
51  INT32:  -4096/0xfffff000 (0 => OK)
51   HALF: 0xe800  (0 => OK)
51   HALF: 0xe400  (0 => OK)
51   HALF: 0xdc00  (0 => OK)
51   HALF: 0x8010  (0 => OK)
52  INT32:  -8192/0xffffe000 (0 => OK)
52   HALF: 0xec00  (0 => OK)
52   HALF: 0xe800  (0 => OK)
52   HALF: 0xe000  (0 => OK)
52   HALF: 0x8020  (0 => OK)
53  INT32: -12288/0xffffd000 (0 => OK)
53   HALF: 0xee00  (0 => OK)
53   HALF: 0xea00  (0 => OK)
53   HALF: 0xe200  (0 => OK)
53   HALF: 0x8030  (0 => OK)
54  INT32: -16384/0xffffc000 (0 => OK)
54   HALF: 0xf000  (0 => OK)
54   HALF: 0xec00  (0 => OK)
54   HALF: 0xe400  (0 => OK)
54   HALF: 0x8040  (0 => OK)
55  INT32: -32768/0xffff8000 (0 => OK)
55   HALF: 0xf400  (0 => OK)
55   HALF: 0xf000  (0 => OK)
55   HALF: 0xe800  (0 => OK)
55   HALF: 0x8080  (0 => OK)
56  INT32: -524288/0xfff80000 (0 => OK)
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xf800  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0x8800  (0x14 => OVERFLOW   INEXACT )
57  INT32: -8388608/0xff800000 (0 => OK)
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0x9800  (0x14 => OVERFLOW   INEXACT )
58  INT32: -16777216/0xff000000 (0 => OK)
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0x9c00  (0x14 => OVERFLOW   INEXACT )
59  INT32: -33554432/0xfe000000 (0 => OK)
59   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xa000  (0x14 => OVERFLOW   INEXACT )
60  INT32: -50331648/0xfd000000 (0 => OK)
60   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xa200  (0x14 => OVERFLOW   INEXACT )
61  INT32: -67108864/0xfc000000 (0 => OK)
61   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xa400  (0x14 => OVERFLOW   INEXACT )
62  INT32: -134217728/0xf8000000 (0 => OK)
62   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xa800  (0x14 => OVERFLOW   INEXACT )
63  INT32: -268435456/0xf0000000 (0 => OK)
63   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xac00  (0x14 => OVERFLOW   INEXACT )
64  INT32: -536870912/0xe0000000 (0 => OK)
64   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xb000  (0x14 => OVERFLOW   INEXACT )
65  INT32: -805306368/0xd0000000 (0 => OK)
65   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xb200  (0x14 => OVERFLOW   INEXACT )
66  INT32: -1073741824/0xc0000000 (0 => OK)
66   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xb400  (0x14 => OVERFLOW   INEXACT )
67  INT32: -2147483648/0x80000000 (0 => OK)
67   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
Converting fixed point int64 to half-precision
00  INT64:                    0/00000000000000000000 (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT64:                    1/0x000000000000000001 (0 => OK)
01   HALF: 0x3800  (0 => OK)
01   HALF: 0x3400  (0 => OK)
01   HALF: 0x2c00  (0 => OK)
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02  INT64:                   16/0x000000000000000010 (0 => OK)
02   HALF: 0x4800  (0 => OK)
02   HALF: 0x4400  (0 => OK)
02   HALF: 0x3c00  (0 => OK)
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03  INT64:                  256/0x000000000000000100 (0 => OK)
03   HALF: 0x5800  (0 => OK)
03   HALF: 0x5400  (0 => OK)
03   HALF: 0x4c00  (0 => OK)
03   HALF: 0x01  (0 => OK)
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04  INT64:                 4096/0x000000000000001000 (0 => OK)
04   HALF: 0x6800  (0 => OK)
04   HALF: 0x6400  (0 => OK)
04   HALF: 0x5c00  (0 => OK)
04   HALF: 0x10  (0 => OK)
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
05  INT64:                65503/0x00000000000000ffdf (0 => OK)
05   HALF: 0x77fe  (0x10 =>    INEXACT )
05   HALF: 0x73fe  (0x10 =>    INEXACT )
05   HALF: 0x6bfe  (0x10 =>    INEXACT )
05   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x07  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x03  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
06  INT64:                65504/0x00000000000000ffe0 (0 => OK)
06   HALF: 0x77ff  (0 => OK)
06   HALF: 0x73ff  (0 => OK)
06   HALF: 0x6bff  (0 => OK)
06   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x07  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x03  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
07  INT64:                65505/0x00000000000000ffe1 (0 => OK)
07   HALF: 0x77ff  (0x10 =>    INEXACT )
07   HALF: 0x73ff  (0x10 =>    INEXACT )
07   HALF: 0x6bff  (0x10 =>    INEXACT )
07   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x07  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x03  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
08  INT64:                65535/0x00000000000000ffff (0 => OK)
08   HALF: 0x77ff  (0x10 =>    INEXACT )
08   HALF: 0x73ff  (0x10 =>    INEXACT )
08   HALF: 0x6bff  (0x10 =>    INEXACT )
08   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x07  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x03  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
09  INT64:                65536/0x000000000000010000 (0 => OK)
09   HALF: 0x7800  (0 => OK)
09   HALF: 0x7400  (0 => OK)
09   HALF: 0x6c00  (0 => OK)
09   HALF: 0x100  (0 => OK)
09   HALF: 0x08  (0 => OK)
09   HALF: 0x04  (0 => OK)
09   HALF: 0x02  (0 => OK)
10  INT64:              1048576/0x000000000000100000 (0 => OK)
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0xc00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x80  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x40  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x20  (0x14 => OVERFLOW   INEXACT )
11  INT64:             16777215/0x000000000000ffffff (0 => OK)
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x1bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7ff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x3ff  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
11   HALF: 0x1ff  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
12  INT64:             16777216/0x000000000001000000 (0 => OK)
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x400  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x200  (0x14 => OVERFLOW   INEXACT )
13  INT64:             16777217/0x000000000001000001 (0 => OK)
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x400  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x200  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
14  INT64:            268435456/0x000000000010000000 (0 => OK)
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1400  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1000  (0x14 => OVERFLOW   INEXACT )
15  INT64:            536870912/0x000000000020000000 (0 => OK)
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1400  (0x14 => OVERFLOW   INEXACT )
16  INT64:           1073741824/0x000000000040000000 (0 => OK)
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x2000  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
17  INT64:           2147483648/0x000000000080000000 (0 => OK)
17   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x3800  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x2400  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x2000  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
18  INT64:          34359738368/0x000000000800000000 (0 => OK)
18   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x4800  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
19  INT64:         549755813888/0x000000008000000000 (0 => OK)
19   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x5800  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x4400  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x4000  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x3c00  (0x14 => OVERFLOW   INEXACT )
20  INT64:        8796093022208/0x000000080000000000 (0 => OK)
20   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x6800  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x5400  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x5000  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x4c00  (0x14 => OVERFLOW   INEXACT )
21  INT64:      140737488355328/0x000000800000000000 (0 => OK)
21   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7800  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x6400  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x6000  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x5c00  (0x14 => OVERFLOW   INEXACT )
22  INT64:     2251799813685248/0x000008000000000000 (0 => OK)
22   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7400  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7000  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x6c00  (0x14 => OVERFLOW   INEXACT )
23  INT64:    36028797018963968/0x000080000000000000 (0 => OK)
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24  INT64:   576460752303423488/0x000800000000000000 (0 => OK)
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
25  INT64: -9223372036854775808/0x008000000000000000 (0 => OK)
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26  INT64: -9223372036854775807/0x008000000000000001 (0 => OK)
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27  INT64: -9223372036854775777/0x00800000000000001f (0 => OK)
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28  INT64: -9223372036854775745/0x00800000000000003f (0 => OK)
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29  INT64: -9223372036854775681/0x00800000000000007f (0 => OK)
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30  INT64: -9223372036854775553/0x0080000000000000ff (0 => OK)
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31  INT64: -9223372036854775297/0x0080000000000001ff (0 => OK)
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32  INT64: -9223372036854775009/0x00800000000000031f (0 => OK)
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33  INT64: -9223372036854773761/0x0080000000000007ff (0 => OK)
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34  INT64: -9223372036854771713/0x008000000000000fff (0 => OK)
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35  INT64: -9223372036854710273/0x00800000000000ffff (0 => OK)
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36  INT64: -9223372036853727233/0x0080000000000fffff (0 => OK)
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37  INT64: -9223372036837998593/0x008000000000ffffff (0 => OK)
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38  INT64: -9223372036586340353/0x00800000000fffffff (0 => OK)
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39  INT64: -9223372032559808513/0x0080000000ffffffff (0 => OK)
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40  INT64: -9223371968135299073/0x008000000fffffffff (0 => OK)
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41  INT64: -9223370937343148033/0x00800000ffffffffff (0 => OK)
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42  INT64: -9223354444668731393/0x0080000fffffffffff (0 => OK)
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43  INT64: -9223090561878065153/0x008000ffffffffffff (0 => OK)
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44  INT64: -9218868437227405313/0x00800fffffffffffff (0 => OK)
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45  INT64: -9218868437227405313/0x00800fffffffffffff (0 => OK)
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46  INT64: -9151314442816847873/0x0080ffffffffffffff (0 => OK)
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47  INT64: -9079256848778919937/0x0081ffffffffffffff (0 => OK)
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48  INT64: -8935141660703064065/0x0083ffffffffffffff (0 => OK)
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49  INT64: -8646911284551352321/0x0087ffffffffffffff (0 => OK)
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50  INT64: -8070450532247928833/0x008fffffffffffffff (0 => OK)
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51  INT64: -6917529027641081857/0x009fffffffffffffff (0 => OK)
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52  INT64: -5764607523034234881/0x00afffffffffffffff (0 => OK)
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53  INT64: -4611686018427387905/0x00bfffffffffffffff (0 => OK)
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54  INT64: -3458764513820540929/0x00cfffffffffffffff (0 => OK)
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55  INT64: -2305843009213693953/0x00dfffffffffffffff (0 => OK)
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56  INT64: -1152921504606846977/0x00efffffffffffffff (0 => OK)
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57  INT64: -1152921504606846976/0x00f000000000000000 (0 => OK)
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58  INT64:   -18001204369948673/0x00ffc00bffffffffff (0 => OK)
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfc00  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xf7ff  (0x14 => OVERFLOW   INEXACT )
59  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
59   HALF: 0xb800  (0 => OK)
59   HALF: 0xb400  (0 => OK)
59   HALF: 0xac00  (0 => OK)
59   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8001  (0x18 =>  UNDERFLOW  INEXACT )
### Rounding to zero
Converting single-precision to half-precision
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00   HALF: 0000  (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01   HALF: 0000  (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02   HALF: 0000  (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03   HALF: 0000  (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04   HALF: 0000  (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05   HALF: 0000  (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06   HALF: 0000  (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07   HALF: 0000  (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08   HALF: 0000  (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09   HALF: 0000  (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10   HALF: 0000  (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11   HALF: 0000  (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12   HALF: 0000  (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13   HALF: 0000  (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14   HALF: 0000  (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15   HALF: 0x3c00  (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16   HALF: 0x3c00  (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17   HALF: 0x4000  (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18   HALF: 0x4000  (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19   HALF: 0x4200  (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20   HALF: 0x7bfe  (0x10 =>    INEXACT )
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21   HALF: 0x7bff  (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22   HALF: 0x7bff  (0x10 =>    INEXACT )
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23   HALF: 0x7bfd  (0x10 =>    INEXACT )
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24   HALF: 0x7bfe  (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25   HALF: 0x7bfe  (0x10 =>    INEXACT )
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26   HALF: 0x7bff  (0x10 =>    INEXACT )
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27   HALF: 0x7bff  (0x10 =>    INEXACT )
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28   HALF: 0x7bff  (0x10 =>    INEXACT )
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29   HALF: 0000  (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30   HALF: 0000  (0 => OK)
Converting single-precision to double-precision
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19 DOUBLE: 3.00000000000000000000e+00 / 0x004008000000000000 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23 DOUBLE: 6.54710000000000000000e+04 / 0x0040eff7e000000000 (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24 DOUBLE: 6.54720000000000000000e+04 / 0x0040eff80000000000 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25 DOUBLE: 6.54730000000000000000e+04 / 0x0040eff82000000000 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28 DOUBLE: 6.55350000000000000000e+04 / 0x0040efffe000000000 (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
Converting single-precision to fixed point 32 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      2/       0x2 (0 => OK)
15  INT32:      4/       0x4 (0 => OK)
15  INT32:     16/      0x10 (0 => OK)
15  INT32:    256/     0x100 (0 => OK)
15  INT32:  65536/   0x10000 (0 => OK)
15  INT32:  65536/   0x10000 (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      2/       0x2 (0 => OK)
16  INT32:      4/       0x4 (0 => OK)
16  INT32:     16/      0x10 (0 => OK)
16  INT32:    256/     0x100 (0 => OK)
16  INT32:  65536/   0x10000 (0 => OK)
16  INT32:  65536/   0x10000 (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      4/       0x4 (0 => OK)
17  INT32:      8/       0x8 (0 => OK)
17  INT32:     32/      0x20 (0 => OK)
17  INT32:    512/     0x200 (0 => OK)
17  INT32: 131072/   0x20000 (0 => OK)
17  INT32: 131072/   0x20000 (0 => OK)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      4/       0x4 (0 => OK)
18  INT32:      8/       0x8 (0 => OK)
18  INT32:     32/      0x20 (0 => OK)
18  INT32:    512/     0x200 (0 => OK)
18  INT32: 131072/   0x20000 (0 => OK)
18  INT32: 131072/   0x20000 (0 => OK)
18  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      6/       0x6 (0 => OK)
19  INT32:     12/       0xc (0 => OK)
19  INT32:     48/      0x30 (0 => OK)
19  INT32:    768/     0x300 (0 => OK)
19  INT32: 196608/   0x30000 (0 => OK)
19  INT32: 196608/   0x30000 (0 => OK)
19  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32: 131006/   0x1ffbe (0 => OK)
20  INT32: 262012/   0x3ff7c (0 => OK)
20  INT32: 1048048/   0xffdf0 (0 => OK)
20  INT32: 16768768/  0xffdf00 (0 => OK)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
20  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32: 131008/   0x1ffc0 (0 => OK)
21  INT32: 262016/   0x3ff80 (0 => OK)
21  INT32: 1048064/   0xffe00 (0 => OK)
21  INT32: 16769024/  0xffe000 (0 => OK)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
21  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32: 131010/   0x1ffc2 (0 => OK)
22  INT32: 262020/   0x3ff84 (0 => OK)
22  INT32: 1048080/   0xffe10 (0 => OK)
22  INT32: 16769280/  0xffe100 (0 => OK)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
22  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32: 130942/   0x1ff7e (0 => OK)
23  INT32: 261884/   0x3fefc (0 => OK)
23  INT32: 1047536/   0xffbf0 (0 => OK)
23  INT32: 16760576/  0xffbf00 (0 => OK)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
23  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32: 130944/   0x1ff80 (0 => OK)
24  INT32: 261888/   0x3ff00 (0 => OK)
24  INT32: 1047552/   0xffc00 (0 => OK)
24  INT32: 16760832/  0xffc000 (0 => OK)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
24  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32: 130946/   0x1ff82 (0 => OK)
25  INT32: 261892/   0x3ff04 (0 => OK)
25  INT32: 1047568/   0xffc10 (0 => OK)
25  INT32: 16761088/  0xffc100 (0 => OK)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
25  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32: 131070/   0x1fffe (0 => OK)
26  INT32: 262140/   0x3fffc (0 => OK)
26  INT32: 1048560/   0xffff0 (0 => OK)
26  INT32: 16776960/  0xffff00 (0 => OK)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
26  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32: 131070/   0x1fffe (0 => OK)
27  INT32: 262140/   0x3fffc (0 => OK)
27  INT32: 1048560/   0xffff0 (0 => OK)
27  INT32: 16776960/  0xffff00 (0 => OK)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32: 131070/   0x1fffe (0 => OK)
28  INT32: 262140/   0x3fffc (0 => OK)
28  INT32: 1048560/   0xffff0 (0 => OK)
28  INT32: 16776960/  0xffff00 (0 => OK)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting single-precision to fixed point 64 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
02  INT64:                    0/00000000000000000000 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
03  INT64:                    0/00000000000000000000 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
04  INT64:                    0/00000000000000000000 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
05  INT64:                    0/00000000000000000000 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
06  INT64:                    0/00000000000000000000 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
07  INT64:                    0/00000000000000000000 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
08  INT64:                    0/00000000000000000000 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT64:                    2/0x000000000000000002 (0 => OK)
15  INT64:                    4/0x000000000000000004 (0 => OK)
15  INT64:                   16/0x000000000000000010 (0 => OK)
15  INT64:                  256/0x000000000000000100 (0 => OK)
15  INT64:                65536/0x000000000000010000 (0 => OK)
15  INT64:           4294967296/0x000000000100000000 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT64:                    2/0x000000000000000002 (0 => OK)
16  INT64:                    4/0x000000000000000004 (0 => OK)
16  INT64:                   16/0x000000000000000010 (0 => OK)
16  INT64:                  256/0x000000000000000100 (0 => OK)
16  INT64:                65536/0x000000000000010000 (0 => OK)
16  INT64:           4294967296/0x000000000100000000 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT64:                    4/0x000000000000000004 (0 => OK)
17  INT64:                    8/0x000000000000000008 (0 => OK)
17  INT64:                   32/0x000000000000000020 (0 => OK)
17  INT64:                  512/0x000000000000000200 (0 => OK)
17  INT64:               131072/0x000000000000020000 (0 => OK)
17  INT64:           8589934592/0x000000000200000000 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT64:                    4/0x000000000000000004 (0 => OK)
18  INT64:                    8/0x000000000000000008 (0 => OK)
18  INT64:                   32/0x000000000000000020 (0 => OK)
18  INT64:                  512/0x000000000000000200 (0 => OK)
18  INT64:               131072/0x000000000000020000 (0 => OK)
18  INT64:           8589934592/0x000000000200000000 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT64:                    6/0x000000000000000006 (0 => OK)
19  INT64:                   12/0x00000000000000000c (0 => OK)
19  INT64:                   48/0x000000000000000030 (0 => OK)
19  INT64:                  768/0x000000000000000300 (0 => OK)
19  INT64:               196608/0x000000000000030000 (0 => OK)
19  INT64:          12884901888/0x000000000300000000 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT64:               131006/0x00000000000001ffbe (0 => OK)
20  INT64:               262012/0x00000000000003ff7c (0 => OK)
20  INT64:              1048048/0x0000000000000ffdf0 (0 => OK)
20  INT64:             16768768/0x000000000000ffdf00 (0 => OK)
20  INT64:           4292804608/0x0000000000ffdf0000 (0 => OK)
20  INT64:      281333242789888/0x000000ffdf00000000 (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT64:               131008/0x00000000000001ffc0 (0 => OK)
21  INT64:               262016/0x00000000000003ff80 (0 => OK)
21  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
21  INT64:             16769024/0x000000000000ffe000 (0 => OK)
21  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
21  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT64:               131010/0x00000000000001ffc2 (0 => OK)
22  INT64:               262020/0x00000000000003ff84 (0 => OK)
22  INT64:              1048080/0x0000000000000ffe10 (0 => OK)
22  INT64:             16769280/0x000000000000ffe100 (0 => OK)
22  INT64:           4292935680/0x0000000000ffe10000 (0 => OK)
22  INT64:      281341832724480/0x000000ffe100000000 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT64:               130942/0x00000000000001ff7e (0 => OK)
23  INT64:               261884/0x00000000000003fefc (0 => OK)
23  INT64:              1047536/0x0000000000000ffbf0 (0 => OK)
23  INT64:             16760576/0x000000000000ffbf00 (0 => OK)
23  INT64:           4290707456/0x0000000000ffbf0000 (0 => OK)
23  INT64:      281195803836416/0x000000ffbf00000000 (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT64:               130944/0x00000000000001ff80 (0 => OK)
24  INT64:               261888/0x00000000000003ff00 (0 => OK)
24  INT64:              1047552/0x0000000000000ffc00 (0 => OK)
24  INT64:             16760832/0x000000000000ffc000 (0 => OK)
24  INT64:           4290772992/0x0000000000ffc00000 (0 => OK)
24  INT64:      281200098803712/0x000000ffc000000000 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT64:               130946/0x00000000000001ff82 (0 => OK)
25  INT64:               261892/0x00000000000003ff04 (0 => OK)
25  INT64:              1047568/0x0000000000000ffc10 (0 => OK)
25  INT64:             16761088/0x000000000000ffc100 (0 => OK)
25  INT64:           4290838528/0x0000000000ffc10000 (0 => OK)
25  INT64:      281204393771008/0x000000ffc100000000 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT64:               131070/0x00000000000001fffe (0 => OK)
26  INT64:               262140/0x00000000000003fffc (0 => OK)
26  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
26  INT64:             16776960/0x000000000000ffff00 (0 => OK)
26  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
26  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT64:               131070/0x00000000000001fffe (0 => OK)
27  INT64:               262140/0x00000000000003fffc (0 => OK)
27  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
27  INT64:             16776960/0x000000000000ffff00 (0 => OK)
27  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
27  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT64:               131070/0x00000000000001fffe (0 => OK)
28  INT64:               262140/0x00000000000003fffc (0 => OK)
28  INT64:              1048560/0x0000000000000ffff0 (0 => OK)
28  INT64:             16776960/0x000000000000ffff00 (0 => OK)
28  INT64:           4294901760/0x0000000000ffff0000 (0 => OK)
28  INT64:      281470681743360/0x000000ffff00000000 (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
29  INT64:                    0/00000000000000000000 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
30  INT64:                    0/00000000000000000000 (0 => OK)
Converting single-precision to 32 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      1/       0x1 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      1/       0x1 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      2/       0x2 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      2/       0x2 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      3/       0x3 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32:  65503/    0xffdf (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32:  65504/    0xffe0 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32:  65505/    0xffe1 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32:  65471/    0xffbf (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32:  65472/    0xffc0 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32:  65473/    0xffc1 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32:  65535/    0xffff (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32:  65535/    0xffff (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32:  65535/    0xffff (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting single-precision to 64 bit int
00 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
00  INT32:      0/         0 (0 => OK)
01 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
03  INT32:      0/         0 (0 => OK)
04 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
04  INT32:      0/         0 (0 => OK)
05 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
05  INT32:      0/         0 (0 => OK)
06 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
06  INT32:      0/         0 (0 => OK)
07 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
07  INT32:      0/         0 (0 => OK)
08 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
08  INT32:      0/         0 (0 => OK)
09 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
15  INT32:      1/       0x1 (0 => OK)
16 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
16  INT32:      1/       0x1 (0 => OK)
17 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
17  INT32:      2/       0x2 (0 => OK)
18 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
18  INT32:      2/       0x2 (0 => OK)
19 SINGLE: 3.00000000000000000000e+00 / 0x40400000  (0 => OK)
19  INT32:      3/       0x3 (0 => OK)
20 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
20  INT32:  65503/    0xffdf (0 => OK)
21 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
21  INT32:  65504/    0xffe0 (0 => OK)
22 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
22  INT32:  65505/    0xffe1 (0 => OK)
23 SINGLE: 6.54710000000000000000e+04 / 0x477fbf00  (0 => OK)
23  INT32:  65471/    0xffbf (0 => OK)
24 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
24  INT32:  65472/    0xffc0 (0 => OK)
25 SINGLE: 6.54730000000000000000e+04 / 0x477fc100  (0 => OK)
25  INT32:  65473/    0xffc1 (0 => OK)
26 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
26  INT32:  65535/    0xffff (0 => OK)
27 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
27  INT32:  65535/    0xffff (0 => OK)
28 SINGLE: 6.55350000000000000000e+04 / 0x477fff00  (0 => OK)
28  INT32:  65535/    0xffff (0 => OK)
29 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
30  INT32:      0/         0 (0 => OK)
Converting double-precision to half-precision
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00   HALF: 0000  (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01   HALF: 0x8000  (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02   HALF: 0xffff  (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03   HALF: 0xffff  (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04   HALF: 0xffff  (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05   HALF: 0xffff  (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06   HALF: 0xffff  (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07   HALF: 0xffff  (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08   HALF: 0xffff  (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09   HALF: 0xc000  (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10   HALF: 0xbc00  (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13   HALF: 0000  (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17   HALF: 0x3ff  (0x18 =>  UNDERFLOW  INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18   HALF: 0x400  (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19   HALF: 0x3c00  (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20   HALF: 0x3c01  (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24   HALF: 0x3c00  (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25   HALF: 0x4000  (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26   HALF: 0x416f  (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27   HALF: 0x4248  (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28   HALF: 0x7bfe  (0x10 =>    INEXACT )
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29   HALF: 0x7bff  (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30   HALF: 0x7bff  (0x10 =>    INEXACT )
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31   HALF: 0x7ffe  (0x10 =>    INEXACT )
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32   HALF: 0x7fff  (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33   HALF: 0x7fff  (0x10 =>    INEXACT )
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34   HALF: 0x7fff  (0x1 =>     INVALID)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35   HALF: 0x7fff  (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36   HALF: 0x7fff  (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38   HALF: 0x7fff  (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39   HALF: 0x7fff  (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40   HALF: 0000  (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41   HALF: 0000  (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42   HALF: 0000  (0x1 =>     INVALID)
Converting double-precision to single-precision
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00 SINGLE: nan / 0x7fe00000  (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01 SINGLE: -nan / 0xffc00000  (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02 SINGLE: -inf / 0xff800000  (0 => OK)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03 SINGLE: -3.40282346638528859811e+38 / 0xff7fffff  (0x14 => OVERFLOW   INEXACT )
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04 SINGLE: -3.40282346638528859811e+38 / 0xff7fffff  (0x14 => OVERFLOW   INEXACT )
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05 SINGLE: -3.40282346638528859811e+38 / 0xff7fffff  (0 => OK)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06 SINGLE: -3.40282346638528859811e+38 / 0xff7fffff  (0 => OK)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07 SINGLE: -1.11099992680387713644e+31 / 0xf30c3a58  (0x10 =>    INEXACT )
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08 SINGLE: -1.11099995702702262681e+30 / 0xf1605d5a  (0x10 =>    INEXACT )
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09 SINGLE: -2.00000000000000000000e+00 / 0xc0000000  (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10 SINGLE: -1.00000000000000000000e+00 / 0xbf800000  (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11 SINGLE: -0.00000000000000000000e+00 / 0x80000000  (0x18 =>  UNDERFLOW  INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12 SINGLE: -1.17549435082228750796e-38 / 0x80800000  (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14 SINGLE: 1.17549435082228750796e-38 / 0x00800000  (0 => OK)
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15 SINGLE: 2.98023223876953125000e-08 / 0x33000000  (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16 SINGLE: 5.96045985901128005934e-08 / 0x337ffff3  (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17 SINGLE: 6.09755988989491015672e-05 / 0x387fc00d  (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18 SINGLE: 6.10351999057456851005e-05 / 0x38800006  (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20 SINGLE: 1.00097656250000000000e+00 / 0x3f802000  (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25 SINGLE: 2.00000000000000000000e+00 / 0x40000000  (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26 SINGLE: 2.71828174591064453125e+00 / 0x402df854  (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27 SINGLE: 3.14159250259399414062e+00 / 0x40490fda  (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28 SINGLE: 6.55030000000000000000e+04 / 0x477fdf00  (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30 SINGLE: 6.55050000000000000000e+04 / 0x477fe100  (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31 SINGLE: 1.31007000000000000000e+05 / 0x47ffdf80  (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32 SINGLE: 1.31008000000000000000e+05 / 0x47ffe000  (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33 SINGLE: 1.31009000000000000000e+05 / 0x47ffe080  (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34 SINGLE: 2.14748352000000000000e+09 / 0x4effffff  (0x10 =>    INEXACT )
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35 SINGLE: 3.40282346638528859811e+38 / 0x7f7fffff  (0 => OK)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36 SINGLE: 3.40282346638528859811e+38 / 0x7f7fffff  (0 => OK)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0x18 =>  UNDERFLOW  INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38 SINGLE: 3.40282346638528859811e+38 / 0x7f7fffff  (0x14 => OVERFLOW   INEXACT )
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39 SINGLE: inf / 0x7f800000  (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40 SINGLE: nan / 0x7fc00000  (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41 SINGLE: nan / 0x7fc00000  (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42 SINGLE: nan / 0x7fe00000  (0x1 =>     INVALID)
Converting double-precision to fixed point 32 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
01  INT32:      0/         0 (0 => OK)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
02  INT32:      0/         0 (0 => OK)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
03  INT32:      0/         0 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
04  INT32:      0/         0 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
08  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
09  INT32:      0/         0 (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
11  INT32:      0/         0 (0 => OK)
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
12  INT32:      0/         0 (0 => OK)
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
14  INT32:      0/         0 (0 => OK)
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
15  INT32:      0/         0 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
17  INT32:      0/         0 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT32:     -7/0xfffffff9 (0x10 =>    INEXACT )
18  INT32:    -14/0xfffffff2 (0x10 =>    INEXACT )
18  INT32:    -58/0xffffffc6 (0x10 =>    INEXACT )
18  INT32:   -936/0xfffffc58 (0x10 =>    INEXACT )
18  INT32: -239739/0xfffc5785 (0x10 =>    INEXACT )
18  INT32: -239739/0xfffc5785 (0x10 =>    INEXACT )
18  INT32: -2147483648/0x80000000 (0x11 =>    INEXACT INVALID)
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
19  INT32:      0/         0 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
20  INT32:      0/         0 (0 => OK)
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
21  INT32:      0/         0 (0 => OK)
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
22  INT32:      0/         0 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:      0/         0 (0x10 =>    INEXACT )
23  INT32:    -66/0xffffffbe (0x10 =>    INEXACT )
23  INT32:    -66/0xffffffbe (0x10 =>    INEXACT )
23  INT32: -4331784/0xffbde6f8 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
24  INT32:      0/         0 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
25  INT32:      0/         0 (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
26  INT32:      0/         0 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
27  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
28  INT32:      0/         0 (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
29  INT32:      0/         0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
30  INT32:      0/         0 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
31  INT32:      0/         0 (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
32  INT32:      0/         0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
33  INT32:      0/         0 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
34  INT32:      0/         0 (0x1 =>     INVALID)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
35  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
36  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
37  INT32:      0/         0 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
38  INT32:      0/         0 (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
39  INT32:      0/         0 (0 => OK)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
40  INT32:      0/         0 (0 => OK)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
41  INT32:      0/         0 (0x11 =>    INEXACT INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
42  INT32:      0/         0 (0x1 =>     INVALID)
Converting double-precision to fixed point 64 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
09  INT64:                   -8/0x00fffffffffffffff8 (0 => OK)
09  INT64:                  -32/0x00ffffffffffffffe0 (0 => OK)
09  INT64:                 -512/0x00fffffffffffffe00 (0 => OK)
09  INT64:              -131072/0x00fffffffffffe0000 (0 => OK)
09  INT64:          -8589934592/0x00fffffffe00000000 (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
10  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
10  INT64:                  -16/0x00fffffffffffffff0 (0 => OK)
10  INT64:                 -256/0x00ffffffffffffff00 (0 => OK)
10  INT64:               -65536/0x00ffffffffffff0000 (0 => OK)
10  INT64:          -4294967296/0x00ffffffff00000000 (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15  INT64:                  128/0x000000000000000080 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16  INT64:                  255/0x0000000000000000ff (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17  INT64:                    3/0x000000000000000003 (0x10 =>    INEXACT )
17  INT64:               261888/0x00000000000003ff00 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18  INT64:                    4/0x000000000000000004 (0x10 =>    INEXACT )
18  INT64:               262144/0x000000000000040000 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT64:                    2/0x000000000000000002 (0 => OK)
19  INT64:                    4/0x000000000000000004 (0 => OK)
19  INT64:                   16/0x000000000000000010 (0 => OK)
19  INT64:                  256/0x000000000000000100 (0 => OK)
19  INT64:                65536/0x000000000000010000 (0 => OK)
19  INT64:           4294967296/0x000000000100000000 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT64:                    2/0x000000000000000002 (0x10 =>    INEXACT )
20  INT64:                    4/0x000000000000000004 (0x10 =>    INEXACT )
20  INT64:                   16/0x000000000000000010 (0x10 =>    INEXACT )
20  INT64:                  256/0x000000000000000100 (0x10 =>    INEXACT )
20  INT64:                65600/0x000000000000010040 (0x10 =>    INEXACT )
20  INT64:           4299161600/0x000000000100400000 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT64:                    2/0x000000000000000002 (0 => OK)
24  INT64:                    4/0x000000000000000004 (0 => OK)
24  INT64:                   16/0x000000000000000010 (0 => OK)
24  INT64:                  256/0x000000000000000100 (0 => OK)
24  INT64:                65536/0x000000000000010000 (0 => OK)
24  INT64:           4294967296/0x000000000100000000 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT64:                    4/0x000000000000000004 (0 => OK)
25  INT64:                    8/0x000000000000000008 (0 => OK)
25  INT64:                   32/0x000000000000000020 (0 => OK)
25  INT64:                  512/0x000000000000000200 (0 => OK)
25  INT64:               131072/0x000000000000020000 (0 => OK)
25  INT64:           8589934592/0x000000000200000000 (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT64:                    5/0x000000000000000005 (0x10 =>    INEXACT )
26  INT64:                   10/0x00000000000000000a (0x10 =>    INEXACT )
26  INT64:                   43/0x00000000000000002b (0x10 =>    INEXACT )
26  INT64:                  695/0x0000000000000002b7 (0x10 =>    INEXACT )
26  INT64:               178145/0x00000000000002b7e1 (0x10 =>    INEXACT )
26  INT64:          11674931554/0x0000000002b7e15162 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT64:                    6/0x000000000000000006 (0x10 =>    INEXACT )
27  INT64:                   12/0x00000000000000000c (0x10 =>    INEXACT )
27  INT64:                   50/0x000000000000000032 (0x10 =>    INEXACT )
27  INT64:                  804/0x000000000000000324 (0x10 =>    INEXACT )
27  INT64:               205887/0x00000000000003243f (0x10 =>    INEXACT )
27  INT64:          13493037704/0x0000000003243f6a88 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT64:               131006/0x00000000000001ffbe (0 => OK)
28  INT64:               262012/0x00000000000003ff7c (0 => OK)
28  INT64:              1048048/0x0000000000000ffdf0 (0 => OK)
28  INT64:             16768768/0x000000000000ffdf00 (0 => OK)
28  INT64:           4292804608/0x0000000000ffdf0000 (0 => OK)
28  INT64:      281333242789888/0x000000ffdf00000000 (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT64:               131008/0x00000000000001ffc0 (0 => OK)
29  INT64:               262016/0x00000000000003ff80 (0 => OK)
29  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
29  INT64:             16769024/0x000000000000ffe000 (0 => OK)
29  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
29  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT64:               131010/0x00000000000001ffc2 (0 => OK)
30  INT64:               262020/0x00000000000003ff84 (0 => OK)
30  INT64:              1048080/0x0000000000000ffe10 (0 => OK)
30  INT64:             16769280/0x000000000000ffe100 (0 => OK)
30  INT64:           4292935680/0x0000000000ffe10000 (0 => OK)
30  INT64:      281341832724480/0x000000ffe100000000 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT64:               262014/0x00000000000003ff7e (0 => OK)
31  INT64:               524028/0x00000000000007fefc (0 => OK)
31  INT64:              2096112/0x0000000000001ffbf0 (0 => OK)
31  INT64:             33537792/0x000000000001ffbf00 (0 => OK)
31  INT64:           8585674752/0x0000000001ffbf0000 (0 => OK)
31  INT64:      562670780547072/0x000001ffbf00000000 (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT64:               262016/0x00000000000003ff80 (0 => OK)
32  INT64:               524032/0x00000000000007ff00 (0 => OK)
32  INT64:              2096128/0x0000000000001ffc00 (0 => OK)
32  INT64:             33538048/0x000000000001ffc000 (0 => OK)
32  INT64:           8585740288/0x0000000001ffc00000 (0 => OK)
32  INT64:      562675075514368/0x000001ffc000000000 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT64:               262018/0x00000000000003ff82 (0 => OK)
33  INT64:               524036/0x00000000000007ff04 (0 => OK)
33  INT64:              2096144/0x0000000000001ffc10 (0 => OK)
33  INT64:             33538304/0x000000000001ffc100 (0 => OK)
33  INT64:           8585805824/0x0000000001ffc10000 (0 => OK)
33  INT64:      562679370481664/0x000001ffc100000000 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT64:           4294967294/0x0000000000fffffffe (0 => OK)
34  INT64:           8589934588/0x0000000001fffffffc (0 => OK)
34  INT64:          34359738352/0x0000000007fffffff0 (0 => OK)
34  INT64:         549755813632/0x000000007fffffff00 (0 => OK)
34  INT64:      140737488289792/0x0000007fffffff0000 (0 => OK)
34  INT64:  9223372032559808512/0x007fffffff00000000 (0 => OK)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting double-precision to 32 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT32:     -2/0xfffffffe (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT32:     -1/0xffffffff (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12  INT32:      0/         0 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT32:      0/         0 (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14  INT32:      0/         0 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT32:      0/         0 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT32:      0/         0 (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT32:      0/         0 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT32:      0/         0 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT32:      1/       0x1 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT32:      1/       0x1 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT32:      0/         0 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT32:      0/         0 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT32:      0/         0 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT32:      1/       0x1 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT32:      2/       0x2 (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT32:      2/       0x2 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT32:      3/       0x3 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT32:  65503/    0xffdf (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT32:  65504/    0xffe0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT32:  65505/    0xffe1 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT32: 131007/   0x1ffbf (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT32: 131008/   0x1ffc0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT32: 131009/   0x1ffc1 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT32: 2147483647/0x7fffffff (0 => OK)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37  INT32:      0/         0 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT32:      0/         0 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT32:      0/         0 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT32:      0/         0 (0x1 =>     INVALID)
Converting double-precision to 64 bit int
00 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01 DOUBLE: -nan / 0x00fff8000000000000 (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02 DOUBLE: -inf / 0x00fff0000000000000 (0 => OK)
02  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03 DOUBLE: -1.79769313486231570814e+308 / 0x00ffefffffffffffff (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04 DOUBLE: -2.25369976746044681212e+307 / 0x00ffc00bffffffffff (0 => OK)
04  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
05 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
05  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
06 DOUBLE: -3.40282346638528859811e+38 / 0x00c7efffffe0000000 (0 => OK)
06  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
07 DOUBLE: -1.11100000000000007529e+31 / 0x00c661874b135ff654 (0 => OK)
07  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
08 DOUBLE: -1.11099999999999999084e+30 / 0x00c62c0bab523323b9 (0 => OK)
08  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
09 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
09  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
10 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
10  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
11 DOUBLE: -2.22507385850720138309e-308 / 0x008010000000000000 (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12 DOUBLE: -1.17549435082228750796e-38 / 0x00b810000000000000 (0 => OK)
12  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
13 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
13  INT64:                    0/00000000000000000000 (0 => OK)
14 DOUBLE: 1.17549435082228750796e-38 / 0x003810000000000000 (0 => OK)
14  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
15 DOUBLE: 2.98023224000000013060e-08 / 0x003e600000001c5f68 (0 => OK)
15  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
16 DOUBLE: 5.96046000000000015661e-08 / 0x003e6ffffe6cb2fa82 (0 => OK)
16  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
17 DOUBLE: 6.09755999999999994298e-05 / 0x003f0ff801a9af58a1 (0 => OK)
17  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
18 DOUBLE: 6.10352000000000013664e-05 / 0x003f100000c06a1ef5 (0 => OK)
18  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
19 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
19  INT64:                    1/0x000000000000000001 (0 => OK)
20 DOUBLE: 1.00097656250000000000e+00 / 0x003ff0040000000000 (0 => OK)
20  INT64:                    1/0x000000000000000001 (0x10 =>    INEXACT )
21 DOUBLE: 2.22507385850720138309e-308 / 0x000010000000000000 (0 => OK)
21  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
22 DOUBLE: 1.37899728486072282843e-308 / 0x000009ea82a2287680 (0 => OK)
22  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
23 DOUBLE: 1.49147387366816238763e-308 / 0x00000ab98fba843210 (0 => OK)
23  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
24 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
24  INT64:                    1/0x000000000000000001 (0 => OK)
25 DOUBLE: 2.00000000000000000000e+00 / 0x004000000000000000 (0 => OK)
25  INT64:                    2/0x000000000000000002 (0 => OK)
26 DOUBLE: 2.71828182845904509079e+00 / 0x004005bf0a8b145769 (0 => OK)
26  INT64:                    2/0x000000000000000002 (0x10 =>    INEXACT )
27 DOUBLE: 3.14159265358979311599e+00 / 0x00400921fb54442d18 (0 => OK)
27  INT64:                    3/0x000000000000000003 (0x10 =>    INEXACT )
28 DOUBLE: 6.55030000000000000000e+04 / 0x0040effbe000000000 (0 => OK)
28  INT64:                65503/0x00000000000000ffdf (0 => OK)
29 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
29  INT64:                65504/0x00000000000000ffe0 (0 => OK)
30 DOUBLE: 6.55050000000000000000e+04 / 0x0040effc2000000000 (0 => OK)
30  INT64:                65505/0x00000000000000ffe1 (0 => OK)
31 DOUBLE: 1.31007000000000000000e+05 / 0x0040fffbf000000000 (0 => OK)
31  INT64:               131007/0x00000000000001ffbf (0 => OK)
32 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
32  INT64:               131008/0x00000000000001ffc0 (0 => OK)
33 DOUBLE: 1.31009000000000000000e+05 / 0x0040fffc1000000000 (0 => OK)
33  INT64:               131009/0x00000000000001ffc1 (0 => OK)
34 DOUBLE: 2.14748364700000000000e+09 / 0x0041dfffffffc00000 (0 => OK)
34  INT64:           2147483647/0x00000000007fffffff (0 => OK)
35 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
35  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
36 DOUBLE: 3.40282346638528859811e+38 / 0x0047efffffe0000000 (0 => OK)
36  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
37 DOUBLE: 1.77745157837782317747e-307 / 0x00003ff40000000001 (0 => OK)
37  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
38 DOUBLE: 1.79769313486231570814e+308 / 0x007fefffffffffffff (0 => OK)
38  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
39 DOUBLE: inf / 0x007ff0000000000000 (0 => OK)
39  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
40 DOUBLE: nan / 0x007ff8000000000000 (0 => OK)
40  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
41 DOUBLE: nan / 0x007ff0000000000001 (0 => OK)
41  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
42 DOUBLE: nan / 0x007ff4000000000000 (0 => OK)
42  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to double-precision
00   HALF: 0xffff  (0 => OK)
00 DOUBLE: -1.31008000000000000000e+05 / 0x00c0fffc0000000000 (0 => OK)
01   HALF: 0xfcff  (0 => OK)
01 DOUBLE: -8.18560000000000000000e+04 / 0x00c0f3fc0000000000 (0 => OK)
02   HALF: 0xfc01  (0 => OK)
02 DOUBLE: -6.56000000000000000000e+04 / 0x00c0f0040000000000 (0 => OK)
03   HALF: 0xfc00  (0 => OK)
03 DOUBLE: -6.55360000000000000000e+04 / 0x00c0f0000000000000 (0 => OK)
04   HALF: 0xfbff  (0 => OK)
04 DOUBLE: -6.55040000000000000000e+04 / 0x00c0effc0000000000 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05 DOUBLE: -6.54720000000000000000e+04 / 0x00c0eff80000000000 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06 DOUBLE: -2.00000000000000000000e+00 / 0x00c000000000000000 (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07 DOUBLE: -1.00000000000000000000e+00 / 0x00bff0000000000000 (0 => OK)
08   HALF: 0x8001  (0 => OK)
08 DOUBLE: -5.96046447753906250000e-08 / 0x00be70000000000000 (0 => OK)
09   HALF: 0x8000  (0 => OK)
09 DOUBLE: -0.00000000000000000000e+00 / 0x008000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10 DOUBLE: 0.00000000000000000000e+00 / 00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11 DOUBLE: 5.96046447753906250000e-08 / 0x003e70000000000000 (0 => OK)
12   HALF: 0x3c00  (0 => OK)
12 DOUBLE: 1.00000000000000000000e+00 / 0x003ff0000000000000 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13 DOUBLE: 6.54720000000000000000e+04 / 0x0040eff80000000000 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14 DOUBLE: 6.55040000000000000000e+04 / 0x0040effc0000000000 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15 DOUBLE: 6.55360000000000000000e+04 / 0x0040f0000000000000 (0 => OK)
16   HALF: 0x7c01  (0 => OK)
16 DOUBLE: 6.56000000000000000000e+04 / 0x0040f0040000000000 (0 => OK)
17   HALF: 0x7cff  (0 => OK)
17 DOUBLE: 8.18560000000000000000e+04 / 0x0040f3fc0000000000 (0 => OK)
18   HALF: 0x7fff  (0 => OK)
18 DOUBLE: 1.31008000000000000000e+05 / 0x0040fffc0000000000 (0 => OK)
Converting half-precision to single-precision
00   HALF: 0xffff  (0 => OK)
00 SINGLE: -1.31008000000000000000e+05 / 0xc7ffe000  (0 => OK)
01   HALF: 0xfcff  (0 => OK)
01 SINGLE: -8.18560000000000000000e+04 / 0xc79fe000  (0 => OK)
02   HALF: 0xfc01  (0 => OK)
02 SINGLE: -6.56000000000000000000e+04 / 0xc7802000  (0 => OK)
03   HALF: 0xfc00  (0 => OK)
03 SINGLE: -6.55360000000000000000e+04 / 0xc7800000  (0 => OK)
04   HALF: 0xfbff  (0 => OK)
04 SINGLE: -6.55040000000000000000e+04 / 0xc77fe000  (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05 SINGLE: -6.54720000000000000000e+04 / 0xc77fc000  (0 => OK)
06   HALF: 0xc000  (0 => OK)
06 SINGLE: -2.00000000000000000000e+00 / 0xc0000000  (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07 SINGLE: -1.00000000000000000000e+00 / 0xbf800000  (0 => OK)
08   HALF: 0x8001  (0 => OK)
08 SINGLE: -5.96046447753906250000e-08 / 0xb3800000  (0 => OK)
09   HALF: 0x8000  (0 => OK)
09 SINGLE: -0.00000000000000000000e+00 / 0x80000000  (0 => OK)
10   HALF: 0000  (0 => OK)
10 SINGLE: 0.00000000000000000000e+00 / 0000000000  (0 => OK)
11   HALF: 0x01  (0 => OK)
11 SINGLE: 5.96046447753906250000e-08 / 0x33800000  (0 => OK)
12   HALF: 0x3c00  (0 => OK)
12 SINGLE: 1.00000000000000000000e+00 / 0x3f800000  (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13 SINGLE: 6.54720000000000000000e+04 / 0x477fc000  (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14 SINGLE: 6.55040000000000000000e+04 / 0x477fe000  (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15 SINGLE: 6.55360000000000000000e+04 / 0x47800000  (0 => OK)
16   HALF: 0x7c01  (0 => OK)
16 SINGLE: 6.56000000000000000000e+04 / 0x47802000  (0 => OK)
17   HALF: 0x7cff  (0 => OK)
17 SINGLE: 8.18560000000000000000e+04 / 0x479fe000  (0 => OK)
18   HALF: 0x7fff  (0 => OK)
18 SINGLE: 1.31008000000000000000e+05 / 0x47ffe000  (0 => OK)
Converting half-precision to fixed point 64 bit int
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:              -131008/0x00fffffffffffe0040 (0 => OK)
04  INT64:              -262016/0x00fffffffffffc0080 (0 => OK)
04  INT64:             -1048064/0x00fffffffffff00200 (0 => OK)
04  INT64:            -16769024/0x00ffffffffff002000 (0 => OK)
04  INT64:          -4292870144/0x00ffffffff00200000 (0 => OK)
04  INT64:     -281337537757184/0x00ffff002000000000 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:              -130944/0x00fffffffffffe0080 (0 => OK)
05  INT64:              -261888/0x00fffffffffffc0100 (0 => OK)
05  INT64:             -1047552/0x00fffffffffff00400 (0 => OK)
05  INT64:            -16760832/0x00ffffffffff004000 (0 => OK)
05  INT64:          -4290772992/0x00ffffffff00400000 (0 => OK)
05  INT64:     -281200098803712/0x00ffff004000000000 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
06  INT64:                   -8/0x00fffffffffffffff8 (0 => OK)
06  INT64:                  -32/0x00ffffffffffffffe0 (0 => OK)
06  INT64:                 -512/0x00fffffffffffffe00 (0 => OK)
06  INT64:              -131072/0x00fffffffffffe0000 (0 => OK)
06  INT64:          -8589934592/0x00fffffffe00000000 (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
07  INT64:                   -4/0x00fffffffffffffffc (0 => OK)
07  INT64:                  -16/0x00fffffffffffffff0 (0 => OK)
07  INT64:                 -256/0x00ffffffffffffff00 (0 => OK)
07  INT64:               -65536/0x00ffffffffffff0000 (0 => OK)
07  INT64:          -4294967296/0x00ffffffff00000000 (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
08  INT64:                 -256/0x00ffffffffffffff00 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
11  INT64:                  256/0x000000000000000100 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    2/0x000000000000000002 (0 => OK)
12  INT64:                    4/0x000000000000000004 (0 => OK)
12  INT64:                   16/0x000000000000000010 (0 => OK)
12  INT64:                  256/0x000000000000000100 (0 => OK)
12  INT64:                65536/0x000000000000010000 (0 => OK)
12  INT64:           4294967296/0x000000000100000000 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:               130944/0x00000000000001ff80 (0 => OK)
13  INT64:               261888/0x00000000000003ff00 (0 => OK)
13  INT64:              1047552/0x0000000000000ffc00 (0 => OK)
13  INT64:             16760832/0x000000000000ffc000 (0 => OK)
13  INT64:           4290772992/0x0000000000ffc00000 (0 => OK)
13  INT64:      281200098803712/0x000000ffc000000000 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:               131008/0x00000000000001ffc0 (0 => OK)
14  INT64:               262016/0x00000000000003ff80 (0 => OK)
14  INT64:              1048064/0x0000000000000ffe00 (0 => OK)
14  INT64:             16769024/0x000000000000ffe000 (0 => OK)
14  INT64:           4292870144/0x0000000000ffe00000 (0 => OK)
14  INT64:      281337537757184/0x000000ffe000000000 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to fixed point 32 bit int
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
01  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
02  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
05  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT32:     -4/0xfffffffc (0x10 =>    INEXACT )
06  INT32:     -8/0xfffffff8 (0x10 =>    INEXACT )
06  INT32:    -32/0xffffffe0 (0x10 =>    INEXACT )
06  INT32:   -515/0xfffffdfd (0x10 =>    INEXACT )
06  INT32: -131840/0xfffdfd00 (0x10 =>    INEXACT )
06  INT32: -131840/0xfffdfd00 (0x10 =>    INEXACT )
06  INT32: -2147483648/0x80000000 (0x11 =>    INEXACT INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:      0/         0 (0x10 =>    INEXACT )
07  INT32:     -2/0xfffffffe (0x10 =>    INEXACT )
07  INT32:   -514/0xfffffdfe (0x10 =>    INEXACT )
07  INT32:   -514/0xfffffdfe (0x10 =>    INEXACT )
07  INT32: -33746944/0xfdfd1000 (0x10 =>    INEXACT )
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
09  INT32:      0/         0 (0x10 =>    INEXACT )
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      0/         0 (0x10 =>    INEXACT )
12  INT32:      2/       0x2 (0x10 =>    INEXACT )
12  INT32:    512/     0x200 (0x10 =>    INEXACT )
12  INT32:    512/     0x200 (0x10 =>    INEXACT )
12  INT32: 33615872/ 0x200f000 (0x10 =>    INEXACT )
13   HALF: 0x7bfe  (0 => OK)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
13  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14   HALF: 0x7bff  (0 => OK)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
14  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15   HALF: 0x7c00  (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
17  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 64 bit int
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64: -9223372036854775808/0x008000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:               -65504/0x00ffffffffffff0020 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:               -65472/0x00ffffffffffff0040 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT64:                   -2/0x00fffffffffffffffe (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    1/0x000000000000000001 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:                65472/0x00000000000000ffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:                65504/0x00000000000000ffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:  9223372036854775807/0x007fffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to 32 bit int
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32:      0/         0 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32: -2147483648/0x80000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32: -65504/0xffff0020 (0 => OK)
05   HALF: 0xfbfe  (0 => OK)
05  INT32: -65472/0xffff0040 (0 => OK)
06   HALF: 0xc000  (0 => OK)
06  INT32:     -2/0xfffffffe (0 => OK)
07   HALF: 0xbc00  (0 => OK)
07  INT32:     -1/0xffffffff (0 => OK)
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      1/       0x1 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT32:  65472/    0xffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT32:  65504/    0xffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT32: 2147483647/0x7fffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32:      0/         0 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32:      0/         0 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 64 bit uint
00   HALF: 0xffff  (0 => OK)
00  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT64:                    0/00000000000000000000 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT64:                    0/00000000000000000000 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT64:                    0/00000000000000000000 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT64:                    1/0x000000000000000001 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT64:                65472/0x00000000000000ffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT64:                65504/0x00000000000000ffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT64:                   -1/0x00ffffffffffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT64:                    0/00000000000000000000 (0x1 =>     INVALID)
Converting half-precision to 32 bit uint
00   HALF: 0xffff  (0 => OK)
00  INT32:      0/         0 (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01  INT32:      0/         0 (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02  INT32:      0/         0 (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03  INT32:      0/         0 (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04  INT32:      0/         0 (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05  INT32:      0/         0 (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06  INT32:      0/         0 (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07  INT32:      0/         0 (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08  INT32:      0/         0 (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09  INT32:      0/         0 (0 => OK)
10   HALF: 0000  (0 => OK)
10  INT32:      0/         0 (0 => OK)
11   HALF: 0x01  (0 => OK)
11  INT32:      0/         0 (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12  INT32:      1/       0x1 (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13  INT32:  65472/    0xffc0 (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14  INT32:  65504/    0xffe0 (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15  INT32:     -1/0xffffffff (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16  INT32:      0/         0 (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17  INT32:      0/         0 (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18  INT32:      0/         0 (0x1 =>     INVALID)
Converting half-precision to 16 bit uint
00   HALF: 0xffff  (0 => OK)
00   HALF: 0000  (0x1 =>     INVALID)
01   HALF: 0xfcff  (0 => OK)
01   HALF: 0000  (0x1 =>     INVALID)
02   HALF: 0xfc01  (0 => OK)
02   HALF: 0000  (0x1 =>     INVALID)
03   HALF: 0xfc00  (0 => OK)
03   HALF: 0000  (0x1 =>     INVALID)
04   HALF: 0xfbff  (0 => OK)
04   HALF: 0000  (0x1 =>     INVALID)
05   HALF: 0xfbfe  (0 => OK)
05   HALF: 0000  (0x1 =>     INVALID)
06   HALF: 0xc000  (0 => OK)
06   HALF: 0000  (0x1 =>     INVALID)
07   HALF: 0xbc00  (0 => OK)
07   HALF: 0000  (0x1 =>     INVALID)
08   HALF: 0x8001  (0 => OK)
08   HALF: 0000  (0x10 =>    INEXACT )
09   HALF: 0x8000  (0 => OK)
09   HALF: 0000  (0 => OK)
10   HALF: 0000  (0 => OK)
10   HALF: 0000  (0 => OK)
11   HALF: 0x01  (0 => OK)
11   HALF: 0000  (0x10 =>    INEXACT )
12   HALF: 0x3c00  (0 => OK)
12   HALF: 0x01  (0 => OK)
13   HALF: 0x7bfe  (0 => OK)
13   HALF: 0xffc0  (0 => OK)
14   HALF: 0x7bff  (0 => OK)
14   HALF: 0xffe0  (0 => OK)
15   HALF: 0x7c00  (0 => OK)
15   HALF: 0xffff  (0x1 =>     INVALID)
16   HALF: 0x7c01  (0 => OK)
16   HALF: 0000  (0x1 =>     INVALID)
17   HALF: 0x7cff  (0 => OK)
17   HALF: 0000  (0x1 =>     INVALID)
18   HALF: 0x7fff  (0 => OK)
18   HALF: 0000  (0x1 =>     INVALID)
Converting signed int32 to half-precision
00  INT32:      0/         0 (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT32:      1/       0x1 (0 => OK)
01   HALF: 0x3c00  (0 => OK)
02  INT32:     16/      0x10 (0 => OK)
02   HALF: 0x4c00  (0 => OK)
03  INT32:    256/     0x100 (0 => OK)
03   HALF: 0x5c00  (0 => OK)
04  INT32:   4096/    0x1000 (0 => OK)
04   HALF: 0x6c00  (0 => OK)
05  INT32:  65503/    0xffdf (0 => OK)
05   HALF: 0x7bfe  (0x10 =>    INEXACT )
06  INT32:  65504/    0xffe0 (0 => OK)
06   HALF: 0x7bff  (0 => OK)
07  INT32:  65505/    0xffe1 (0 => OK)
07   HALF: 0x7bff  (0x10 =>    INEXACT )
08  INT32:  65535/    0xffff (0 => OK)
08   HALF: 0x7bff  (0x10 =>    INEXACT )
09  INT32:  65536/   0x10000 (0 => OK)
09   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10  INT32: 1048576/  0x100000 (0 => OK)
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11  INT32: 16777215/  0xffffff (0 => OK)
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12  INT32: 16777216/ 0x1000000 (0 => OK)
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13  INT32: 16777217/ 0x1000001 (0 => OK)
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14  INT32: 268435456/0x10000000 (0 => OK)
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15  INT32: 536870912/0x20000000 (0 => OK)
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16  INT32: 1073741824/0x40000000 (0 => OK)
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
17  INT32: -2147483648/0x80000000 (0 => OK)
17   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
18  INT32: -2147483647/0x80000001 (0 => OK)
18   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
19  INT32: -2147483617/0x8000001f (0 => OK)
19   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
20  INT32: -2147483585/0x8000003f (0 => OK)
20   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
21  INT32: -2147483521/0x8000007f (0 => OK)
21   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
22  INT32: -2147483393/0x800000ff (0 => OK)
22   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
23  INT32: -2147483137/0x800001ff (0 => OK)
23   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
24  INT32: -2147482849/0x8000031f (0 => OK)
24   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25  INT32: -2147481601/0x800007ff (0 => OK)
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26  INT32: -2147479553/0x80000fff (0 => OK)
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27  INT32: -2147418113/0x8000ffff (0 => OK)
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28  INT32: -2146435073/0x800fffff (0 => OK)
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29  INT32: -2130706433/0x80ffffff (0 => OK)
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30  INT32: -1879048193/0x8fffffff (0 => OK)
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31  INT32: -1610612737/0x9fffffff (0 => OK)
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32  INT32: -1342177281/0xafffffff (0 => OK)
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33  INT32: -1073741825/0xbfffffff (0 => OK)
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34  INT32: -805306369/0xcfffffff (0 => OK)
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35  INT32: -536870913/0xdfffffff (0 => OK)
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36  INT32: -268435457/0xefffffff (0 => OK)
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37  INT32:     -1/0xffffffff (0 => OK)
37   HALF: 0xbc00  (0 => OK)
38  INT32:     -2/0xfffffffe (0 => OK)
38   HALF: 0xc000  (0 => OK)
39  INT32:     -3/0xfffffffd (0 => OK)
39   HALF: 0xc200  (0 => OK)
40  INT32:     -4/0xfffffffc (0 => OK)
40   HALF: 0xc400  (0 => OK)
41  INT32:     -8/0xfffffff8 (0 => OK)
41   HALF: 0xc800  (0 => OK)
42  INT32:    -16/0xfffffff0 (0 => OK)
42   HALF: 0xcc00  (0 => OK)
43  INT32:    -32/0xffffffe0 (0 => OK)
43   HALF: 0xd000  (0 => OK)
44  INT32:    -48/0xffffffd0 (0 => OK)
44   HALF: 0xd200  (0 => OK)
45  INT32:    -64/0xffffffc0 (0 => OK)
45   HALF: 0xd400  (0 => OK)
46  INT32:   -128/0xffffff80 (0 => OK)
46   HALF: 0xd800  (0 => OK)
47  INT32:   -512/0xfffffe00 (0 => OK)
47   HALF: 0xe000  (0 => OK)
48  INT32:   -768/0xfffffd00 (0 => OK)
48   HALF: 0xe200  (0 => OK)
49  INT32:  -1024/0xfffffc00 (0 => OK)
49   HALF: 0xe400  (0 => OK)
50  INT32:  -2048/0xfffff800 (0 => OK)
50   HALF: 0xe800  (0 => OK)
51  INT32:  -4096/0xfffff000 (0 => OK)
51   HALF: 0xec00  (0 => OK)
52  INT32:  -8192/0xffffe000 (0 => OK)
52   HALF: 0xf000  (0 => OK)
53  INT32: -12288/0xffffd000 (0 => OK)
53   HALF: 0xf200  (0 => OK)
54  INT32: -16384/0xffffc000 (0 => OK)
54   HALF: 0xf400  (0 => OK)
55  INT32: -32768/0xffff8000 (0 => OK)
55   HALF: 0xf800  (0 => OK)
56  INT32: -524288/0xfff80000 (0 => OK)
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57  INT32: -8388608/0xff800000 (0 => OK)
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58  INT32: -16777216/0xff000000 (0 => OK)
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
59  INT32: -33554432/0xfe000000 (0 => OK)
59   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
60  INT32: -50331648/0xfd000000 (0 => OK)
60   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
61  INT32: -67108864/0xfc000000 (0 => OK)
61   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
62  INT32: -134217728/0xf8000000 (0 => OK)
62   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
63  INT32: -268435456/0xf0000000 (0 => OK)
63   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
64  INT32: -536870912/0xe0000000 (0 => OK)
64   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
65  INT32: -805306368/0xd0000000 (0 => OK)
65   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
66  INT32: -1073741824/0xc0000000 (0 => OK)
66   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
67  INT32: -2147483648/0x80000000 (0 => OK)
67   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
Converting fixed point int32 to half-precision
00  INT32:      0/         0 (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT32:      1/       0x1 (0 => OK)
01   HALF: 0x3800  (0 => OK)
01   HALF: 0x3400  (0 => OK)
01   HALF: 0x2c00  (0 => OK)
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02  INT32:     16/      0x10 (0 => OK)
02   HALF: 0x4800  (0 => OK)
02   HALF: 0x4400  (0 => OK)
02   HALF: 0x3c00  (0 => OK)
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03  INT32:    256/     0x100 (0 => OK)
03   HALF: 0x5800  (0 => OK)
03   HALF: 0x5400  (0 => OK)
03   HALF: 0x4c00  (0 => OK)
03   HALF: 0x01  (0 => OK)
04  INT32:   4096/    0x1000 (0 => OK)
04   HALF: 0x6800  (0 => OK)
04   HALF: 0x6400  (0 => OK)
04   HALF: 0x5c00  (0 => OK)
04   HALF: 0x10  (0 => OK)
05  INT32:  65503/    0xffdf (0 => OK)
05   HALF: 0x77fe  (0x10 =>    INEXACT )
05   HALF: 0x73fe  (0x10 =>    INEXACT )
05   HALF: 0x6bfe  (0x10 =>    INEXACT )
05   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
06  INT32:  65504/    0xffe0 (0 => OK)
06   HALF: 0x77ff  (0 => OK)
06   HALF: 0x73ff  (0 => OK)
06   HALF: 0x6bff  (0 => OK)
06   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
07  INT32:  65505/    0xffe1 (0 => OK)
07   HALF: 0x77ff  (0x10 =>    INEXACT )
07   HALF: 0x73ff  (0x10 =>    INEXACT )
07   HALF: 0x6bff  (0x10 =>    INEXACT )
07   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
08  INT32:  65535/    0xffff (0 => OK)
08   HALF: 0x77ff  (0x10 =>    INEXACT )
08   HALF: 0x73ff  (0x10 =>    INEXACT )
08   HALF: 0x6bff  (0x10 =>    INEXACT )
08   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
09  INT32:  65536/   0x10000 (0 => OK)
09   HALF: 0x7800  (0 => OK)
09   HALF: 0x7400  (0 => OK)
09   HALF: 0x6c00  (0 => OK)
09   HALF: 0x100  (0 => OK)
10  INT32: 1048576/  0x100000 (0 => OK)
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0xc00  (0x14 => OVERFLOW   INEXACT )
11  INT32: 16777215/  0xffffff (0 => OK)
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x1bff  (0x14 => OVERFLOW   INEXACT )
12  INT32: 16777216/ 0x1000000 (0 => OK)
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
13  INT32: 16777217/ 0x1000001 (0 => OK)
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
14  INT32: 268435456/0x10000000 (0 => OK)
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
15  INT32: 536870912/0x20000000 (0 => OK)
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
16  INT32: 1073741824/0x40000000 (0 => OK)
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
17  INT32: -2147483648/0x80000000 (0 => OK)
17   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
18  INT32: -2147483647/0x80000001 (0 => OK)
18   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
19  INT32: -2147483617/0x8000001f (0 => OK)
19   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
20  INT32: -2147483585/0x8000003f (0 => OK)
20   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
21  INT32: -2147483521/0x8000007f (0 => OK)
21   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
22  INT32: -2147483393/0x800000ff (0 => OK)
22   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
23  INT32: -2147483137/0x800001ff (0 => OK)
23   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
24  INT32: -2147482849/0x8000031f (0 => OK)
24   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
25  INT32: -2147481601/0x800007ff (0 => OK)
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
26  INT32: -2147479553/0x80000fff (0 => OK)
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
27  INT32: -2147418113/0x8000ffff (0 => OK)
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
28  INT32: -2146435073/0x800fffff (0 => OK)
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xb7ff  (0x14 => OVERFLOW   INEXACT )
29  INT32: -2130706433/0x80ffffff (0 => OK)
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xb7f0  (0x14 => OVERFLOW   INEXACT )
30  INT32: -1879048193/0x8fffffff (0 => OK)
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xb700  (0x14 => OVERFLOW   INEXACT )
31  INT32: -1610612737/0x9fffffff (0 => OK)
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xb600  (0x14 => OVERFLOW   INEXACT )
32  INT32: -1342177281/0xafffffff (0 => OK)
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xb500  (0x14 => OVERFLOW   INEXACT )
33  INT32: -1073741825/0xbfffffff (0 => OK)
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xb400  (0x14 => OVERFLOW   INEXACT )
34  INT32: -805306369/0xcfffffff (0 => OK)
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xb200  (0x14 => OVERFLOW   INEXACT )
35  INT32: -536870913/0xdfffffff (0 => OK)
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xb000  (0x14 => OVERFLOW   INEXACT )
36  INT32: -268435457/0xefffffff (0 => OK)
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xac00  (0x14 => OVERFLOW   INEXACT )
37  INT32:     -1/0xffffffff (0 => OK)
37   HALF: 0xb800  (0 => OK)
37   HALF: 0xb400  (0 => OK)
37   HALF: 0xac00  (0 => OK)
37   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
38  INT32:     -2/0xfffffffe (0 => OK)
38   HALF: 0xbc00  (0 => OK)
38   HALF: 0xb800  (0 => OK)
38   HALF: 0xb000  (0 => OK)
38   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
39  INT32:     -3/0xfffffffd (0 => OK)
39   HALF: 0xbe00  (0 => OK)
39   HALF: 0xba00  (0 => OK)
39   HALF: 0xb200  (0 => OK)
39   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
40  INT32:     -4/0xfffffffc (0 => OK)
40   HALF: 0xc000  (0 => OK)
40   HALF: 0xbc00  (0 => OK)
40   HALF: 0xb400  (0 => OK)
40   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
41  INT32:     -8/0xfffffff8 (0 => OK)
41   HALF: 0xc400  (0 => OK)
41   HALF: 0xc000  (0 => OK)
41   HALF: 0xb800  (0 => OK)
41   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
42  INT32:    -16/0xfffffff0 (0 => OK)
42   HALF: 0xc800  (0 => OK)
42   HALF: 0xc400  (0 => OK)
42   HALF: 0xbc00  (0 => OK)
42   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
43  INT32:    -32/0xffffffe0 (0 => OK)
43   HALF: 0xcc00  (0 => OK)
43   HALF: 0xc800  (0 => OK)
43   HALF: 0xc000  (0 => OK)
43   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
44  INT32:    -48/0xffffffd0 (0 => OK)
44   HALF: 0xce00  (0 => OK)
44   HALF: 0xca00  (0 => OK)
44   HALF: 0xc200  (0 => OK)
44   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
45  INT32:    -64/0xffffffc0 (0 => OK)
45   HALF: 0xd000  (0 => OK)
45   HALF: 0xcc00  (0 => OK)
45   HALF: 0xc400  (0 => OK)
45   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
46  INT32:   -128/0xffffff80 (0 => OK)
46   HALF: 0xd400  (0 => OK)
46   HALF: 0xd000  (0 => OK)
46   HALF: 0xc800  (0 => OK)
46   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
47  INT32:   -512/0xfffffe00 (0 => OK)
47   HALF: 0xdc00  (0 => OK)
47   HALF: 0xd800  (0 => OK)
47   HALF: 0xd000  (0 => OK)
47   HALF: 0x8002  (0 => OK)
48  INT32:   -768/0xfffffd00 (0 => OK)
48   HALF: 0xde00  (0 => OK)
48   HALF: 0xda00  (0 => OK)
48   HALF: 0xd200  (0 => OK)
48   HALF: 0x8003  (0 => OK)
49  INT32:  -1024/0xfffffc00 (0 => OK)
49   HALF: 0xe000  (0 => OK)
49   HALF: 0xdc00  (0 => OK)
49   HALF: 0xd400  (0 => OK)
49   HALF: 0x8004  (0 => OK)
50  INT32:  -2048/0xfffff800 (0 => OK)
50   HALF: 0xe400  (0 => OK)
50   HALF: 0xe000  (0 => OK)
50   HALF: 0xd800  (0 => OK)
50   HALF: 0x8008  (0 => OK)
51  INT32:  -4096/0xfffff000 (0 => OK)
51   HALF: 0xe800  (0 => OK)
51   HALF: 0xe400  (0 => OK)
51   HALF: 0xdc00  (0 => OK)
51   HALF: 0x8010  (0 => OK)
52  INT32:  -8192/0xffffe000 (0 => OK)
52   HALF: 0xec00  (0 => OK)
52   HALF: 0xe800  (0 => OK)
52   HALF: 0xe000  (0 => OK)
52   HALF: 0x8020  (0 => OK)
53  INT32: -12288/0xffffd000 (0 => OK)
53   HALF: 0xee00  (0 => OK)
53   HALF: 0xea00  (0 => OK)
53   HALF: 0xe200  (0 => OK)
53   HALF: 0x8030  (0 => OK)
54  INT32: -16384/0xffffc000 (0 => OK)
54   HALF: 0xf000  (0 => OK)
54   HALF: 0xec00  (0 => OK)
54   HALF: 0xe400  (0 => OK)
54   HALF: 0x8040  (0 => OK)
55  INT32: -32768/0xffff8000 (0 => OK)
55   HALF: 0xf400  (0 => OK)
55   HALF: 0xf000  (0 => OK)
55   HALF: 0xe800  (0 => OK)
55   HALF: 0x8080  (0 => OK)
56  INT32: -524288/0xfff80000 (0 => OK)
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xf800  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0x8800  (0x14 => OVERFLOW   INEXACT )
57  INT32: -8388608/0xff800000 (0 => OK)
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0x9800  (0x14 => OVERFLOW   INEXACT )
58  INT32: -16777216/0xff000000 (0 => OK)
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0x9c00  (0x14 => OVERFLOW   INEXACT )
59  INT32: -33554432/0xfe000000 (0 => OK)
59   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
59   HALF: 0xa000  (0x14 => OVERFLOW   INEXACT )
60  INT32: -50331648/0xfd000000 (0 => OK)
60   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
60   HALF: 0xa200  (0x14 => OVERFLOW   INEXACT )
61  INT32: -67108864/0xfc000000 (0 => OK)
61   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
61   HALF: 0xa400  (0x14 => OVERFLOW   INEXACT )
62  INT32: -134217728/0xf8000000 (0 => OK)
62   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
62   HALF: 0xa800  (0x14 => OVERFLOW   INEXACT )
63  INT32: -268435456/0xf0000000 (0 => OK)
63   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
63   HALF: 0xac00  (0x14 => OVERFLOW   INEXACT )
64  INT32: -536870912/0xe0000000 (0 => OK)
64   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
64   HALF: 0xb000  (0x14 => OVERFLOW   INEXACT )
65  INT32: -805306368/0xd0000000 (0 => OK)
65   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
65   HALF: 0xb200  (0x14 => OVERFLOW   INEXACT )
66  INT32: -1073741824/0xc0000000 (0 => OK)
66   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
66   HALF: 0xb400  (0x14 => OVERFLOW   INEXACT )
67  INT32: -2147483648/0x80000000 (0 => OK)
67   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
67   HALF: 0xb800  (0x14 => OVERFLOW   INEXACT )
Converting fixed point int64 to half-precision
00  INT64:                    0/00000000000000000000 (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
00   HALF: 0000  (0 => OK)
01  INT64:                    1/0x000000000000000001 (0 => OK)
01   HALF: 0x3800  (0 => OK)
01   HALF: 0x3400  (0 => OK)
01   HALF: 0x2c00  (0 => OK)
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
01   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02  INT64:                   16/0x000000000000000010 (0 => OK)
02   HALF: 0x4800  (0 => OK)
02   HALF: 0x4400  (0 => OK)
02   HALF: 0x3c00  (0 => OK)
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
02   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03  INT64:                  256/0x000000000000000100 (0 => OK)
03   HALF: 0x5800  (0 => OK)
03   HALF: 0x5400  (0 => OK)
03   HALF: 0x4c00  (0 => OK)
03   HALF: 0x01  (0 => OK)
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
03   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04  INT64:                 4096/0x000000000000001000 (0 => OK)
04   HALF: 0x6800  (0 => OK)
04   HALF: 0x6400  (0 => OK)
04   HALF: 0x5c00  (0 => OK)
04   HALF: 0x10  (0 => OK)
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
04   HALF: 0000  (0x18 =>  UNDERFLOW  INEXACT )
05  INT64:                65503/0x00000000000000ffdf (0 => OK)
05   HALF: 0x77fe  (0x10 =>    INEXACT )
05   HALF: 0x73fe  (0x10 =>    INEXACT )
05   HALF: 0x6bfe  (0x10 =>    INEXACT )
05   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x07  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x03  (0x18 =>  UNDERFLOW  INEXACT )
05   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
06  INT64:                65504/0x00000000000000ffe0 (0 => OK)
06   HALF: 0x77ff  (0 => OK)
06   HALF: 0x73ff  (0 => OK)
06   HALF: 0x6bff  (0 => OK)
06   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x07  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x03  (0x18 =>  UNDERFLOW  INEXACT )
06   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
07  INT64:                65505/0x00000000000000ffe1 (0 => OK)
07   HALF: 0x77ff  (0x10 =>    INEXACT )
07   HALF: 0x73ff  (0x10 =>    INEXACT )
07   HALF: 0x6bff  (0x10 =>    INEXACT )
07   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x07  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x03  (0x18 =>  UNDERFLOW  INEXACT )
07   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
08  INT64:                65535/0x00000000000000ffff (0 => OK)
08   HALF: 0x77ff  (0x10 =>    INEXACT )
08   HALF: 0x73ff  (0x10 =>    INEXACT )
08   HALF: 0x6bff  (0x10 =>    INEXACT )
08   HALF: 0xff  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x07  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x03  (0x18 =>  UNDERFLOW  INEXACT )
08   HALF: 0x01  (0x18 =>  UNDERFLOW  INEXACT )
09  INT64:                65536/0x000000000000010000 (0 => OK)
09   HALF: 0x7800  (0 => OK)
09   HALF: 0x7400  (0 => OK)
09   HALF: 0x6c00  (0 => OK)
09   HALF: 0x100  (0 => OK)
09   HALF: 0x08  (0 => OK)
09   HALF: 0x04  (0 => OK)
09   HALF: 0x02  (0 => OK)
10  INT64:              1048576/0x000000000000100000 (0 => OK)
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0xc00  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x80  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x40  (0x14 => OVERFLOW   INEXACT )
10   HALF: 0x20  (0x14 => OVERFLOW   INEXACT )
11  INT64:             16777215/0x000000000000ffffff (0 => OK)
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x1bff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x7ff  (0x14 => OVERFLOW   INEXACT )
11   HALF: 0x3ff  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
11   HALF: 0x1ff  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
12  INT64:             16777216/0x000000000001000000 (0 => OK)
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x400  (0x14 => OVERFLOW   INEXACT )
12   HALF: 0x200  (0x14 => OVERFLOW   INEXACT )
13  INT64:             16777217/0x000000000001000001 (0 => OK)
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x800  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x400  (0x14 => OVERFLOW   INEXACT )
13   HALF: 0x200  (0x1c => OVERFLOW UNDERFLOW  INEXACT )
14  INT64:            268435456/0x000000000010000000 (0 => OK)
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1400  (0x14 => OVERFLOW   INEXACT )
14   HALF: 0x1000  (0x14 => OVERFLOW   INEXACT )
15  INT64:            536870912/0x000000000020000000 (0 => OK)
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
15   HALF: 0x1400  (0x14 => OVERFLOW   INEXACT )
16  INT64:           1073741824/0x000000000040000000 (0 => OK)
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x2000  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
16   HALF: 0x1800  (0x14 => OVERFLOW   INEXACT )
17  INT64:           2147483648/0x000000000080000000 (0 => OK)
17   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x3800  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x2400  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x2000  (0x14 => OVERFLOW   INEXACT )
17   HALF: 0x1c00  (0x14 => OVERFLOW   INEXACT )
18  INT64:          34359738368/0x000000000800000000 (0 => OK)
18   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x4800  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x3400  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x3000  (0x14 => OVERFLOW   INEXACT )
18   HALF: 0x2c00  (0x14 => OVERFLOW   INEXACT )
19  INT64:         549755813888/0x000000008000000000 (0 => OK)
19   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x5800  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x4400  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x4000  (0x14 => OVERFLOW   INEXACT )
19   HALF: 0x3c00  (0x14 => OVERFLOW   INEXACT )
20  INT64:        8796093022208/0x000000080000000000 (0 => OK)
20   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x6800  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x5400  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x5000  (0x14 => OVERFLOW   INEXACT )
20   HALF: 0x4c00  (0x14 => OVERFLOW   INEXACT )
21  INT64:      140737488355328/0x000000800000000000 (0 => OK)
21   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x7800  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x6400  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x6000  (0x14 => OVERFLOW   INEXACT )
21   HALF: 0x5c00  (0x14 => OVERFLOW   INEXACT )
22  INT64:     2251799813685248/0x000008000000000000 (0 => OK)
22   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7400  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x7000  (0x14 => OVERFLOW   INEXACT )
22   HALF: 0x6c00  (0x14 => OVERFLOW   INEXACT )
23  INT64:    36028797018963968/0x000080000000000000 (0 => OK)
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
23   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24  INT64:   576460752303423488/0x000800000000000000 (0 => OK)
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
24   HALF: 0x7bff  (0x14 => OVERFLOW   INEXACT )
25  INT64: -9223372036854775808/0x008000000000000000 (0 => OK)
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
25   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26  INT64: -9223372036854775807/0x008000000000000001 (0 => OK)
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
26   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27  INT64: -9223372036854775777/0x00800000000000001f (0 => OK)
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
27   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28  INT64: -9223372036854775745/0x00800000000000003f (0 => OK)
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
28   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29  INT64: -9223372036854775681/0x00800000000000007f (0 => OK)
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
29   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30  INT64: -9223372036854775553/0x0080000000000000ff (0 => OK)
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
30   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31  INT64: -9223372036854775297/0x0080000000000001ff (0 => OK)
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
31   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32  INT64: -9223372036854775009/0x00800000000000031f (0 => OK)
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
32   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33  INT64: -9223372036854773761/0x0080000000000007ff (0 => OK)
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
33   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34  INT64: -9223372036854771713/0x008000000000000fff (0 => OK)
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
34   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35  INT64: -9223372036854710273/0x00800000000000ffff (0 => OK)
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
35   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36  INT64: -9223372036853727233/0x0080000000000fffff (0 => OK)
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
36   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37  INT64: -9223372036837998593/0x008000000000ffffff (0 => OK)
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
37   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38  INT64: -9223372036586340353/0x00800000000fffffff (0 => OK)
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
38   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39  INT64: -9223372032559808513/0x0080000000ffffffff (0 => OK)
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
39   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40  INT64: -9223371968135299073/0x008000000fffffffff (0 => OK)
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
40   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41  INT64: -9223370937343148033/0x00800000ffffffffff (0 => OK)
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
41   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42  INT64: -9223354444668731393/0x0080000fffffffffff (0 => OK)
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
42   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43  INT64: -9223090561878065153/0x008000ffffffffffff (0 => OK)
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
43   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44  INT64: -9218868437227405313/0x00800fffffffffffff (0 => OK)
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
44   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45  INT64: -9218868437227405313/0x00800fffffffffffff (0 => OK)
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
45   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46  INT64: -9151314442816847873/0x0080ffffffffffffff (0 => OK)
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
46   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47  INT64: -9079256848778919937/0x0081ffffffffffffff (0 => OK)
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
47   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48  INT64: -8935141660703064065/0x0083ffffffffffffff (0 => OK)
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
48   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49  INT64: -8646911284551352321/0x0087ffffffffffffff (0 => OK)
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
49   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50  INT64: -8070450532247928833/0x008fffffffffffffff (0 => OK)
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
50   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51  INT64: -6917529027641081857/0x009fffffffffffffff (0 => OK)
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
51   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52  INT64: -5764607523034234881/0x00afffffffffffffff (0 => OK)
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
52   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53  INT64: -4611686018427387905/0x00bfffffffffffffff (0 => OK)
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
53   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54  INT64: -3458764513820540929/0x00cfffffffffffffff (0 => OK)
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
54   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55  INT64: -2305843009213693953/0x00dfffffffffffffff (0 => OK)
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
55   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56  INT64: -1152921504606846977/0x00efffffffffffffff (0 => OK)
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
56   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57  INT64: -1152921504606846976/0x00f000000000000000 (0 => OK)
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
57   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58  INT64:   -18001204369948673/0x00ffc00bffffffffff (0 => OK)
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbff  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xfbfe  (0x14 => OVERFLOW   INEXACT )
58   HALF: 0xf7fe  (0x14 => OVERFLOW   INEXACT )
59  INT64:                   -1/0x00ffffffffffffffff (0 => OK)
59   HALF: 0xb800  (0 => OK)
59   HALF: 0xb400  (0 => OK)
59   HALF: 0xac00  (0 => OK)
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
59   HALF: 0x8000  (0x18 =>  UNDERFLOW  INEXACT )
