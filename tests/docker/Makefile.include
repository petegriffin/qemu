# Makefile for Docker tests

$(if $(quiet-command),,$(eval include $(SRC_PATH)/rules.mak))

.PHONY: docker docker-test docker-clean docker-image

DOCKER_SUFFIX := .docker

DOCKER_IMAGES := $(notdir $(basename \
	$(wildcard $(SRC_PATH)/tests/docker/dockerfiles/*)))

DOCKER_TESTS := $(notdir $(shell \
	find $(SRC_PATH)/tests/docker/ -name 'test-*' -type f -executable))

DOCKER_TOOLS := travis

TESTS ?= %
IMAGES ?= %

$(foreach i,$(DOCKER_IMAGES), \
	$(eval docker-image: docker-image-$i) \
	$(eval docker-image-$i: IMAGE = $i) \
	$(eval .PHONY: docker-image-$i docker-@$i) \
	$(foreach t,$(DOCKER_TESTS) $(DOCKER_TOOLS), \
		$(eval .PHONY: docker-$t@$i) \
		$(eval docker-$t@$i: docker-image-$i) \
		$(eval docker-$t@$i: docker-run-$t@$i) \
		$(eval docker-@$i: docker-$t@$i) \
		$(eval docker-test: docker-run-$t@$i) \
	) \
)

docker:
	@echo 'Building QEMU and running tests inside Docker containers'
	@echo
	@echo 'Available targets:'
	@echo
	@echo '    docker:              Print this help.'
	@echo '    docker-test:         Run all image/test combinations.'
	@echo '    docker-clean:        Kill and remove residual docker testing containers.'
	@echo '    docker-TEST@IMAGE:   Run "TEST" in container "IMAGE".'
	@echo '                         Note: "TEST" is one of the listed test name,'
	@echo '                         or a script name under $$QEMU_SRC/tests/docker/;'
	@echo '                         "IMAGE" is one of the listed container name."'
	@echo '    docker-@IMAGE:       Run all tests in container "IMAGE".'
	@echo '    docker-image:        Build all images.'
	@echo '    docker-image-IMAGE:  Build image "IMG".'
	@echo
	@echo 'Available container images:'
	@echo '    $(DOCKER_IMAGES)'
	@echo
	@echo 'Available tests:'
	@echo '    $(DOCKER_TESTS)'
	@echo
	@echo 'Available tools:'
	@echo '    $(DOCKER_TOOLS)'
	@echo
	@echo 'Special variables:'
	@echo '    IMAGES="a b c ..":   Filters which images to build or run.'
	@echo '    TESTS="x y z .."     Filters which tests to run (for docker-test).'
	@echo '    J=[0..9]*            Overrides the -jN parameter for make commands'
	@echo '                         (default is 1)'
	@echo '    PAUSE=1              Stop and drop to shell in the created container'
	@echo '                         before running the command.'

docker-image-%:
	@if test -z "$(IMAGE)"; then echo "Invalid target"; exit 1; fi
	$(if $(filter $(IMAGES),$(IMAGE)), $(call quiet-command,\
		$(SRC_PATH)/tests/docker/docker_build qemu:$(IMAGE) \
			$(SRC_PATH)/tests/docker/dockerfiles/$(IMAGE).docker \
			$(if $V,-v,), "  BUILD $(IMAGE)"))


docker-run-%: CMD = $(shell echo '$@' | sed -e 's/docker-run-\([^@]*\)@\(.*\)/\1/')
docker-run-%: IMAGE = $(shell echo '$@' | sed -e 's/docker-run-\([^@]*\)@\(.*\)/\2/')
docker-run-%:
	@if test -z "$(IMAGE)" || test -z "$(CMD)"; \
		then echo "Invalid target"; exit 1; \
	fi
	$(if $(filter $(TESTS),$(CMD)),$(if $(filter $(IMAGES),$(IMAGE)), \
		$(call quiet-command,\
			$(SRC_PATH)/tests/docker/docker_run $(if $(KEEP),,--rm) \
				--privileged -t --net=none \
				$(if $(PAUSE),-i) \
				-v $$(realpath $(SRC_PATH)):/var/tmp/qemu \
				-e QEMU_SRC=/var/tmp/qemu \
				-e V=$V -e J=$J -e PAUSE=$(PAUSE)\
				-v /var/tmp/qemu-docker-ccache:/var/tmp/ccache \
				-e CCACHE_DIR=/var/tmp/ccache \
				qemu:$(IMAGE) \
				/var/tmp/qemu/tests/docker/run \
				/var/tmp/qemu/tests/docker/$(CMD); \
			, "  RUN $(CMD) in $(IMAGE)")))

docker-clean:
	$(call quiet-command, $(SRC_PATH)/tests/docker/docker_clean)
