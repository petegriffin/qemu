sudo: false
language: c
python:
  - "2.4"
compiler:
  - gcc
cache:
  ccache: true
  timeout: 1200 # https://docs.travis-ci.com/user/caching#setting-the-timeout
  directories:
  - $HOME/qemu/.git/modules
addons:
  apt:
    packages:
      # Build dependencies
      - glusterfs-common
      - libaio-dev
      - libattr1-dev
      - libbluetooth-dev
      - libbrlapi-dev
      - libbz2-dev
      - libcap-dev
      - libcap-ng-dev
      - libgnutls-dev
      - libgtk-3-dev
      - libiscsi-dev
      - liblttng-ust-dev
      - liblzo2-dev
      - libnfs-dev
      - libncurses5-dev
      - libncursesw5-dev
      - libnfs-dev
      - libnss3-dev
      - libpixman-1-dev
      - libpng12-dev
      - librados-dev
      - librdmacm-dev
      - libsdl1.2-dev
      - libseccomp-dev
      - libsnappy-dev
      - libspice-protocol-dev
      - libspice-server-dev
      - libssh2-1-dev
      - liburcu-dev
      - libusb-1.0-0-dev
      - libvde-dev
      - libvte-2.90-dev
      - libxen-dev
      - nettle-dev
      - sparse
      - uuid-dev
      - xfslibs-dev

# The channel name "irc.oftc.net#qemu" is encrypted against qemu/qemu
# to prevent IRC notifications from forks. This was created using:
# $ travis encrypt -r "qemu/qemu" "irc.oftc.net#qemu"
notifications:
  irc:
    channels:
      - secure: "F7GDRgjuOo5IUyRLqSkmDL7kvdU4UcH3Lm/W2db2JnDHTGCqgEdaYEYKciyCLZ57vOTsTsOgesN8iUT7hNHBd1KWKjZe9KDTZWppWRYVwAwQMzVeSOsbbU4tRoJ6Pp+3qhH1Z0eGYR9ZgKYAoTumDFgSAYRp4IscKS8jkoedOqM="
    on_success: change
    on_failure: always
env:
  global:
    # jobs
      # detects cores on the hosting hardware, rather than the VM (https://docs.travis-ci.com/user/languages/c#hints)
    - VM_CORES="4" HW_CORES="$(getconf _NPROCESSORS_ONLN)"
      # be kind with Travis free plan, restrict to at most 4 cores
    - PARALLEL_JOBS="$(($(test ${HW_CORES} -gt ${VM_CORES} && echo ${VM_CORES} || echo ${HW_CORES}) + 1))"
    - HOMEBREW_MAKE_JOBS="${PARALLEL_JOBS}"
    # ccache
    - CCACHE_SLOPPINESS="file_macro,time_macros"
    # tests
    - TEST_CMD="make -j${PARALLEL_JOBS} check"
  matrix:
    - CONFIG=""
    - CONFIG="--enable-debug --enable-debug-tcg --enable-trace-backends=log"
    - CONFIG="--disable-linux-aio --disable-cap-ng --disable-attr --disable-brlapi --disable-uuid --disable-libusb"
    - CONFIG="--enable-modules"
    - CONFIG="--with-coroutine=ucontext"
    - CONFIG="--with-coroutine=sigaltstack"
git:
  # we want to do this ourselves
  submodules: false
before_install:
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install libffi gettext glib pixman ccache ; fi
  - travis_retry git submodule update --init --recursive
before_script:
  # https://docs.travis-ci.com/user/caching#ccache-on-os-x
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then export PATH=/usr/local/opt/ccache/libexec:$PATH ; fi
  - if [ "$CC" == "clang" ]; then export CCACHE_CPP2=1 ; fi
  - if [ -x "$(command -v ccache 2>/dev/null)" ]; then export CC="ccache ${CC}"; ccache -s -M 0 -z; fi
  - echo "Using ${PARALLEL_JOBS} parallel jobs"
  - export HOST_CC="${CC}"
  - ./configure ${CONFIG} || cat config.log
script:
  - make -j${PARALLEL_JOBS} && ccache -s
  - ${TEST_CMD}
before_cache:
  - ccache -s
matrix:
  include:
    # Test with CLang for compile portability
    - env: CONFIG=""
      compiler: clang
    # gprof/gcov are GCC features
    - env: CONFIG="--enable-gprof --disable-pie"
      compiler: gcc
    - env: CONFIG="--enable-gcov --disable-pie"
      compiler: gcc
    # We manually include builds which we disable "make check" for
    - env: CONFIG="--enable-debug --enable-tcg-interpreter"
           TEST_CMD=""
      compiler: gcc
    - env: CONFIG="--enable-trace-backends=simple"
           TEST_CMD=""
      compiler: gcc
    - env: CONFIG="--enable-trace-backends=ftrace"
           TEST_CMD=""
      compiler: gcc
    - env: CONFIG="--enable-trace-backends=ust"
           TEST_CMD=""
      compiler: gcc
    - env: CONFIG=""
           CCACHE_SLOPPINESS="file_macro,time_macros,include_file_ctime,include_file_mtime"
      os: osx
      compiler: clang
    # Plain Trusty System Build
    - env: CONFIG="--disable-linux-user"
      sudo: required
      addons:
      dist: trusty
      compiler: gcc
      before_install:
        - sudo apt-get update -qq
        - sudo apt-get build-dep -qq qemu
        - git submodule update --init --recursive
    # Plain Trusty Linux User Build
    - env: CONFIG="--disable-system"
      sudo: required
      addons:
      dist: trusty
      compiler: gcc
      before_install:
        - sudo apt-get update -qq
        - sudo apt-get build-dep -qq qemu
        - git submodule update --init --recursive
    # Trusty System build with latest stable clang
    - sudo: required
      addons:
      dist: trusty
      group: edge
      language: generic
      compiler: none
      env:
        - COMPILER_NAME=clang CXX=clang++-3.9 CC=clang-3.9
        - CONFIG="--disable-linux-user --cc=clang-3.9 --cxx=clang++-3.9"
      before_install:
        - travis_retry wget -nv -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -
        - travis_retry sudo apt-add-repository -y 'deb http://llvm.org/apt/trusty llvm-toolchain-trusty-3.9 main'
        - travis_retry sudo apt-get update -qq
        - travis_retry sudo apt-get install -qq -y clang-3.9
        - sudo apt-get build-dep -qq qemu
        - git submodule update --init --recursive
      before_script:
        - ./configure ${CONFIG} || cat config.log
    # Trusty Linux User build with latest stable clang
    - sudo: required
      addons:
      dist: trusty
      group: edge
      language: generic
      compiler: none
      env:
        - COMPILER_NAME=clang CXX=clang++-3.9 CC=clang-3.9
        - CONFIG="--disable-system --cc=clang-3.9 --cxx=clang++-3.9"
      before_install:
        - travis_retry wget -nv -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -
        - travis_retry sudo apt-add-repository -y 'deb http://llvm.org/apt/trusty llvm-toolchain-trusty-3.9 main'
        - travis_retry sudo apt-get update -qq
        - travis_retry sudo apt-get install -qq -y clang-3.9
        - sudo apt-get build-dep -qq qemu
        - git submodule update --init --recursive
      before_script:
        - ./configure ${CONFIG} || cat config.log
    # Using newer GCC with sanitizers
    - addons:
        apt:
          sources:
            # PPAs for newer toolchains
            - ubuntu-toolchain-r-test
          packages:
            # Extra toolchains
            - gcc-6
            - g++-6
            # Build dependencies
            - glusterfs-common
            - libaio-dev
            - libattr1-dev
            - libbluetooth-dev
            - libbrlapi-dev
            - libbz2-dev
            - libcap-dev
            - libcap-ng-dev
            - libgnutls-dev
            - libgtk-3-dev
            - libiscsi-dev
            - liblttng-ust-dev
            - liblzo2-dev
            - libnfs-dev
            - libncurses5-dev
            - libncursesw5-dev
            - libnfs-dev
            - libnss3-dev
            - libpixman-1-dev
            - libpng12-dev
            - librados-dev
            - librdmacm-dev
            - libsdl1.2-dev
            - libseccomp-dev
            - libsnappy-dev
            - libspice-protocol-dev
            - libspice-server-dev
            - libssh2-1-dev
            - liburcu-dev
            - libusb-1.0-0-dev
            - libvde-dev
            - libvte-2.90-dev
            - libxen-dev
            - nettle-dev
            - sparse
            - uuid-dev
            - xfslibs-dev
      language: generic
      compiler: none
      env:
        - COMPILER_NAME=gcc CXX=g++-6 CC=gcc-6
        - CONFIG="--disable-pie --disable-linux-user"
        - TEST_CMD=""
      before_script:
        - ./configure ${CONFIG} --extra-cflags="-g3 -O0 -fsanitize=thread -fuse-ld=gold" || cat config.log
    # Build and upload to Coverity Scan.
    # We do not impose any rate limiting here, but instead rely on the
    # limiting done by the coverity servers, which for a project of QEMU's
    # size means one build a day. The run-coverity-scan script will exit
    # early if the limiter does not permit a new upload, so the effect will
    # be that the first build (only) in each 24 hour period will be scanned.
    # If we needed to apply a limit at the Travis end, the simplest approach
    # would be to run the scan only if the branch was 'coverity-scan', and
    # use a cron job to push master to the 'coverity-scan' branch periodically.
    # We run on the trusty Travis hosts so that there's a wider set of
    # dependencies satisfied to improve coverage.
    - dist: trusty
      group: edge
      env:
        - COVERITY=1
        - COVERITY_BUILD_CMD="make -j${PARALLEL_JOBS}"
        - COVERITY_EMAIL=peter.maydell@linaro.org
        # This 'secure' setting sets COVERITY_TOKEN=<secret token>
        # and was created with travis encrypt -r qemu/qemu COVERITY_TOKEN=...
        - secure: "D3E6E5bacui53fYBQrx0wQr8ZTvo6VIBPKfg0QHj2uwa6OPFkUlcMr/EHWvdbZNAa4Q1bv1vhlED5OPRfPmQYzxQNT4SAxDZeuZnikgIymfqQXNOjKw4kRUDO9P42QanyFd+EAu2JDVClAeJPgBpa/ns4CNrGDK+Q3coGndCP8o="
      before_script:
        - if [ "$TRAVIS_PULL_REQUEST" = "true" ]; then echo "Skipping Coverity (pullreq)"; exit 0; fi
        - if [ "$TRAVIS_BRANCH" != "master" ]; then echo "Skipping Coverity (wrong branch)"; exit 0; fi
      script:
        - ./scripts/run-coverity-scan
